asm{std.Graphics};

const SCREEN_WIDTH: int = 320i;
const SCREEN_HEIGHT: int = 240i;

nat setPixel set_pixel null int int byte;
nat drawVerticalLine draw_vertical_line null byte int int int;
nat bufferPixel buffer_pixel null int int byte;
nat clearScreen clear_screen null byte;
nat clearBuffer clear_buffer null byte;
nat writeBuffer write_buffer null;
nat drawMode set_mode null bool;

fun drawBlock(X: int, Y: int, Width: int, Height: int, Color: byte){
    var location: pointer = getBuffer();
    if(Y > 120i){
        location = location + 38400i;
        Y = Y - 120i;
    };
    location =  location + (Y * SCREEN_WIDTH + X);

    var except_width: int = SCREEN_WIDTH - Width;
    var y: int = 0i;
        while(y < Height){
        var x: int = 0i;
        while(x < Width){
            move Color to location;
            location = location + 1i;
            x = x + 1i;
        };
        location = location + except_width;
        y = y + 1i;
    };

};

fun displayBitmap(X: int, Y: int, Width: int, Height: int, Picture: pointer, Color: byte, Multiplier: int){
    var y: int = 0i;
    var i: int = 0i;

    while(y < Height){
        var x: int = 0i;
        while(x < Width){
            var pixelBlock: byte = Picture + i -> byte;
            if(pixelBlock[7b]){
                drawBlock(X + ((x + 0i) * Multiplier) , Y + (y * Multiplier), Multiplier, Multiplier, Color);
            };
            if(pixelBlock[6b]){
                drawBlock(X + ((x + 1i) * Multiplier), Y + (y * Multiplier), Multiplier, Multiplier, Color);
            };
            if(pixelBlock[5b]){
                drawBlock(X + ((x + 2i) * Multiplier), Y + (y * Multiplier), Multiplier, Multiplier, Color);
            };
            if(pixelBlock[4b]){
                drawBlock(X + ((x + 3i) * Multiplier), Y + (y * Multiplier), Multiplier, Multiplier, Color);
            };
            if(pixelBlock[3b]){
                drawBlock(X + ((x + 4i) * Multiplier), Y + (y * Multiplier), Multiplier, Multiplier, Color);
            };
            if(pixelBlock[2b]){
                drawBlock(X + ((x + 5i) * Multiplier), Y + (y * Multiplier), Multiplier, Multiplier, Color);
            };
            if(pixelBlock[1b]){
                drawBlock(X + ((x + 6i) * Multiplier), Y + (y * Multiplier), Multiplier, Multiplier, Color);
            };
            if(pixelBlock[0b]){
                drawBlock(X + ((x + 7i) * Multiplier), Y + (y * Multiplier), Multiplier, Multiplier, Color);
            };
            x = x + 8i;
            i = i + 1i;
        };
        y = y + 1i;
    };

};


