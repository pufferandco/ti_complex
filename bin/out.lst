    1 00:0000 -  -  -  -  #include "asm/include.inc"
Listing for file "C:\Users\sande\IdeaProjects\ti_compile\asm\include.inc"
    1 00:0000 -  -  -  -  ;TI-84 Plus CE Include File
    2 00:0000 -  -  -  -  
    3 00:0000 -  -  -  -  ;Various Parts Contributed by
    4 00:0000 -  -  -  -  ;- BrandonW
    5 00:0000 -  -  -  -  ;- calc84
    6 00:0000 -  -  -  -  ;- MateoConLechuga
    7 00:0000 -  -  -  -  ;- Runer112
    8 00:0000 -  -  -  -  ;- tr1p1ea
    9 00:0000 -  -  -  -  ;- Kerm Martian
   10 00:0000 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "asm/main.asm"
    2 00:0000 -  -  -  -  .assume	ADL=1
    3 00:0000 -  -  -  -  .org	userMem-2
    4 D1:A87F -  -  -  -  MemoryStart:
    5 D1:A87F EF 7B -  -  	.db          tExtTok,tAsm84CeCmp
    6 D1:A881 -  -  -  -  	             
    7 D1:A881 FD CB 0D D6 	set          AppAutoScroll,(IY + AppFlags)
    8 D1:A885 ED 73 E6 AE 
              D1 -  -  -  	ld           (StackSave),SP
    9 D1:A88A 21 45 23 D1 	ld           HL,callStackStart
   10 D1:A88E 22 E9 AE D1 	ld           (callStack),HL
   11 D1:A892 31 B2 06 D1 	ld           SP,stackStart
   12 D1:A896 CD 4D AB D1 	call         init
   13 D1:A89A CD 28 08 02 	call         _homeup
   14 D1:A89E CD 10 08 02 	call         _ClrScrnFull
   15 D1:A8A2 -  -  -  -  	             
   16 D1:A8A2 21 00 00 00 	ld           HL,0
   17 D1:A8A6 22 F6 31 D0 	ld           (globalVars+0),HL
   18 D1:A8AA 21 00 00 00 	ld           HL,0
   19 D1:A8AE 22 F9 31 D0 	ld           (globalVars+3),HL
   20 D1:A8B2 CD BB AC D1 	call         sub_block_enter
   21 D1:A8B6 21 45 23 D1 	ld           HL,HEAP_START
   22 D1:A8BA E5 -  -  -  	push         HL
   23 D1:A8BB 21 00 00 00 	ld           HL,0
   24 D1:A8BF 39 -  -  -  	add          HL,SP
   25 D1:A8C0 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
   26 D1:A8C5 CD F7 B4 D1 	call         PS_init_268
   27 D1:A8C9 E1 -  -  -  	pop          HL
   28 D1:A8CA ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
   29 D1:A8CF F9 -  -  -  	ld           SP,HL
   30 D1:A8D0 21 C8 00 00 	ld           HL,200
   31 D1:A8D4 E5 -  -  -  	push         HL
   32 D1:A8D5 3E 00 -  -  	ld           A,0                       ; 0b
   33 D1:A8D7 32 FC 31 D0 	ld           (globalVars+6),A
   34 D1:A8DB 3E 1E -  -  	ld           A,30                      ; 30b
   35 D1:A8DD 32 FD 31 D0 	ld           (globalVars+7),A
   36 D1:A8E1 21 68 00 00 	ld           HL,104
   37 D1:A8E5 E5 -  -  -  	push         HL
   38 D1:A8E6 D1 -  -  -  	pop          DE
   39 D1:A8E7 21 FE 31 D0 	ld           HL,globalVars+8
   40 D1:A8EB 72 -  -  -  	ld           (HL),D
   41 D1:A8EC 23 -  -  -  	inc          HL
   42 D1:A8ED 73 -  -  -  	ld           (HL),E
   43 D1:A8EE 21 64 00 00 	ld           HL,100
   44 D1:A8F2 E5 -  -  -  	push         HL
   45 D1:A8F3 D1 -  -  -  	pop          DE
   46 D1:A8F4 21 00 32 D0 	ld           HL,globalVars+10
   47 D1:A8F8 72 -  -  -  	ld           (HL),D
   48 D1:A8F9 23 -  -  -  	inc          HL
   49 D1:A8FA 73 -  -  -  	ld           (HL),E
   50 D1:A8FB 21 24 CB D1 	ld           HL,block_i
   51 D1:A8FF 22 02 32 D0 	ld           (globalVars+12),HL
   52 D1:A903 21 00 00 00 	ld           HL,0
   53 D1:A907 E5 -  -  -  	push         HL
   54 D1:A908 D1 -  -  -  	pop          DE
   55 D1:A909 21 05 32 D0 	ld           HL,globalVars+15
   56 D1:A90D 72 -  -  -  	ld           (HL),D
   57 D1:A90E 23 -  -  -  	inc          HL
   58 D1:A90F 73 -  -  -  	ld           (HL),E
   59 D1:A910 CD BB AC D1 	call         sub_block_enter
   60 D1:A914 CD BB AC D1 	call         sub_block_enter
   61 D1:A918 3E 07 -  -  	ld           A,7                       ; 7b
   62 D1:A91A F5 -  -  -  	push         AF
   63 D1:A91B 21 00 00 00 	ld           HL,0
   64 D1:A91F 39 -  -  -  	add          HL,SP
   65 D1:A920 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
   66 D1:A925 CD 08 B4 D1 	call         malloc_244
   67 D1:A929 E1 -  -  -  	pop          HL
   68 D1:A92A ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
   69 D1:A92F F9 -  -  -  	ld           SP,HL
   70 D1:A930 D5 -  -  -  	push         DE
   71 D1:A931 21 00 00 00 	ld           HL,0
   72 D1:A935 39 -  -  -  	add          HL,SP
   73 D1:A936 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
   74 D1:A93B CD 76 B6 D1 	call         newBase10_334
   75 D1:A93F E1 -  -  -  	pop          HL
   76 D1:A940 ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
   77 D1:A945 F9 -  -  -  	ld           SP,HL
   78 D1:A946 D5 -  -  -  	push         DE
   79 D1:A947 E1 -  -  -  	pop          HL
   80 D1:A948 22 07 32 D0 	ld           (globalVars+17),HL
   81 D1:A94C 21 C8 00 00 	ld           HL,200
   82 D1:A950 E5 -  -  -  	push         HL
   83 D1:A951 CD BB AC D1 	call         sub_block_enter
   84 D1:A955 3E CA -  -  	ld           A,202                     ; 202b
   85 D1:A957 F5 -  -  -  	push         AF
   86 D1:A958 21 00 00 00 	ld           HL,0
   87 D1:A95C 39 -  -  -  	add          HL,SP
   88 D1:A95D ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
   89 D1:A962 CD 08 B4 D1 	call         malloc_244
   90 D1:A966 E1 -  -  -  	pop          HL
   91 D1:A967 ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
   92 D1:A96C F9 -  -  -  	ld           SP,HL
   93 D1:A96D D5 -  -  -  	push         DE
   94 D1:A96E E1 -  -  -  	pop          HL
   95 D1:A96F D1 -  -  -  	pop          DE
   96 D1:A970 72 -  -  -  	ld           (HL),D
   97 D1:A971 23 -  -  -  	inc          HL
   98 D1:A972 73 -  -  -  	ld           (HL),E
   99 D1:A973 2B -  -  -  	dec          HL
  100 D1:A974 22 0A 32 D0 	ld           (globalVars+20),HL
  101 D1:A978 3E FF -  -  	ld           A,%11111111
  102 D1:A97A 32 0D 32 D0 	ld           (globalVars+23),A
  103 D1:A97E 3E 00 -  -  	ld           A,%00000000
  104 D1:A980 F5 -  -  -  	push         AF
  105 D1:A981 CD C1 CA D1 	call         set_mode
  106 D1:A985 3E 4A -  -  	ld           A,74
  107 D1:A987 F5 -  -  -  	push         AF
  108 D1:A988 CD 95 CA D1 	call         clear_screen
  109 D1:A98C CD BB AC D1 	call         sub_block_enter
  110 D1:A990 2A 0A 32 D0 	ld           HL,(globalVars+20)
  111 D1:A994 E5 -  -  -  	push         HL
  112 D1:A995 3E 00 -  -  	ld           A,0                       ; 0b
  113 D1:A997 F5 -  -  -  	push         AF
  114 D1:A998 21 00 00 00 	ld           HL,0
  115 D1:A99C 39 -  -  -  	add          HL,SP
  116 D1:A99D ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
  117 D1:A9A2 CD 43 B5 D1 	call         fillByteArray_276
  118 D1:A9A6 E1 -  -  -  	pop          HL
  119 D1:A9A7 ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
  120 D1:A9AC F9 -  -  -  	ld           SP,HL
  121 D1:A9AD -  -  -  -  while_start1072:
  122 D1:A9AD 3A 0D 32 D0 	ld           A,(globalVars+23)
  123 D1:A9B1 FE FF -  -  	cp           A,%11111111
  124 D1:A9B3 C2 38 AB D1 	jp           NZ,while_end1073
  125 D1:A9B7 CD BB AC D1 	call         sub_block_enter
  126 D1:A9BB CD BB AC D1 	call         sub_block_enter
  127 D1:A9BF CD BB AC D1 	call         sub_block_enter
  128 D1:A9C3 11 00 00 00 	ld           DE,0
  129 D1:A9C7 21 FE 31 D0 	ld           HL,globalVars+8
  130 D1:A9CB 56 -  -  -  	ld           D,(HL)
  131 D1:A9CC 23 -  -  -  	inc          HL
  132 D1:A9CD 5E -  -  -  	ld           E,(HL)
  133 D1:A9CE D5 -  -  -  	push         DE
  134 D1:A9CF 11 00 00 00 	ld           DE,0
  135 D1:A9D3 21 00 32 D0 	ld           HL,globalVars+10
  136 D1:A9D7 56 -  -  -  	ld           D,(HL)
  137 D1:A9D8 23 -  -  -  	inc          HL
  138 D1:A9D9 5E -  -  -  	ld           E,(HL)
  139 D1:A9DA D5 -  -  -  	push         DE
  140 D1:A9DB E1 -  -  -  	pop          HL
  141 D1:A9DC 23 -  -  -  	inc          HL
  142 D1:A9DD E5 -  -  -  	push         HL
  143 D1:A9DE 2A 02 32 D0 	ld           HL,(globalVars+12)
  144 D1:A9E2 E5 -  -  -  	push         HL
  145 D1:A9E3 3A FC 31 D0 	ld           A,(globalVars+6)
  146 D1:A9E7 E1 -  -  -  	pop          HL
  147 D1:A9E8 11 00 00 00 	ld           DE,0
  148 D1:A9EC 5F -  -  -  	ld           E,A
  149 D1:A9ED 19 -  -  -  	add          HL,DE
  150 D1:A9EE E5 -  -  -  	push         HL
  151 D1:A9EF 21 00 00 00 	ld           HL,0
  152 D1:A9F3 39 -  -  -  	add          HL,SP
  153 D1:A9F4 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
  154 D1:A9F9 CD 1B BC D1 	call         checkHitBox_565
  155 D1:A9FD E1 -  -  -  	pop          HL
  156 D1:A9FE ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
  157 D1:AA03 F9 -  -  -  	ld           SP,HL
  158 D1:AA04 D5 -  -  -  	push         DE
  159 D1:AA05 F1 -  -  -  	pop          AF
  160 D1:AA06 FE FF -  -  	cp           A,%11111111
  161 D1:AA08 C2 27 AA D1 	jp           NZ,if_next_1079
  162 D1:AA0C 11 00 00 00 	ld           DE,0
  163 D1:AA10 21 00 32 D0 	ld           HL,globalVars+10
  164 D1:AA14 56 -  -  -  	ld           D,(HL)
  165 D1:AA15 23 -  -  -  	inc          HL
  166 D1:AA16 5E -  -  -  	ld           E,(HL)
  167 D1:AA17 D5 -  -  -  	push         DE
  168 D1:AA18 E1 -  -  -  	pop          HL
  169 D1:AA19 23 -  -  -  	inc          HL
  170 D1:AA1A E5 -  -  -  	push         HL
  171 D1:AA1B D1 -  -  -  	pop          DE
  172 D1:AA1C 21 00 32 D0 	ld           HL,globalVars+10
  173 D1:AA20 72 -  -  -  	ld           (HL),D
  174 D1:AA21 23 -  -  -  	inc          HL
  175 D1:AA22 73 -  -  -  	ld           (HL),E
  176 D1:AA23 C3 A5 AA D1 	jp           if_end_1078
  177 D1:AA27 -  -  -  -  if_next_1079:
  178 D1:AA27 CD BB AC D1 	call         sub_block_enter
  179 D1:AA2B CD BB AC D1 	call         sub_block_enter
  180 D1:AA2F 11 00 00 00 	ld           DE,0
  181 D1:AA33 21 FE 31 D0 	ld           HL,globalVars+8
  182 D1:AA37 56 -  -  -  	ld           D,(HL)
  183 D1:AA38 23 -  -  -  	inc          HL
  184 D1:AA39 5E -  -  -  	ld           E,(HL)
  185 D1:AA3A D5 -  -  -  	push         DE
  186 D1:AA3B 11 00 00 00 	ld           DE,0
  187 D1:AA3F 21 00 32 D0 	ld           HL,globalVars+10
  188 D1:AA43 56 -  -  -  	ld           D,(HL)
  189 D1:AA44 23 -  -  -  	inc          HL
  190 D1:AA45 5E -  -  -  	ld           E,(HL)
  191 D1:AA46 D5 -  -  -  	push         DE
  192 D1:AA47 2A 02 32 D0 	ld           HL,(globalVars+12)
  193 D1:AA4B E5 -  -  -  	push         HL
  194 D1:AA4C 3A FC 31 D0 	ld           A,(globalVars+6)
  195 D1:AA50 E1 -  -  -  	pop          HL
  196 D1:AA51 11 00 00 00 	ld           DE,0
  197 D1:AA55 5F -  -  -  	ld           E,A
  198 D1:AA56 19 -  -  -  	add          HL,DE
  199 D1:AA57 E5 -  -  -  	push         HL
  200 D1:AA58 3A FD 31 D0 	ld           A,(globalVars+7)
  201 D1:AA5C F5 -  -  -  	push         AF
  202 D1:AA5D 21 00 00 00 	ld           HL,0
  203 D1:AA61 39 -  -  -  	add          HL,SP
  204 D1:AA62 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
  205 D1:AA67 CD 15 BD D1 	call         placeBlock_614
  206 D1:AA6B E1 -  -  -  	pop          HL
  207 D1:AA6C ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
  208 D1:AA71 F9 -  -  -  	ld           SP,HL
  209 D1:AA72 D5 -  -  -  	push         DE
  210 D1:AA73 F1 -  -  -  	pop          AF
  211 D1:AA74 FE FF -  -  	cp           A,%11111111
  212 D1:AA76 C2 88 AA D1 	jp           NZ,if_next_1085
  213 D1:AA7A 06 03 -  -  	ld           B,3
  214 D1:AA7C CD DE AC D1 	call         multi_block_leave
  215 D1:AA80 C3 38 AB D1 	jp           while_end1073
  216 D1:AA84 C3 88 AA D1 	jp           if_end_1084
  217 D1:AA88 -  -  -  -  if_next_1085:
  218 D1:AA88 -  -  -  -  if_end_1084:
  219 D1:AA88 CD CF AC D1 	call         sub_block_leave
  220 D1:AA8C CD BB AC D1 	call         sub_block_enter
  221 D1:AA90 21 00 00 00 	ld           HL,0
  222 D1:AA94 39 -  -  -  	add          HL,SP
  223 D1:AA95 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
  224 D1:AA9A CD 3C BE D1 	call         selectBlock_669
  225 D1:AA9E E1 -  -  -  	pop          HL
  226 D1:AA9F ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
  227 D1:AAA4 F9 -  -  -  	ld           SP,HL
  228 D1:AAA5 -  -  -  -  if_end_1078:
  229 D1:AAA5 CD CF AC D1 	call         sub_block_leave
  230 D1:AAA9 CD BB AC D1 	call         sub_block_enter
  231 D1:AAAD 21 00 00 00 	ld           HL,0
  232 D1:AAB1 39 -  -  -  	add          HL,SP
  233 D1:AAB2 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
  234 D1:AAB7 CD C3 BE D1 	call         checkKeys_687
  235 D1:AABB E1 -  -  -  	pop          HL
  236 D1:AABC ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
  237 D1:AAC1 F9 -  -  -  	ld           SP,HL
  238 D1:AAC2 21 00 00 00 	ld           HL,0
  239 D1:AAC6 E5 -  -  -  	push         HL
  240 D1:AAC7 -  -  -  -  while_start1089:
  241 D1:AAC7 2A AC 06 D1 	ld           HL,(stackStart-6)
  242 D1:AACB E5 -  -  -  	push         HL
  243 D1:AACC 2A AF 06 D1 	ld           HL,(stackStart-3)
  244 D1:AAD0 D1 -  -  -  	pop          DE
  245 D1:AAD1 EB -  -  -  	ex           DE,HL
  246 D1:AAD2 CD 69 AC D1 	call         int_smaller
  247 D1:AAD6 FE FF -  -  	cp           A,%11111111
  248 D1:AAD8 C2 30 AB D1 	jp           NZ,while_end1090
  249 D1:AADC CD BB AC D1 	call         sub_block_enter
  250 D1:AAE0 CD BB AC D1 	call         sub_block_enter
  251 D1:AAE4 21 00 00 00 	ld           HL,0
  252 D1:AAE8 39 -  -  -  	add          HL,SP
  253 D1:AAE9 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
  254 D1:AAEE CD 61 C8 D1 	call         graphics_1016
  255 D1:AAF2 E1 -  -  -  	pop          HL
  256 D1:AAF3 ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
  257 D1:AAF8 F9 -  -  -  	ld           SP,HL
  258 D1:AAF9 2A AC 06 D1 	ld           HL,(stackStart-6)
  259 D1:AAFD 11 64 00 00 	ld           DE,100
  260 D1:AB01 19 -  -  -  	add          HL,DE
  261 D1:AB02 22 AC 06 D1 	ld           (stackStart-6),HL
  262 D1:AB06 21 64 00 00 	ld           HL,100
  263 D1:AB0A E5 -  -  -  	push         HL
  264 D1:AB0B CD 90 AD D1 	call         sleep_millis
  265 D1:AB0F CD BB AC D1 	call         sub_block_enter
  266 D1:AB13 21 00 00 00 	ld           HL,0
  267 D1:AB17 39 -  -  -  	add          HL,SP
  268 D1:AB18 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
  269 D1:AB1D CD C3 BE D1 	call         checkKeys_687
  270 D1:AB21 E1 -  -  -  	pop          HL
  271 D1:AB22 ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
  272 D1:AB27 F9 -  -  -  	ld           SP,HL
  273 D1:AB28 CD CF AC D1 	call         sub_block_leave
  274 D1:AB2C C3 C7 AA D1 	jp           while_start1089
  275 D1:AB30 -  -  -  -  while_end1090:
  276 D1:AB30 CD CF AC D1 	call         sub_block_leave
  277 D1:AB34 C3 AD A9 D1 	jp           while_start1072
  278 D1:AB38 -  -  -  -  while_end1073:
  279 D1:AB38 CD 8C 0D 02 	call         _GetKey
  280 D1:AB3C -  -  -  -  	             
  281 D1:AB3C -  -  -  -  ProgramExit:
  282 D1:AB3C CD 10 08 02 	call         _ClrScrnFull
  283 D1:AB40 FD CB 00 AE 	res          donePrgm,(iy+doneFlags)
  284 D1:AB44 ED 7B E6 AE 
              D1 -  -  -  	ld           SP,(StackSave)
  285 D1:AB49 C9 -  -  -  	ret          
  286 D1:AB4A -  -  -  -  #include "asm/defaults.asm"
Listing for file "C:\Users\sande\IdeaProjects\ti_compile\asm\defaults.asm"
    1 D1:AB4A -  -  -  -  HEAP_START .equ saveSScreen+14630
    2 D1:AB4A -  -  -  -  HEAP_SIZE .equ 21945
    3 D1:AB4A -  -  -  -  MAX_HEAP_ELEMENT_SIZE .equ 65536
    4 D1:AB4A -  -  -  -  MAX_STRING_SIZE .equ 255
    5 D1:AB4A -  -  -  -  
    6 D1:AB4A -  -  -  -  
    7 D1:AB4A -  -  -  -  
    8 D1:AB4A -  -  -  -  regTRUE .equ %11111111
    9 D1:AB4A -  -  -  -  regFALSE .equ %00000000
   10 D1:AB4A -  -  -  -  
   11 D1:AB4A -  -  -  -  Var_Safe1:
   12 D1:AB4A 00 00 00 -      .db 0,0,0
   13 D1:AB4D -  -  -  -  
   14 D1:AB4D -  -  -  -  
   15 D1:AB4D -  -  -  -  
   16 D1:AB4D -  -  -  -  init:										; initializes stuff
   17 D1:AB4D -  -  -  -      ;ld              HL, OP1
   18 D1:AB4D -  -  -  -      ;call            _PutS
   19 D1:AB4D -  -  -  -      ;push            IX
   20 D1:AB4D -  -  -  -      ;ld              HL, symTable
   21 D1:AB4D -  -  -  -      ;ld              IX, OP1
   22 D1:AB4D -  -  -  -      ;call            fdetect
   23 D1:AB4D -  -  -  -      ;;jp              NZ, thrown_error
   24 D1:AB4D -  -  -  -      ;pop             IX
   25 D1:AB4D -  -  -  -      ;push            BC
   26 D1:AB4D -  -  -  -      ;pop             HL
   27 D1:AB4D -  -  -  -  ;
   28 D1:AB4D -  -  -  -      ;;ld              HL, saveMemory-MemoryStart+4
   29 D1:AB4D -  -  -  -      ;;ex              DE, HL
   30 D1:AB4D -  -  -  -      ;;add             HL, DE
   31 D1:AB4D -  -  -  -      ;ld              (SaveLocation), HL
   32 D1:AB4D -  -  -  -  
   33 D1:AB4D 21 00 02 E3 	ld              hl,$E30200               ; initializes colors
   34 D1:AB51 06 00 -  -  	ld              b,0
   35 D1:AB53 -  -  -  -  
   36 D1:AB53 -  -  -  -  _cp1555loop:
   37 D1:AB53 50 -  -  -  	ld d,b
   38 D1:AB54 78 -  -  -  	ld a,b
   39 D1:AB55 E6 C0 -  -  	and %11000000
   40 D1:AB57 CB 3A -  -  	srl d
   41 D1:AB59 1F -  -  -  	rra
   42 D1:AB5A 5F -  -  -  	ld e,a
   43 D1:AB5B 3E 1F -  -  	ld a,%00011111
   44 D1:AB5D A0 -  -  -  	and b
   45 D1:AB5E B3 -  -  -  	or e
   46 D1:AB5F 77 -  -  -  	ld (hl),a
   47 D1:AB60 23 -  -  -  	inc hl
   48 D1:AB61 72 -  -  -  	ld (hl),d
   49 D1:AB62 23 -  -  -  	inc hl
   50 D1:AB63 04 -  -  -  	inc b
   51 D1:AB64 20 ED -  -  	jr nz,_cp1555loop
   52 D1:AB66 3A 00 00 F3 	ld A, ($F30000)                          ; initializes random seed
   53 D1:AB6A 32 B5 AD D1 	ld (seed_lower+1), A
   54 D1:AB6E 3A 04 00 F3     ld A, ($F30004)
   55 D1:AB72 32 B6 AD D1     ld (seed_lower+2), A
   56 D1:AB76 3A 08 00 F3     ld A, ($F30008)
   57 D1:AB7A 32 B2 AD D1     ld (seed_upper+1), A
   58 D1:AB7E 3A 0C 00 F3     ld A, ($F3000C)
   59 D1:AB82 32 B3 AD D1     ld (seed_upper+2), A
   60 D1:AB86 -  -  -  -  
   61 D1:AB86 C9 -  -  -  	ret
   62 D1:AB87 -  -  -  -  
   63 D1:AB87 -  -  -  -  
   64 D1:AB87 -  -  -  -  
   65 D1:AB87 -  -  -  -  
   66 D1:AB87 -  -  -  -  get_string_size:							; (pointer(HL) string_ptr) -> double(HL) size
   67 D1:AB87 3E 00 -  -  	ld 		A, 0							; byte(A) compare_byte = 0
   68 D1:AB89 01 FF 00 00 	ld 		BC, MAX_STRING_SIZE     		; double(BC) fail_save = MAX_STRING_SIZE
   69 D1:AB8D -  -  -  -  
   70 D1:AB8D E5 -  -  -  	push 	HL								; pointer(DE) string_start = copy string_ptr
   71 D1:AB8E D1 -  -  -  	pop		DE								;;
   72 D1:AB8F -  -  -  -  	
   73 D1:AB8F ED B1 -  -  	CPIR									; while(&string_ptr != compare_byte && fail_save != 0){string_ptr++; fail_save--;}
   74 D1:AB91 -  -  -  -  	
   75 D1:AB91 B7 -  -  -  	or		A   							;;  size = string_ptr - string_start
   76 D1:AB92 ED 52 -  -  	sbc		HL, DE							;; 
   77 D1:AB94 -  -  -  -  	
   78 D1:AB94 C9 -  -  -  	ret										; return size
   79 D1:AB95 -  -  -  -  
   80 D1:AB95 -  -  -  -  
   81 D1:AB95 -  -  -  -  
   82 D1:AB95 -  -  -  -  get_array_size:
   83 D1:AB95 D1 -  -  -      pop     DE
   84 D1:AB96 E1 -  -  -      pop     HL
   85 D1:AB97 01 00 00 00     ld      BC, 0
   86 D1:AB9B 46 -  -  -      ld      B, (HL)
   87 D1:AB9C 23 -  -  -      inc     HL
   88 D1:AB9D 4E -  -  -      ld      C, (HL)
   89 D1:AB9E C5 -  -  -      push    BC
   90 D1:AB9F EB -  -  -      ex      DE, HL
   91 D1:ABA0 E9 -  -  -      jp      (HL)
   92 D1:ABA1 -  -  -  -  
   93 D1:ABA1 -  -  -  -  
   94 D1:ABA1 -  -  -  -  
   95 D1:ABA1 -  -  -  -  merge_byte_to_int:
   96 D1:ABA1 E1 -  -  -      pop     HL
   97 D1:ABA2 01 00 00 00     ld      BC, 0
   98 D1:ABA6 F1 -  -  -      pop     AF
   99 D1:ABA7 47 -  -  -      ld      B, A
  100 D1:ABA8 F1 -  -  -      pop     AF
  101 D1:ABA9 4F -  -  -      ld      C, A
  102 D1:ABAA C5 -  -  -      push    BC
  103 D1:ABAB E9 -  -  -      jp      (HL)
  104 D1:ABAC -  -  -  -  
  105 D1:ABAC -  -  -  -  
  106 D1:ABAC -  -  -  -  
  107 D1:ABAC -  -  -  -  get_upper_int:
  108 D1:ABAC E1 -  -  -      pop     HL
  109 D1:ABAD C1 -  -  -      pop     BC
  110 D1:ABAE 78 -  -  -      ld      A, B
  111 D1:ABAF F5 -  -  -      push    AF
  112 D1:ABB0 E9 -  -  -      jp      (HL)
  113 D1:ABB1 -  -  -  -  
  114 D1:ABB1 -  -  -  -  
  115 D1:ABB1 -  -  -  -  
  116 D1:ABB1 -  -  -  -  get_lower_int:
  117 D1:ABB1 E1 -  -  -      pop     HL
  118 D1:ABB2 C1 -  -  -      pop     BC
  119 D1:ABB3 79 -  -  -      ld      A, C
  120 D1:ABB4 F5 -  -  -      push    AF
  121 D1:ABB5 E9 -  -  -      jp      (HL)
  122 D1:ABB6 -  -  -  -  
  123 D1:ABB6 -  -  -  -  
  124 D1:ABB6 -  -  -  -  
  125 D1:ABB6 -  -  -  -  set_character_cursor:
  126 D1:ABB6 E1 -  -  -      pop     HL
  127 D1:ABB7 F1 -  -  -      pop     AF
  128 D1:ABB8 32 95 05 D0     ld      (curRow),A
  129 D1:ABBC F1 -  -  -      pop     AF
  130 D1:ABBD 32 96 05 D0     ld      (curCol), A
  131 D1:ABC1 E9 -  -  -      jp      (HL)
  132 D1:ABC2 -  -  -  -  
  133 D1:ABC2 -  -  -  -  
  134 D1:ABC2 -  -  -  -  
  135 D1:ABC2 -  -  -  -  
  136 D1:ABC2 -  -  -  -  
  137 D1:ABC2 -  -  -  -  print_bool:
  138 D1:ABC2 FE FF -  -  	cp		A, regTRUE
  139 D1:ABC4 CA D1 AB D1 	jp		Z, print_bool__true
  140 D1:ABC8 21 DF AB D1 	ld		HL, false_string
  141 D1:ABCC CD C0 07 02 	call 	_PutS
  142 D1:ABD0 C9 -  -  -  	ret
  143 D1:ABD1 -  -  -  -  print_bool__true:
  144 D1:ABD1 21 DA AB D1 	ld		HL, true_string
  145 D1:ABD5 CD C0 07 02 	call 	_PutS
  146 D1:ABD9 C9 -  -  -  	ret
  147 D1:ABDA -  -  -  -  
  148 D1:ABDA -  -  -  -  true_string:
  149 D1:ABDA 74 72 75 65 
              00 -  -  -  	.db "true",0
  150 D1:ABDF -  -  -  -  false_string:
  151 D1:ABDF 66 61 6C 73 
              65 00 -  -  	.db "false",0
  152 D1:ABE5 -  -  -  -  
  153 D1:ABE5 -  -  -  -  
  154 D1:ABE5 -  -  -  -  
  155 D1:ABE5 -  -  -  -  printLn_string:
  156 D1:ABE5 D1 -  -  -      pop         DE
  157 D1:ABE6 E1 -  -  -      pop         HL
  158 D1:ABE7 CD C0 07 02     call        _PutS
  159 D1:ABEB CD F0 07 02     call        _NewLine
  160 D1:ABEF EB -  -  -      ex          DE, HL
  161 D1:ABF0 E9 -  -  -      jp          (HL)
  162 D1:ABF1 -  -  -  -  
  163 D1:ABF1 -  -  -  -  
  164 D1:ABF1 -  -  -  -  
  165 D1:ABF1 -  -  -  -  print_byte:
  166 D1:ABF1 D1 -  -  -      pop         DE
  167 D1:ABF2 C1 -  -  -      pop         BC
  168 D1:ABF3 D5 -  -  -      push        DE
  169 D1:ABF4 21 00 00 00     ld          HL, 0
  170 D1:ABF8 68 -  -  -      ld          L, B
  171 D1:ABF9 CD E0 1E 02     call        _DispHL
  172 D1:ABFD C9 -  -  -      ret
  173 D1:ABFE -  -  -  -  
  174 D1:ABFE -  -  -  -  
  175 D1:ABFE -  -  -  -  
  176 D1:ABFE -  -  -  -  printLn_byte:
  177 D1:ABFE D1 -  -  -      pop         DE
  178 D1:ABFF C1 -  -  -      pop         BC
  179 D1:AC00 D5 -  -  -      push        DE
  180 D1:AC01 21 00 00 00     ld          HL, 0
  181 D1:AC05 68 -  -  -      ld          L, B
  182 D1:AC06 CD E0 1E 02     call        _DispHL
  183 D1:AC0A CD F0 07 02     call        _NewLine
  184 D1:AC0E C9 -  -  -      ret
  185 D1:AC0F -  -  -  -  
  186 D1:AC0F -  -  -  -  
  187 D1:AC0F -  -  -  -  
  188 D1:AC0F -  -  -  -  print_int:
  189 D1:AC0F D1 -  -  -      pop         DE
  190 D1:AC10 C1 -  -  -      pop         BC
  191 D1:AC11 D5 -  -  -      push        DE
  192 D1:AC12 21 00 00 00     ld          HL, 0
  193 D1:AC16 69 -  -  -      ld          L, C
  194 D1:AC17 60 -  -  -      ld          H, B
  195 D1:AC18 CD E0 1E 02     call        _DispHL
  196 D1:AC1C C9 -  -  -      ret
  197 D1:AC1D -  -  -  -  
  198 D1:AC1D -  -  -  -  
  199 D1:AC1D -  -  -  -  
  200 D1:AC1D -  -  -  -  printLn_int:
  201 D1:AC1D D1 -  -  -      pop         DE
  202 D1:AC1E C1 -  -  -      pop         BC
  203 D1:AC1F D5 -  -  -      push        DE
  204 D1:AC20 21 00 00 00     ld          HL, 0
  205 D1:AC24 69 -  -  -      ld          L, C
  206 D1:AC25 60 -  -  -      ld          H, B
  207 D1:AC26 CD E0 1E 02     call        _DispHL
  208 D1:AC2A CD F0 07 02     call        _NewLine
  209 D1:AC2E C9 -  -  -      ret
  210 D1:AC2F -  -  -  -  
  211 D1:AC2F -  -  -  -  
  212 D1:AC2F -  -  -  -  
  213 D1:AC2F -  -  -  -  byte_smaller:
  214 D1:AC2F BC -  -  -      cp		    A, H
  215 D1:AC30 38 31 -  -      jr		    C, A_true_ret
  216 D1:AC32 3E 00 -  -      ld	        A, regFALSE
  217 D1:AC34 C9 -  -  -      ret
  218 D1:AC35 -  -  -  -  
  219 D1:AC35 -  -  -  -  
  220 D1:AC35 -  -  -  -  
  221 D1:AC35 -  -  -  -  byte_higher:
  222 D1:AC35 BC -  -  -      cp		    A, H
  223 D1:AC36 28 2E -  -      jr		    Z, A_false_ret
  224 D1:AC38 38 2C -  -      jr		    C, A_false_ret
  225 D1:AC3A 3E FF -  -      ld	        A, regTRUE
  226 D1:AC3C C9 -  -  -      ret
  227 D1:AC3D -  -  -  -  
  228 D1:AC3D -  -  -  -  
  229 D1:AC3D -  -  -  -  
  230 D1:AC3D -  -  -  -  byte_higher_or_equals:
  231 D1:AC3D BC -  -  -      cp		    A, H
  232 D1:AC3E 30 23 -  -      jr		    NC, A_true_ret
  233 D1:AC40 3E 00 -  -      ld	        A, regFALSE
  234 D1:AC42 C9 -  -  -      ret
  235 D1:AC43 -  -  -  -  
  236 D1:AC43 -  -  -  -  
  237 D1:AC43 -  -  -  -  
  238 D1:AC43 -  -  -  -  byte_lower_or_equals:
  239 D1:AC43 BC -  -  -      cp		    A, H
  240 D1:AC44 28 1D -  -      jr		    Z, A_true_ret
  241 D1:AC46 38 1B -  -      jr          C, A_true_ret
  242 D1:AC48 3E 00 -  -      ld	        A, regFALSE
  243 D1:AC4A C9 -  -  -      ret
  244 D1:AC4B -  -  -  -  
  245 D1:AC4B -  -  -  -  
  246 D1:AC4B -  -  -  -  
  247 D1:AC4B -  -  -  -  byte_equals:
  248 D1:AC4B BC -  -  -      cp	        A, H
  249 D1:AC4C DA 66 AC D1     jp          C, A_false_ret
  250 D1:AC50 CA 63 AC D1     jp          Z, A_true_ret
  251 D1:AC54 3E 00 -  -      ld          A, regFALSE
  252 D1:AC56 C9 -  -  -      ret
  253 D1:AC57 -  -  -  -  
  254 D1:AC57 -  -  -  -  
  255 D1:AC57 -  -  -  -  
  256 D1:AC57 -  -  -  -  byte_not_equals:
  257 D1:AC57 BC -  -  -      cp	        A, H
  258 D1:AC58 DA 63 AC D1     jp          C, A_true_ret
  259 D1:AC5C CA 66 AC D1     jp          Z, A_false_ret
  260 D1:AC60 3E FF -  -      ld          A, regTRUE
  261 D1:AC62 C9 -  -  -      ret
  262 D1:AC63 -  -  -  -  
  263 D1:AC63 -  -  -  -  
  264 D1:AC63 -  -  -  -  
  265 D1:AC63 -  -  -  -  A_true_ret:
  266 D1:AC63 3E FF -  -      ld          A, regTRUE
  267 D1:AC65 C9 -  -  -      ret
  268 D1:AC66 -  -  -  -  
  269 D1:AC66 -  -  -  -  
  270 D1:AC66 -  -  -  -  
  271 D1:AC66 -  -  -  -  A_false_ret:
  272 D1:AC66 3E 00 -  -      ld          A, regFALSE
  273 D1:AC68 C9 -  -  -      ret
  274 D1:AC69 -  -  -  -  
  275 D1:AC69 -  -  -  -  
  276 D1:AC69 -  -  -  -  
  277 D1:AC69 -  -  -  -  int_smaller:
  278 D1:AC69 B7 -  -  -      or          A
  279 D1:AC6A ED 52 -  -      sbc         HL, DE
  280 D1:AC6C 19 -  -  -      add         HL, DE
  281 D1:AC6D DA 63 AC D1     jp          C, A_true_ret
  282 D1:AC71 3E 00 -  -      ld          A, regFALSE
  283 D1:AC73 C9 -  -  -      ret
  284 D1:AC74 -  -  -  -  
  285 D1:AC74 -  -  -  -  
  286 D1:AC74 -  -  -  -  
  287 D1:AC74 -  -  -  -  int_higher:
  288 D1:AC74 B7 -  -  -      or          A
  289 D1:AC75 ED 52 -  -      sbc         HL, DE
  290 D1:AC77 19 -  -  -      add         HL, DE
  291 D1:AC78 CA 66 AC D1     jp          Z, A_false_ret
  292 D1:AC7C D2 63 AC D1     jp          NC, A_true_ret
  293 D1:AC80 3E 00 -  -      ld          A, regFALSE
  294 D1:AC82 C9 -  -  -      ret
  295 D1:AC83 -  -  -  -  
  296 D1:AC83 -  -  -  -  
  297 D1:AC83 -  -  -  -  
  298 D1:AC83 -  -  -  -  int_higher_or_equals:
  299 D1:AC83 B7 -  -  -      or          A
  300 D1:AC84 ED 52 -  -      sbc         HL, DE
  301 D1:AC86 19 -  -  -      add         HL, DE
  302 D1:AC87 D2 63 AC D1     jp          NC, A_true_ret
  303 D1:AC8B 3E 00 -  -      ld          A, regFALSE
  304 D1:AC8D C9 -  -  -      ret
  305 D1:AC8E -  -  -  -  
  306 D1:AC8E -  -  -  -  
  307 D1:AC8E -  -  -  -  
  308 D1:AC8E -  -  -  -  int_smaller_or_equals:
  309 D1:AC8E B7 -  -  -      or          A
  310 D1:AC8F ED 52 -  -      sbc         HL, DE
  311 D1:AC91 19 -  -  -      add         HL, DE
  312 D1:AC92 CA 63 AC D1     jp          Z, A_true_ret
  313 D1:AC96 DA 63 AC D1     jp          C, A_true_ret
  314 D1:AC9A 3E 00 -  -      ld          A, regFALSE
  315 D1:AC9C C9 -  -  -      ret
  316 D1:AC9D -  -  -  -  
  317 D1:AC9D -  -  -  -  
  318 D1:AC9D -  -  -  -  
  319 D1:AC9D -  -  -  -  int_equals:
  320 D1:AC9D B7 -  -  -      or          A
  321 D1:AC9E ED 52 -  -      sbc         HL, DE
  322 D1:ACA0 19 -  -  -      add         HL, DE
  323 D1:ACA1 DA 66 AC D1     jp          C, A_false_ret
  324 D1:ACA5 CA 63 AC D1     jp          Z, A_true_ret
  325 D1:ACA9 3E 00 -  -      ld          A, regFALSE
  326 D1:ACAB C9 -  -  -      ret
  327 D1:ACAC -  -  -  -  
  328 D1:ACAC -  -  -  -  
  329 D1:ACAC -  -  -  -  
  330 D1:ACAC -  -  -  -  int_not_equals:
  331 D1:ACAC B7 -  -  -      or          A
  332 D1:ACAD ED 52 -  -      sbc         HL, DE
  333 D1:ACAF 19 -  -  -      add         HL, DE
  334 D1:ACB0 DA 63 AC D1     jp          C, A_true_ret
  335 D1:ACB4 CA 66 AC D1     jp          Z, A_false_ret
  336 D1:ACB8 3E FF -  -      ld          A, regTRUE
  337 D1:ACBA C9 -  -  -      ret
  338 D1:ACBB -  -  -  -  
  339 D1:ACBB -  -  -  -  
  340 D1:ACBB -  -  -  -  
  341 D1:ACBB -  -  -  -  sub_block_enter:
  342 D1:ACBB D1 -  -  -      pop         DE
  343 D1:ACBC 21 00 00 00     ld          HL, 0
  344 D1:ACC0 39 -  -  -  	add         HL, SP
  345 D1:ACC1 ED 7B E9 AE 
              D1 -  -  -  	ld          SP, (callStack)
  346 D1:ACC6 E5 -  -  -  	push        HL
  347 D1:ACC7 ED 73 E9 AE 
              D1 -  -  -  	ld          (callStack), SP
  348 D1:ACCC F9 -  -  -  	ld          SP, HL
  349 D1:ACCD EB -  -  -  	ex          DE, HL
  350 D1:ACCE E9 -  -  -  	jp          (HL)
  351 D1:ACCF -  -  -  -  
  352 D1:ACCF -  -  -  -  
  353 D1:ACCF -  -  -  -  
  354 D1:ACCF -  -  -  -  sub_block_leave:
  355 D1:ACCF D1 -  -  -      pop         DE
  356 D1:ACD0 ED 7B E9 AE 
              D1 -  -  -      ld          SP,(callStack)
  357 D1:ACD5 E1 -  -  -      pop         HL
  358 D1:ACD6 ED 73 E9 AE 
              D1 -  -  -      ld          (callStack),SP
  359 D1:ACDB F9 -  -  -      ld          SP,HL
  360 D1:ACDC EB -  -  -  	ex          DE, HL
  361 D1:ACDD E9 -  -  -      jp          (HL)
  362 D1:ACDE -  -  -  -  
  363 D1:ACDE -  -  -  -  
  364 D1:ACDE -  -  -  -  multi_block_leave:
  365 D1:ACDE E1 -  -  -      pop         HL
  366 D1:ACDF 22 4A AB D1     ld          (Var_Safe1), HL
  367 D1:ACE3 ED 7B E9 AE 
              D1 -  -  -      ld          SP,(callStack)
  368 D1:ACE8 -  -  -  -  multi_block_loop:
  369 D1:ACE8 E1 -  -  -      pop         HL
  370 D1:ACE9 10 FD -  -      djnz        multi_block_loop
  371 D1:ACEB ED 73 E9 AE 
              D1 -  -  -      ld          (callStack),SP
  372 D1:ACF0 F9 -  -  -      ld          SP,HL
  373 D1:ACF1 2A 4A AB D1 	ld          HL, (Var_Safe1)
  374 D1:ACF5 E9 -  -  -  	jp          (HL)
  375 D1:ACF6 -  -  -  -  
  376 D1:ACF6 -  -  -  -  
  377 D1:ACF6 -  -  -  -  
  378 D1:ACF6 -  -  -  -  function_did_not_return:
  379 D1:ACF6 21 02 AD D1 	ld		HL, function_did_not_return__message ; string(HL) error_message = "out of memory!"
  380 D1:ACFA CD C0 07 02 	call	_PutS
  381 D1:ACFE C3 3C AB D1 	jp		ProgramExit
  382 D1:AD02 -  -  -  -  
  383 D1:AD02 -  -  -  -  function_did_not_return__message:
  384 D1:AD02 6F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 21 00 -  	.db 	"out of memory!", 0
  385 D1:AD11 -  -  -  -  
  386 D1:AD11 -  -  -  -  
  387 D1:AD11 -  -  -  -  
  388 D1:AD11 -  -  -  -  index_out_of_bounds:
  389 D1:AD11 21 1D AD D1     ld      HL, index_out_of_bounds__message
  390 D1:AD15 CD C0 07 02     call    _PutS
  391 D1:AD19 C3 3C AB D1     jp      ProgramExit
  392 D1:AD1D -  -  -  -  
  393 D1:AD1D -  -  -  -  index_out_of_bounds__message:
  394 D1:AD1D 69 6E 64 65 
              78 20 6F 75 
              74 20 6F 66 
              20 62 6F 75 
              6E 64 73 21 
              00 -  -  -      .db     "index out of bounds!", 0
  395 D1:AD32 -  -  -  -  
  396 D1:AD32 -  -  -  -  
  397 D1:AD32 -  -  -  -  
  398 D1:AD32 -  -  -  -  multiply_int:; num1: int(DE), num2(BC): int -> int(HL)
  399 D1:AD32 21 00 00 00    ld	hl, 0
  400 D1:AD36 -  -  -  -  
  401 D1:AD36 CB 23 -  -     sla	e
  402 D1:AD38 CB 12 -  -     rl	d
  403 D1:AD3A 30 02 -  -     jr	nc, $+4
  404 D1:AD3C 60 -  -  -     ld	h, b
  405 D1:AD3D 69 -  -  -     ld	l, c
  406 D1:AD3E -  -  -  -  
  407 D1:AD3E 3E 0F -  -     ld	a, 15
  408 D1:AD40 -  -  -  -  multiply_int__loop:
  409 D1:AD40 29 -  -  -     add	hl, hl
  410 D1:AD41 CB 13 -  -     rl	e
  411 D1:AD43 CB 12 -  -     rl	d
  412 D1:AD45 30 04 -  -     jr	nc, $+6
  413 D1:AD47 09 -  -  -     add	hl, bc
  414 D1:AD48 30 01 -  -     jr	nc, $+3
  415 D1:AD4A 13 -  -  -     inc	de
  416 D1:AD4B -  -  -  -  
  417 D1:AD4B 3D -  -  -     dec	a
  418 D1:AD4C 20 F2 -  -     jr	nz, multiply_int__loop
  419 D1:AD4E -  -  -  -  
  420 D1:AD4E C9 -  -  -     ret
  421 D1:AD4F -  -  -  -  
  422 D1:AD4F -  -  -  -  
  423 D1:AD4F -  -  -  -  
  424 D1:AD4F -  -  -  -  divide_byte:
  425 D1:AD4F E1 -  -  -      pop         HL
  426 D1:AD50 C1 -  -  -      pop         BC
  427 D1:AD51 F1 -  -  -      pop         AF
  428 D1:AD52 0E 00 -  -  	ld          C,$00
  429 D1:AD54 -  -  -  -  
  430 D1:AD54 -  -  -  -  divide_byte__loop:
  431 D1:AD54 0C -  -  -  	inc         C
  432 D1:AD55 90 -  -  -  	sub         A, B
  433 D1:AD56 28 06 -  -  	jr          Z, divide_byte__end
  434 D1:AD58 30 FA -  -  	jr          NC,divide_byte__loop
  435 D1:AD5A -  -  -  -  
  436 D1:AD5A -  -  -  -  divide_byte__overflow:
  437 D1:AD5A 79 -  -  -  	ld          A, C
  438 D1:AD5B 3D -  -  -      dec         A
  439 D1:AD5C F5 -  -  -      push        AF
  440 D1:AD5D E9 -  -  -      jp          (HL)
  441 D1:AD5E -  -  -  -  
  442 D1:AD5E -  -  -  -  divide_byte__end:
  443 D1:AD5E 79 -  -  -      ld          A, C
  444 D1:AD5F F5 -  -  -      push        AF
  445 D1:AD60 E9 -  -  -      jp          (HL)
  446 D1:AD61 -  -  -  -  
  447 D1:AD61 -  -  -  -  
  448 D1:AD61 -  -  -  -  
  449 D1:AD61 -  -  -  -  modulo_byte:
  450 D1:AD61 E1 -  -  -      pop         HL
  451 D1:AD62 C1 -  -  -      pop         BC
  452 D1:AD63 F1 -  -  -      pop         AF
  453 D1:AD64 -  -  -  -  
  454 D1:AD64 B8 -  -  -      cp          A, B
  455 D1:AD65 DA 6F AD D1     jp          C, modulo_byte__end
  456 D1:AD69 -  -  -  -  modulo_byte__loop:
  457 D1:AD69 90 -  -  -      sub         A, B
  458 D1:AD6A B8 -  -  -      cp          A, B
  459 D1:AD6B D2 69 AD D1     jp          NC, modulo_byte__loop
  460 D1:AD6F -  -  -  -  
  461 D1:AD6F -  -  -  -  modulo_byte__end:
  462 D1:AD6F F5 -  -  -      push        AF
  463 D1:AD70 E9 -  -  -      jp          (HL)
  464 D1:AD71 -  -  -  -  
  465 D1:AD71 -  -  -  -  
  466 D1:AD71 -  -  -  -  
  467 D1:AD71 -  -  -  -  
  468 D1:AD71 -  -  -  -  divide_long_byte: ;DE HL / A -> DEHL
  469 D1:AD71 AF -  -  -     xor	a
  470 D1:AD72 06 20 -  -     ld	b, 32
  471 D1:AD74 -  -  -  -  
  472 D1:AD74 -  -  -  -  divide_long_byte__loop:
  473 D1:AD74 29 -  -  -     add	hl, hl
  474 D1:AD75 CB 13 -  -     rl	e
  475 D1:AD77 CB 12 -  -     rl	d
  476 D1:AD79 17 -  -  -     rla
  477 D1:AD7A 38 03 -  -     jr	c, $+5
  478 D1:AD7C B9 -  -  -     cp	c
  479 D1:AD7D 38 02 -  -     jr	c, $+4
  480 D1:AD7F -  -  -  -  
  481 D1:AD7F 91 -  -  -     sub	c
  482 D1:AD80 2C -  -  -     inc	l
  483 D1:AD81 -  -  -  -  
  484 D1:AD81 10 F1 -  -     djnz	divide_long_byte__loop
  485 D1:AD83 -  -  -  -  
  486 D1:AD83 C9 -  -  -     ret
  487 D1:AD84 -  -  -  -  
  488 D1:AD84 -  -  -  -  
  489 D1:AD84 -  -  -  -  
  490 D1:AD84 -  -  -  -  sleep:
  491 D1:AD84 B7 -  -  -      or          A
  492 D1:AD85 11 00 00 00     ld          DE, 0
  493 D1:AD89 -  -  -  -  sleep__loop:
  494 D1:AD89 2B -  -  -      dec         HL
  495 D1:AD8A ED 52 -  -      sbc         HL, DE
  496 D1:AD8C 19 -  -  -      add         HL, DE
  497 D1:AD8D 20 FA -  -      jr	        nz, sleep__loop
  498 D1:AD8F -  -  -  -  
  499 D1:AD8F C9 -  -  -      ret
  500 D1:AD90 -  -  -  -  
  501 D1:AD90 -  -  -  -  
  502 D1:AD90 -  -  -  -  
  503 D1:AD90 -  -  -  -  sleep_millis:
  504 D1:AD90 E1 -  -  -      pop         HL
  505 D1:AD91 22 4A AB D1     ld          (Var_Safe1), HL
  506 D1:AD95 -  -  -  -  
  507 D1:AD95 E1 -  -  -      pop         HL
  508 D1:AD96 01 00 00 00     ld          BC, 0
  509 D1:AD9A -  -  -  -  
  510 D1:AD9A -  -  -  -  sleep_millis__loop:
  511 D1:AD9A E5 -  -  -      push        HL
  512 D1:AD9B 21 F4 01 00     ld          HL, 500
  513 D1:AD9F CD 84 AD D1     call        sleep
  514 D1:ADA3 E1 -  -  -      pop         HL
  515 D1:ADA4 -  -  -  -  
  516 D1:ADA4 2B -  -  -      dec         HL
  517 D1:ADA5 ED 42 -  -      sbc         HL, BC
  518 D1:ADA7 09 -  -  -      add         HL, BC
  519 D1:ADA8 C2 9A AD D1     jp          nz, sleep_millis__loop
  520 D1:ADAC -  -  -  -  
  521 D1:ADAC -  -  -  -  
  522 D1:ADAC 2A 4A AB D1     ld          HL, (Var_Safe1)
  523 D1:ADB0 E9 -  -  -      jp          (HL)
  524 D1:ADB1 -  -  -  -  
  525 D1:ADB1 -  -  -  -  
  526 D1:ADB1 -  -  -  -  seed_upper:
  527 D1:ADB1 00 D0 50 -      .db 00,208,80
  528 D1:ADB4 -  -  -  -  seed_lower:
  529 D1:ADB4 00 1F DD -      .db 00,31,221
  530 D1:ADB7 -  -  -  -  
  531 D1:ADB7 -  -  -  -  random_number:
  532 D1:ADB7 2A B1 AD D1     ld hl,(seed_upper)
  533 D1:ADBB 44 -  -  -      ld b,h
  534 D1:ADBC 4D -  -  -      ld c,l
  535 D1:ADBD 29 -  -  -      add hl,hl
  536 D1:ADBE 29 -  -  -      add hl,hl
  537 D1:ADBF 2C -  -  -      inc l
  538 D1:ADC0 09 -  -  -      add hl,bc
  539 D1:ADC1 22 B1 AD D1     ld (seed_upper),hl
  540 D1:ADC5 2A B4 AD D1     ld hl,(seed_lower)
  541 D1:ADC9 29 -  -  -      add hl,hl
  542 D1:ADCA 9F -  -  -      sbc a,a
  543 D1:ADCB E6 2D -  -      and %00101101
  544 D1:ADCD AD -  -  -      xor l
  545 D1:ADCE 6F -  -  -      ld l,a
  546 D1:ADCF 22 B4 AD D1     ld (seed_lower),hl
  547 D1:ADD3 09 -  -  -      add hl,bc
  548 D1:ADD4 C9 -  -  -      ret
  549 D1:ADD5 -  -  -  -  
  550 D1:ADD5 -  -  -  -  
  551 D1:ADD5 -  -  -  -  
  552 D1:ADD5 -  -  -  -  ;load_from_memory:
  553 D1:ADD5 -  -  -  -  ;    pop         HL
  554 D1:ADD5 -  -  -  -  ;    ld          (Var_Safe1), HL
  555 D1:ADD5 -  -  -  -  ;
  556 D1:ADD5 -  -  -  -  ;    ld          HL, SaveMemory
  557 D1:ADD5 -  -  -  -  ;    ld          BC, 0
  558 D1:ADD5 -  -  -  -  ;    ld          C, (HL)
  559 D1:ADD5 -  -  -  -  ;    inc         HL
  560 D1:ADD5 -  -  -  -  ;    ld          B, (HL)
  561 D1:ADD5 -  -  -  -  ;    inc         HL
  562 D1:ADD5 -  -  -  -  ;
  563 D1:ADD5 -  -  -  -  ;    ex          DE, HL
  564 D1:ADD5 -  -  -  -  ;
  565 D1:ADD5 -  -  -  -  ;    ld          HL, (SaveLocation)
  566 D1:ADD5 -  -  -  -  ;    inc         HL
  567 D1:ADD5 -  -  -  -  ;    inc         HL
  568 D1:ADD5 -  -  -  -  ;
  569 D1:ADD5 -  -  -  -  ;    LDIR
  570 D1:ADD5 -  -  -  -  ;
  571 D1:ADD5 -  -  -  -  ;    ld          HL, (Var_Safe1)
  572 D1:ADD5 -  -  -  -  ;    jp          (HL)
  573 D1:ADD5 -  -  -  -  
  574 D1:ADD5 -  -  -  -  
  575 D1:ADD5 -  -  -  -  
  576 D1:ADD5 -  -  -  -  write_to_memory:
  577 D1:ADD5 ED 5B EC AE 
              D1 -  -  -      ld          DE, (SaveLocation)
  578 D1:ADDA 21 EF AE D1     ld          HL, SaveMemory
  579 D1:ADDE 01 64 00 00     ld          BC, saveSize
  580 D1:ADE2 3A EF AE D1     ld          A, (SaveMemory)
  581 D1:ADE6 -  -  -  -  
  582 D1:ADE6 ED B0 -  -      LDIR
  583 D1:ADE8 -  -  -  -  
  584 D1:ADE8 C9 -  -  -      ret
  585 D1:ADE9 -  -  -  -  
  586 D1:ADE9 -  -  -  -  
  587 D1:ADE9 -  -  -  -  
  588 D1:ADE9 -  -  -  -  ;-------------------------------------
  589 D1:ADE9 -  -  -  -  ; fdetect
  590 D1:ADE9 -  -  -  -  ; detects appvars, prot progs, and
  591 D1:ADE9 -  -  -  -  ; progs given a 0-terminated string
  592 D1:ADE9 -  -  -  -  ; pointed to by ix.
  593 D1:ADE9 -  -  -  -  ;-------------------------------------
  594 D1:ADE9 -  -  -  -  ; INPUTS:
  595 D1:ADE9 -  -  -  -  ; hl->place to start searching
  596 D1:ADE9 -  -  -  -  ; ix->string to find
  597 D1:ADE9 -  -  -  -  ;
  598 D1:ADE9 -  -  -  -  ; OUTPUTS:
  599 D1:ADE9 -  -  -  -  ; hl->place stopped searching
  600 D1:ADE9 -  -  -  -  ; de->program data
  601 D1:ADE9 -  -  -  -  ; bc=program size
  602 D1:ADE9 -  -  -  -  ; OP1 contains the name and type byte
  603 D1:ADE9 -  -  -  -  ; z flag set if found
  604 D1:ADE9 -  -  -  -  ;-------------------------------------
  605 D1:ADE9 -  -  -  -  fdetect:
  606 D1:ADE9 ED 5B 9A 25 
              D0 -  -  -   ld de,(ptemp)
  607 D1:ADEE CD 3C 01 02  call _cphlde
  608 D1:ADF2 7E -  -  -   ld a,(hl)
  609 D1:ADF3 32 80 AE D1  ld (typeByte_SMC),a
  610 D1:ADF7 20 02 -  -   jr nz,fcontinue
  611 D1:ADF9 3C -  -  -   inc a
  612 D1:ADFA C9 -  -  -   ret
  613 D1:ADFB -  -  -  -  fcontinue:
  614 D1:ADFB E5 -  -  -   push hl
  615 D1:ADFC FE 15 -  -   cp appvarobj
  616 D1:ADFE 28 08 -  -   jr z,fgoodtype
  617 D1:AE00 FE 06 -  -   cp protprogobj
  618 D1:AE02 28 04 -  -   jr z,fgoodtype
  619 D1:AE04 FE 05 -  -   cp progobj
  620 D1:AE06 20 42 -  -   jr nz,fskip
  621 D1:AE08 -  -  -  -  fgoodtype:
  622 D1:AE08 2B -  -  -   dec hl
  623 D1:AE09 2B -  -  -   dec hl
  624 D1:AE0A 2B -  -  -   dec hl
  625 D1:AE0B 5E -  -  -   ld e, (hl)
  626 D1:AE0C 2B -  -  -   dec hl
  627 D1:AE0D 56 -  -  -   ld d,(hl)
  628 D1:AE0E 2B -  -  -   dec hl
  629 D1:AE0F 7E -  -  -   ld a,(hl)
  630 D1:AE10 CD 68 1D 02  call _SetDEUToA
  631 D1:AE14 D5 -  -  -   push de
  632 D1:AE15 E1 -  -  -   pop hl
  633 D1:AE16 FE D0 -  -   cp $D0
  634 D1:AE18 30 17 -  -   jr nc,finRAM
  635 D1:AE1A DD E5 -  -   push ix
  636 D1:AE1C D5 -  -  -   push de
  637 D1:AE1D E5 -  -  -    push hl
  638 D1:AE1E DD E1 -  -    pop ix
  639 D1:AE20 3E 0A -  -    ld a,10
  640 D1:AE22 DD 86 09 -    add a,(ix+9)
  641 D1:AE25 11 00 00 00   ld de,0
  642 D1:AE29 5F -  -  -    ld e,a
  643 D1:AE2A 19 -  -  -    add hl,de
  644 D1:AE2B E3 -  -  -    ex (sp),hl
  645 D1:AE2C 19 -  -  -    add hl,de
  646 D1:AE2D D1 -  -  -   pop de
  647 D1:AE2E EB -  -  -   ex de,hl
  648 D1:AE2F DD E1 -  -   pop ix
  649 D1:AE31 -  -  -  -  finRAM:
  650 D1:AE31 13 -  -  -   inc de
  651 D1:AE32 13 -  -  -   inc de
  652 D1:AE33 01 00 00 00  ld bc,0
  653 D1:AE37 4E -  -  -   ld c,(hl)
  654 D1:AE38 23 -  -  -   inc hl
  655 D1:AE39 46 -  -  -   ld b,(hl)
  656 D1:AE3A 23 -  -  -   inc hl ; hl -> data
  657 D1:AE3B C5 -  -  -   push bc ; bc = size
  658 D1:AE3C DD E5 -  -   push ix
  659 D1:AE3E C1 -  -  -   pop bc
  660 D1:AE3F -  -  -  -  fchkstr:
  661 D1:AE3F 0A -  -  -   ld a,(bc)
  662 D1:AE40 B7 -  -  -   or a,a
  663 D1:AE41 28 0E -  -   jr z,ffound
  664 D1:AE43 BE -  -  -   cp (hl)
  665 D1:AE44 03 -  -  -   inc bc
  666 D1:AE45 13 -  -  -   inc de
  667 D1:AE46 23 -  -  -   inc hl
  668 D1:AE47 28 F6 -  -   jr z,fchkstr
  669 D1:AE49 C1 -  -  -   pop bc
  670 D1:AE4A -  -  -  -  fskip:
  671 D1:AE4A E1 -  -  -   pop hl
  672 D1:AE4B CD 6A AE D1  call fbypassname
  673 D1:AE4F 18 98 -  -   jr fdetect
  674 D1:AE51 -  -  -  -  ffound:
  675 D1:AE51 C5 -  -  -   push bc
  676 D1:AE52 E1 -  -  -   pop hl
  677 D1:AE53 DD E5 -  -   push ix
  678 D1:AE55 C1 -  -  -   pop bc
  679 D1:AE56 B7 -  -  -   or a,a
  680 D1:AE57 ED 42 -  -   sbc hl,bc
  681 D1:AE59 E5 -  -  -   push hl
  682 D1:AE5A C1 -  -  -   pop bc
  683 D1:AE5B E1 -  -  -   pop hl ; size
  684 D1:AE5C B7 -  -  -   or a,a
  685 D1:AE5D ED 42 -  -   sbc hl,bc
  686 D1:AE5F E5 -  -  -   push hl
  687 D1:AE60 C1 -  -  -   pop bc
  688 D1:AE61 E1 -  -  -   pop hl ; current search location
  689 D1:AE62 C5 -  -  -   push bc
  690 D1:AE63 CD 6A AE D1  call fbypassname
  691 D1:AE67 C1 -  -  -   pop bc
  692 D1:AE68 AF -  -  -   xor a
  693 D1:AE69 C9 -  -  -   ret
  694 D1:AE6A -  -  -  -  fbypassname:
  695 D1:AE6A D5 -  -  -   push de
  696 D1:AE6B 01 FA FF FF   ld bc,-6
  697 D1:AE6F 09 -  -  -    add hl,bc
  698 D1:AE70 11 F8 05 D0   ld de,OP1
  699 D1:AE74 D5 -  -  -    push de
  700 D1:AE75 46 -  -  -     ld b,(hl)		; Name to OP1 -> For things like archiving/deleting
  701 D1:AE76 04 -  -  -     inc b
  702 D1:AE77 -  -  -  -  fbypassnameloop:
  703 D1:AE77 7E -  -  -     ld a,(hl)
  704 D1:AE78 12 -  -  -     ld (de),a
  705 D1:AE79 13 -  -  -     inc de
  706 D1:AE7A 2B -  -  -     dec hl
  707 D1:AE7B 10 FA -  -     djnz fbypassnameloop
  708 D1:AE7D AF -  -  -     xor a
  709 D1:AE7E 12 -  -  -     ld (de),a
  710 D1:AE7F -  -  -  -  typeByte_SMC: =$+1
  711 D1:AE7F 3E 15 -  -     ld a,15h
  712 D1:AE81 D1 -  -  -    pop de
  713 D1:AE82 12 -  -  -    ld (de),a
  714 D1:AE83 D1 -  -  -   pop de
  715 D1:AE84 C9 -  -  -   ret
  716 D1:AE85 -  -  -  -  
  717 D1:AE85 -  -  -  -  
  718 D1:AE85 -  -  -  -  
  719 D1:AE85 -  -  -  -  thrown_error:
  720 D1:AE85 E1 -  -  -      pop         HL
  721 D1:AE86 CD C0 07 02     call        _PutS
  722 D1:AE8A CD 8C 0D 02     call        _getKey
  723 D1:AE8E -  -  -  -  
  724 D1:AE8E C3 3C AB D1     jp           ProgramExit
  725 D1:AE92 -  -  -  -  
  726 D1:AE92 -  -  -  -  
  727 D1:AE92 -  -  -  -  
  728 D1:AE92 -  -  -  -  KEY_MAPPING:
  729 D1:AE92 21 30 -  -      .db $21, $30
  730 D1:AE94 22 31 -  -      .db $22, $31
  731 D1:AE96 1A 32 -  -      .db $1A, $32
  732 D1:AE98 12 33 -  -      .db $12, $33
  733 D1:AE9A 23 34 -  -      .db $23, $34
  734 D1:AE9C 1B 35 -  -      .db $1B, $35
  735 D1:AE9E 13 36 -  -      .db $13, $36
  736 D1:AEA0 24 37 -  -      .db $24, $37
  737 D1:AEA2 1C 38 -  -      .db $1C, $38
  738 D1:AEA4 14 39 -  -      .db $14, $39
  739 D1:AEA6 0C 2A -  -      .db $0C, $2A
  740 D1:AEA8 0B 2D -  -      .db $0B, $2D
  741 D1:AEAA 0A 2B -  -      .db $0A, $2B
  742 D1:AEAC 25 2C -  -      .db $25, $2C
  743 D1:AEAE 19 2E -  -      .db $19, $2E
  744 D1:AEB0 -  -  -  -  
  745 D1:AEB0 -  -  -  -  ALPHA_KEY_MAPPING:
  746 D1:AEB0 2F 61 -  -      .db $2F, $61
  747 D1:AEB2 27 62 -  -      .db $27, $62
  748 D1:AEB4 1F 63 -  -      .db $1F, $63
  749 D1:AEB6 2E 64 -  -      .db $2E, $64
  750 D1:AEB8 26 65 -  -      .db $26, $65
  751 D1:AEBA 1E 66 -  -      .db $1E, $66
  752 D1:AEBC 16 67 -  -      .db $16, $67
  753 D1:AEBE 0E 68 -  -      .db $0E, $68
  754 D1:AEC0 2D 69 -  -      .db $2D, $69
  755 D1:AEC2 25 6A -  -      .db $25, $6A
  756 D1:AEC4 1D 6B -  -      .db $1D, $6B
  757 D1:AEC6 15 6C -  -      .db $15, $6C
  758 D1:AEC8 0D 6D -  -      .db $0D, $6D
  759 D1:AECA 2C 6E -  -      .db $2C, $6E
  760 D1:AECC 24 6F -  -      .db $24, $6F
  761 D1:AECE 1C 70 -  -      .db $1C, $70
  762 D1:AED0 14 71 -  -      .db $14, $71
  763 D1:AED2 0C 72 -  -      .db $0C, $72
  764 D1:AED4 2B 73 -  -      .db $2B, $73
  765 D1:AED6 23 74 -  -      .db $23, $74
  766 D1:AED8 1B 75 -  -      .db $1B, $75
  767 D1:AEDA 13 76 -  -      .db $13, $76
  768 D1:AEDC 0B 77 -  -      .db $0B, $77
  769 D1:AEDE 2A 78 -  -      .db $2A, $78
  770 D1:AEE0 22 79 -  -      .db $22, $79
  771 D1:AEE2 1A 7A -  -      .db $1A, $7A
  772 D1:AEE4 21 20 -  -      .db $21, $20
Listing for file "asm/main.asm"
  287 D1:AEE6 -  -  -  -  StackSave:
  288 D1:AEE6 00 00 00 -  	.db          0,0,0
  289 D1:AEE9 -  -  -  -  CallStack:
  290 D1:AEE9 00 00 00 -  	.db          0,0,0
  291 D1:AEEC -  -  -  -  SaveLocation:
  292 D1:AEEC 00 00 00 -  	.db          0,0,0
  293 D1:AEEF -  -  -  -  stackStart .equ saveSScreen+7315
  294 D1:AEEF -  -  -  -  callStackStart .equ saveSScreen+14630
  295 D1:AEEF -  -  -  -  globalVars .equ pixelShadow
  296 D1:AEEF -  -  -  -  saveSize .equ 100
  297 D1:AEEF -  -  -  -  saveMemory:
  298 D1:AEEF 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 	.db          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  299 D1:AF53 -  -  -  -  
  300 D1:AF53 -  -  -  -  drawBlock_5:
  301 D1:AF53 DD E5 -  -  	push         IX                        ; push stack_start
  302 D1:AF55 ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
  303 D1:AF5A F9 -  -  -  	ld           SP,HL
  304 D1:AF5B DD 21 0F 00 
              00 -  -  -  	ld           IX,15
  305 D1:AF60 DD 39 -  -  	add          IX,SP
  306 D1:AF62 21 00 00 00 	ld           HL,0
  307 D1:AF66 E5 -  -  -  	push         HL
  308 D1:AF67 -  -  -  -  while_start10:
  309 D1:AF67 DD 27 EE -  	ld           HL,(IX-18)
  310 D1:AF6A E5 -  -  -  	push         HL
  311 D1:AF6B DD 27 F4 -  	ld           HL,(IX-12)
  312 D1:AF6E D1 -  -  -  	pop          DE
  313 D1:AF6F EB -  -  -  	ex           DE,HL
  314 D1:AF70 CD 69 AC D1 	call         int_smaller
  315 D1:AF74 FE FF -  -  	cp           A,%11111111
  316 D1:AF76 C2 D4 AF D1 	jp           NZ,while_end11
  317 D1:AF7A CD BB AC D1 	call         sub_block_enter
  318 D1:AF7E 21 00 00 00 	ld           HL,0
  319 D1:AF82 E5 -  -  -  	push         HL
  320 D1:AF83 -  -  -  -  while_start18:
  321 D1:AF83 DD 27 EB -  	ld           HL,(IX-21)
  322 D1:AF86 E5 -  -  -  	push         HL
  323 D1:AF87 DD 27 F7 -  	ld           HL,(IX-9)
  324 D1:AF8A D1 -  -  -  	pop          DE
  325 D1:AF8B EB -  -  -  	ex           DE,HL
  326 D1:AF8C CD 69 AC D1 	call         int_smaller
  327 D1:AF90 FE FF -  -  	cp           A,%11111111
  328 D1:AF92 C2 C5 AF D1 	jp           NZ,while_end19
  329 D1:AF96 CD BB AC D1 	call         sub_block_enter
  330 D1:AF9A DD 27 FD -  	ld           HL,(IX-3)
  331 D1:AF9D E5 -  -  -  	push         HL
  332 D1:AF9E DD 27 EB -  	ld           HL,(IX-21)
  333 D1:AFA1 D1 -  -  -  	pop          DE
  334 D1:AFA2 19 -  -  -  	add          HL,DE
  335 D1:AFA3 E5 -  -  -  	push         HL
  336 D1:AFA4 DD 27 FA -  	ld           HL,(IX-6)
  337 D1:AFA7 E5 -  -  -  	push         HL
  338 D1:AFA8 DD 27 EE -  	ld           HL,(IX-18)
  339 D1:AFAB D1 -  -  -  	pop          DE
  340 D1:AFAC 19 -  -  -  	add          HL,DE
  341 D1:AFAD E5 -  -  -  	push         HL
  342 D1:AFAE DD 27 F1 -  	ld           HL,(IX-15)
  343 D1:AFB1 E5 -  -  -  	push         HL
  344 D1:AFB2 CD 55 CA D1 	call         buffer_pixel
  345 D1:AFB6 DD 27 EB -  	ld           HL,(IX-21)
  346 D1:AFB9 23 -  -  -  	inc          HL
  347 D1:AFBA DD 2F EB -  	ld           (IX-21),HL
  348 D1:AFBD CD CF AC D1 	call         sub_block_leave
  349 D1:AFC1 C3 83 AF D1 	jp           while_start18
  350 D1:AFC5 -  -  -  -  while_end19:
  351 D1:AFC5 DD 27 EE -  	ld           HL,(IX-18)
  352 D1:AFC8 23 -  -  -  	inc          HL
  353 D1:AFC9 DD 2F EE -  	ld           (IX-18),HL
  354 D1:AFCC CD CF AC D1 	call         sub_block_leave
  355 D1:AFD0 C3 67 AF D1 	jp           while_start10
  356 D1:AFD4 -  -  -  -  while_end11:
  357 D1:AFD4 11 00 00 00 	ld           DE,0
  358 D1:AFD8 -  -  -  -  drawBlock_end_6:
  359 D1:AFD8 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
  360 D1:AFDD DD E1 -  -  	pop          IX
  361 D1:AFDF C9 -  -  -  	ret          
  362 D1:AFE0 -  -  -  -  displayBitmap_37:
  363 D1:AFE0 DD E5 -  -  	push         IX                        ; push stack_start
  364 D1:AFE2 ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
  365 D1:AFE7 F9 -  -  -  	ld           SP,HL
  366 D1:AFE8 DD 21 15 00 
              00 -  -  -  	ld           IX,21
  367 D1:AFED DD 39 -  -  	add          IX,SP
  368 D1:AFEF 21 00 00 00 	ld           HL,0
  369 D1:AFF3 E5 -  -  -  	push         HL
  370 D1:AFF4 21 00 00 00 	ld           HL,0
  371 D1:AFF8 E5 -  -  -  	push         HL
  372 D1:AFF9 -  -  -  -  while_start44:
  373 D1:AFF9 DD 27 E8 -  	ld           HL,(IX-24)
  374 D1:AFFC E5 -  -  -  	push         HL
  375 D1:AFFD DD 27 F4 -  	ld           HL,(IX-12)
  376 D1:B000 D1 -  -  -  	pop          DE
  377 D1:B001 EB -  -  -  	ex           DE,HL
  378 D1:B002 CD 69 AC D1 	call         int_smaller
  379 D1:B006 FE FF -  -  	cp           A,%11111111
  380 D1:B008 C2 FC B3 D1 	jp           NZ,while_end45
  381 D1:B00C CD BB AC D1 	call         sub_block_enter
  382 D1:B010 21 00 00 00 	ld           HL,0
  383 D1:B014 E5 -  -  -  	push         HL
  384 D1:B015 -  -  -  -  while_start52:
  385 D1:B015 DD 27 E2 -  	ld           HL,(IX-30)
  386 D1:B018 E5 -  -  -  	push         HL
  387 D1:B019 DD 27 F7 -  	ld           HL,(IX-9)
  388 D1:B01C D1 -  -  -  	pop          DE
  389 D1:B01D EB -  -  -  	ex           DE,HL
  390 D1:B01E CD 69 AC D1 	call         int_smaller
  391 D1:B022 FE FF -  -  	cp           A,%11111111
  392 D1:B024 C2 ED B3 D1 	jp           NZ,while_end53
  393 D1:B028 CD BB AC D1 	call         sub_block_enter
  394 D1:B02C DD 27 F1 -  	ld           HL,(IX-15)
  395 D1:B02F E5 -  -  -  	push         HL
  396 D1:B030 DD 27 E5 -  	ld           HL,(IX-27)
  397 D1:B033 E5 -  -  -  	push         HL
  398 D1:B034 D1 -  -  -  	pop          DE
  399 D1:B035 E1 -  -  -  	pop          HL
  400 D1:B036 01 00 00 00 	ld           BC,0
  401 D1:B03A 42 -  -  -  	ld           B,D
  402 D1:B03B 4B -  -  -  	ld           C,E
  403 D1:B03C 19 -  -  -  	add          HL,DE
  404 D1:B03D 7E -  -  -  	ld           A,(HL)
  405 D1:B03E F5 -  -  -  	push         AF
  406 D1:B03F CD BB AC D1 	call         sub_block_enter
  407 D1:B043 DD 27 DF -  	ld           HL,(IX-33)
  408 D1:B046 E5 -  -  -  	push         HL
  409 D1:B047 C1 -  -  -  	pop          BC
  410 D1:B048 3E FF -  -  	ld           A,regTRUE
  411 D1:B04A CB 78 -  -  	bit          7,B
  412 D1:B04C CC 66 AC D1 	call         Z,A_false_ret
  413 D1:B050 FE FF -  -  	cp           A,%11111111
  414 D1:B052 C2 AE B0 D1 	jp           NZ,if_next_68
  415 D1:B056 CD BB AC D1 	call         sub_block_enter
  416 D1:B05A DD 27 FD -  	ld           HL,(IX-3)
  417 D1:B05D E5 -  -  -  	push         HL
  418 D1:B05E DD 27 E2 -  	ld           HL,(IX-30)
  419 D1:B061 11 00 00 00 	ld           DE,0
  420 D1:B065 19 -  -  -  	add          HL,DE
  421 D1:B066 E5 -  -  -  	push         HL
  422 D1:B067 DD 27 EB -  	ld           HL,(IX-21)
  423 D1:B06A E5 -  -  -  	push         HL
  424 D1:B06B D1 -  -  -  	pop          DE
  425 D1:B06C C1 -  -  -  	pop          BC
  426 D1:B06D CD 32 AD D1 	call         multiply_int
  427 D1:B071 D1 -  -  -  	pop          DE
  428 D1:B072 19 -  -  -  	add          HL,DE
  429 D1:B073 E5 -  -  -  	push         HL
  430 D1:B074 DD 27 FA -  	ld           HL,(IX-6)
  431 D1:B077 E5 -  -  -  	push         HL
  432 D1:B078 DD 27 E8 -  	ld           HL,(IX-24)
  433 D1:B07B E5 -  -  -  	push         HL
  434 D1:B07C DD 27 EB -  	ld           HL,(IX-21)
  435 D1:B07F E5 -  -  -  	push         HL
  436 D1:B080 D1 -  -  -  	pop          DE
  437 D1:B081 C1 -  -  -  	pop          BC
  438 D1:B082 CD 32 AD D1 	call         multiply_int
  439 D1:B086 D1 -  -  -  	pop          DE
  440 D1:B087 19 -  -  -  	add          HL,DE
  441 D1:B088 E5 -  -  -  	push         HL
  442 D1:B089 DD 27 EB -  	ld           HL,(IX-21)
  443 D1:B08C E5 -  -  -  	push         HL
  444 D1:B08D DD 27 EB -  	ld           HL,(IX-21)
  445 D1:B090 E5 -  -  -  	push         HL
  446 D1:B091 DD 27 EE -  	ld           HL,(IX-18)
  447 D1:B094 E5 -  -  -  	push         HL
  448 D1:B095 21 00 00 00 	ld           HL,0
  449 D1:B099 39 -  -  -  	add          HL,SP
  450 D1:B09A ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
  451 D1:B09F CD 53 AF D1 	call         drawBlock_5
  452 D1:B0A3 E1 -  -  -  	pop          HL
  453 D1:B0A4 ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
  454 D1:B0A9 F9 -  -  -  	ld           SP,HL
  455 D1:B0AA C3 AE B0 D1 	jp           if_end_67
  456 D1:B0AE -  -  -  -  if_next_68:
  457 D1:B0AE -  -  -  -  if_end_67:
  458 D1:B0AE CD CF AC D1 	call         sub_block_leave
  459 D1:B0B2 CD BB AC D1 	call         sub_block_enter
  460 D1:B0B6 DD 27 DF -  	ld           HL,(IX-33)
  461 D1:B0B9 E5 -  -  -  	push         HL
  462 D1:B0BA C1 -  -  -  	pop          BC
  463 D1:B0BB 3E FF -  -  	ld           A,regTRUE
  464 D1:B0BD CB 70 -  -  	bit          6,B
  465 D1:B0BF CC 66 AC D1 	call         Z,A_false_ret
  466 D1:B0C3 FE FF -  -  	cp           A,%11111111
  467 D1:B0C5 C2 1D B1 D1 	jp           NZ,if_next_89
  468 D1:B0C9 CD BB AC D1 	call         sub_block_enter
  469 D1:B0CD DD 27 FD -  	ld           HL,(IX-3)
  470 D1:B0D0 E5 -  -  -  	push         HL
  471 D1:B0D1 DD 27 E2 -  	ld           HL,(IX-30)
  472 D1:B0D4 23 -  -  -  	inc          HL
  473 D1:B0D5 E5 -  -  -  	push         HL
  474 D1:B0D6 DD 27 EB -  	ld           HL,(IX-21)
  475 D1:B0D9 E5 -  -  -  	push         HL
  476 D1:B0DA D1 -  -  -  	pop          DE
  477 D1:B0DB C1 -  -  -  	pop          BC
  478 D1:B0DC CD 32 AD D1 	call         multiply_int
  479 D1:B0E0 D1 -  -  -  	pop          DE
  480 D1:B0E1 19 -  -  -  	add          HL,DE
  481 D1:B0E2 E5 -  -  -  	push         HL
  482 D1:B0E3 DD 27 FA -  	ld           HL,(IX-6)
  483 D1:B0E6 E5 -  -  -  	push         HL
  484 D1:B0E7 DD 27 E8 -  	ld           HL,(IX-24)
  485 D1:B0EA E5 -  -  -  	push         HL
  486 D1:B0EB DD 27 EB -  	ld           HL,(IX-21)
  487 D1:B0EE E5 -  -  -  	push         HL
  488 D1:B0EF D1 -  -  -  	pop          DE
  489 D1:B0F0 C1 -  -  -  	pop          BC
  490 D1:B0F1 CD 32 AD D1 	call         multiply_int
  491 D1:B0F5 D1 -  -  -  	pop          DE
  492 D1:B0F6 19 -  -  -  	add          HL,DE
  493 D1:B0F7 E5 -  -  -  	push         HL
  494 D1:B0F8 DD 27 EB -  	ld           HL,(IX-21)
  495 D1:B0FB E5 -  -  -  	push         HL
  496 D1:B0FC DD 27 EB -  	ld           HL,(IX-21)
  497 D1:B0FF E5 -  -  -  	push         HL
  498 D1:B100 DD 27 EE -  	ld           HL,(IX-18)
  499 D1:B103 E5 -  -  -  	push         HL
  500 D1:B104 21 00 00 00 	ld           HL,0
  501 D1:B108 39 -  -  -  	add          HL,SP
  502 D1:B109 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
  503 D1:B10E CD 53 AF D1 	call         drawBlock_5
  504 D1:B112 E1 -  -  -  	pop          HL
  505 D1:B113 ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
  506 D1:B118 F9 -  -  -  	ld           SP,HL
  507 D1:B119 C3 1D B1 D1 	jp           if_end_88
  508 D1:B11D -  -  -  -  if_next_89:
  509 D1:B11D -  -  -  -  if_end_88:
  510 D1:B11D CD CF AC D1 	call         sub_block_leave
  511 D1:B121 CD BB AC D1 	call         sub_block_enter
  512 D1:B125 DD 27 DF -  	ld           HL,(IX-33)
  513 D1:B128 E5 -  -  -  	push         HL
  514 D1:B129 C1 -  -  -  	pop          BC
  515 D1:B12A 3E FF -  -  	ld           A,regTRUE
  516 D1:B12C CB 68 -  -  	bit          5,B
  517 D1:B12E CC 66 AC D1 	call         Z,A_false_ret
  518 D1:B132 FE FF -  -  	cp           A,%11111111
  519 D1:B134 C2 90 B1 D1 	jp           NZ,if_next_110
  520 D1:B138 CD BB AC D1 	call         sub_block_enter
  521 D1:B13C DD 27 FD -  	ld           HL,(IX-3)
  522 D1:B13F E5 -  -  -  	push         HL
  523 D1:B140 DD 27 E2 -  	ld           HL,(IX-30)
  524 D1:B143 11 02 00 00 	ld           DE,2
  525 D1:B147 19 -  -  -  	add          HL,DE
  526 D1:B148 E5 -  -  -  	push         HL
  527 D1:B149 DD 27 EB -  	ld           HL,(IX-21)
  528 D1:B14C E5 -  -  -  	push         HL
  529 D1:B14D D1 -  -  -  	pop          DE
  530 D1:B14E C1 -  -  -  	pop          BC
  531 D1:B14F CD 32 AD D1 	call         multiply_int
  532 D1:B153 D1 -  -  -  	pop          DE
  533 D1:B154 19 -  -  -  	add          HL,DE
  534 D1:B155 E5 -  -  -  	push         HL
  535 D1:B156 DD 27 FA -  	ld           HL,(IX-6)
  536 D1:B159 E5 -  -  -  	push         HL
  537 D1:B15A DD 27 E8 -  	ld           HL,(IX-24)
  538 D1:B15D E5 -  -  -  	push         HL
  539 D1:B15E DD 27 EB -  	ld           HL,(IX-21)
  540 D1:B161 E5 -  -  -  	push         HL
  541 D1:B162 D1 -  -  -  	pop          DE
  542 D1:B163 C1 -  -  -  	pop          BC
  543 D1:B164 CD 32 AD D1 	call         multiply_int
  544 D1:B168 D1 -  -  -  	pop          DE
  545 D1:B169 19 -  -  -  	add          HL,DE
  546 D1:B16A E5 -  -  -  	push         HL
  547 D1:B16B DD 27 EB -  	ld           HL,(IX-21)
  548 D1:B16E E5 -  -  -  	push         HL
  549 D1:B16F DD 27 EB -  	ld           HL,(IX-21)
  550 D1:B172 E5 -  -  -  	push         HL
  551 D1:B173 DD 27 EE -  	ld           HL,(IX-18)
  552 D1:B176 E5 -  -  -  	push         HL
  553 D1:B177 21 00 00 00 	ld           HL,0
  554 D1:B17B 39 -  -  -  	add          HL,SP
  555 D1:B17C ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
  556 D1:B181 CD 53 AF D1 	call         drawBlock_5
  557 D1:B185 E1 -  -  -  	pop          HL
  558 D1:B186 ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
  559 D1:B18B F9 -  -  -  	ld           SP,HL
  560 D1:B18C C3 90 B1 D1 	jp           if_end_109
  561 D1:B190 -  -  -  -  if_next_110:
  562 D1:B190 -  -  -  -  if_end_109:
  563 D1:B190 CD CF AC D1 	call         sub_block_leave
  564 D1:B194 CD BB AC D1 	call         sub_block_enter
  565 D1:B198 DD 27 DF -  	ld           HL,(IX-33)
  566 D1:B19B E5 -  -  -  	push         HL
  567 D1:B19C C1 -  -  -  	pop          BC
  568 D1:B19D 3E FF -  -  	ld           A,regTRUE
  569 D1:B19F CB 60 -  -  	bit          4,B
  570 D1:B1A1 CC 66 AC D1 	call         Z,A_false_ret
  571 D1:B1A5 FE FF -  -  	cp           A,%11111111
  572 D1:B1A7 C2 03 B2 D1 	jp           NZ,if_next_131
  573 D1:B1AB CD BB AC D1 	call         sub_block_enter
  574 D1:B1AF DD 27 FD -  	ld           HL,(IX-3)
  575 D1:B1B2 E5 -  -  -  	push         HL
  576 D1:B1B3 DD 27 E2 -  	ld           HL,(IX-30)
  577 D1:B1B6 11 03 00 00 	ld           DE,3
  578 D1:B1BA 19 -  -  -  	add          HL,DE
  579 D1:B1BB E5 -  -  -  	push         HL
  580 D1:B1BC DD 27 EB -  	ld           HL,(IX-21)
  581 D1:B1BF E5 -  -  -  	push         HL
  582 D1:B1C0 D1 -  -  -  	pop          DE
  583 D1:B1C1 C1 -  -  -  	pop          BC
  584 D1:B1C2 CD 32 AD D1 	call         multiply_int
  585 D1:B1C6 D1 -  -  -  	pop          DE
  586 D1:B1C7 19 -  -  -  	add          HL,DE
  587 D1:B1C8 E5 -  -  -  	push         HL
  588 D1:B1C9 DD 27 FA -  	ld           HL,(IX-6)
  589 D1:B1CC E5 -  -  -  	push         HL
  590 D1:B1CD DD 27 E8 -  	ld           HL,(IX-24)
  591 D1:B1D0 E5 -  -  -  	push         HL
  592 D1:B1D1 DD 27 EB -  	ld           HL,(IX-21)
  593 D1:B1D4 E5 -  -  -  	push         HL
  594 D1:B1D5 D1 -  -  -  	pop          DE
  595 D1:B1D6 C1 -  -  -  	pop          BC
  596 D1:B1D7 CD 32 AD D1 	call         multiply_int
  597 D1:B1DB D1 -  -  -  	pop          DE
  598 D1:B1DC 19 -  -  -  	add          HL,DE
  599 D1:B1DD E5 -  -  -  	push         HL
  600 D1:B1DE DD 27 EB -  	ld           HL,(IX-21)
  601 D1:B1E1 E5 -  -  -  	push         HL
  602 D1:B1E2 DD 27 EB -  	ld           HL,(IX-21)
  603 D1:B1E5 E5 -  -  -  	push         HL
  604 D1:B1E6 DD 27 EE -  	ld           HL,(IX-18)
  605 D1:B1E9 E5 -  -  -  	push         HL
  606 D1:B1EA 21 00 00 00 	ld           HL,0
  607 D1:B1EE 39 -  -  -  	add          HL,SP
  608 D1:B1EF ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
  609 D1:B1F4 CD 53 AF D1 	call         drawBlock_5
  610 D1:B1F8 E1 -  -  -  	pop          HL
  611 D1:B1F9 ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
  612 D1:B1FE F9 -  -  -  	ld           SP,HL
  613 D1:B1FF C3 03 B2 D1 	jp           if_end_130
  614 D1:B203 -  -  -  -  if_next_131:
  615 D1:B203 -  -  -  -  if_end_130:
  616 D1:B203 CD CF AC D1 	call         sub_block_leave
  617 D1:B207 CD BB AC D1 	call         sub_block_enter
  618 D1:B20B DD 27 DF -  	ld           HL,(IX-33)
  619 D1:B20E E5 -  -  -  	push         HL
  620 D1:B20F C1 -  -  -  	pop          BC
  621 D1:B210 3E FF -  -  	ld           A,regTRUE
  622 D1:B212 CB 58 -  -  	bit          3,B
  623 D1:B214 CC 66 AC D1 	call         Z,A_false_ret
  624 D1:B218 FE FF -  -  	cp           A,%11111111
  625 D1:B21A C2 76 B2 D1 	jp           NZ,if_next_152
  626 D1:B21E CD BB AC D1 	call         sub_block_enter
  627 D1:B222 DD 27 FD -  	ld           HL,(IX-3)
  628 D1:B225 E5 -  -  -  	push         HL
  629 D1:B226 DD 27 E2 -  	ld           HL,(IX-30)
  630 D1:B229 11 04 00 00 	ld           DE,4
  631 D1:B22D 19 -  -  -  	add          HL,DE
  632 D1:B22E E5 -  -  -  	push         HL
  633 D1:B22F DD 27 EB -  	ld           HL,(IX-21)
  634 D1:B232 E5 -  -  -  	push         HL
  635 D1:B233 D1 -  -  -  	pop          DE
  636 D1:B234 C1 -  -  -  	pop          BC
  637 D1:B235 CD 32 AD D1 	call         multiply_int
  638 D1:B239 D1 -  -  -  	pop          DE
  639 D1:B23A 19 -  -  -  	add          HL,DE
  640 D1:B23B E5 -  -  -  	push         HL
  641 D1:B23C DD 27 FA -  	ld           HL,(IX-6)
  642 D1:B23F E5 -  -  -  	push         HL
  643 D1:B240 DD 27 E8 -  	ld           HL,(IX-24)
  644 D1:B243 E5 -  -  -  	push         HL
  645 D1:B244 DD 27 EB -  	ld           HL,(IX-21)
  646 D1:B247 E5 -  -  -  	push         HL
  647 D1:B248 D1 -  -  -  	pop          DE
  648 D1:B249 C1 -  -  -  	pop          BC
  649 D1:B24A CD 32 AD D1 	call         multiply_int
  650 D1:B24E D1 -  -  -  	pop          DE
  651 D1:B24F 19 -  -  -  	add          HL,DE
  652 D1:B250 E5 -  -  -  	push         HL
  653 D1:B251 DD 27 EB -  	ld           HL,(IX-21)
  654 D1:B254 E5 -  -  -  	push         HL
  655 D1:B255 DD 27 EB -  	ld           HL,(IX-21)
  656 D1:B258 E5 -  -  -  	push         HL
  657 D1:B259 DD 27 EE -  	ld           HL,(IX-18)
  658 D1:B25C E5 -  -  -  	push         HL
  659 D1:B25D 21 00 00 00 	ld           HL,0
  660 D1:B261 39 -  -  -  	add          HL,SP
  661 D1:B262 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
  662 D1:B267 CD 53 AF D1 	call         drawBlock_5
  663 D1:B26B E1 -  -  -  	pop          HL
  664 D1:B26C ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
  665 D1:B271 F9 -  -  -  	ld           SP,HL
  666 D1:B272 C3 76 B2 D1 	jp           if_end_151
  667 D1:B276 -  -  -  -  if_next_152:
  668 D1:B276 -  -  -  -  if_end_151:
  669 D1:B276 CD CF AC D1 	call         sub_block_leave
  670 D1:B27A CD BB AC D1 	call         sub_block_enter
  671 D1:B27E DD 27 DF -  	ld           HL,(IX-33)
  672 D1:B281 E5 -  -  -  	push         HL
  673 D1:B282 C1 -  -  -  	pop          BC
  674 D1:B283 3E FF -  -  	ld           A,regTRUE
  675 D1:B285 CB 50 -  -  	bit          2,B
  676 D1:B287 CC 66 AC D1 	call         Z,A_false_ret
  677 D1:B28B FE FF -  -  	cp           A,%11111111
  678 D1:B28D C2 E9 B2 D1 	jp           NZ,if_next_173
  679 D1:B291 CD BB AC D1 	call         sub_block_enter
  680 D1:B295 DD 27 FD -  	ld           HL,(IX-3)
  681 D1:B298 E5 -  -  -  	push         HL
  682 D1:B299 DD 27 E2 -  	ld           HL,(IX-30)
  683 D1:B29C 11 05 00 00 	ld           DE,5
  684 D1:B2A0 19 -  -  -  	add          HL,DE
  685 D1:B2A1 E5 -  -  -  	push         HL
  686 D1:B2A2 DD 27 EB -  	ld           HL,(IX-21)
  687 D1:B2A5 E5 -  -  -  	push         HL
  688 D1:B2A6 D1 -  -  -  	pop          DE
  689 D1:B2A7 C1 -  -  -  	pop          BC
  690 D1:B2A8 CD 32 AD D1 	call         multiply_int
  691 D1:B2AC D1 -  -  -  	pop          DE
  692 D1:B2AD 19 -  -  -  	add          HL,DE
  693 D1:B2AE E5 -  -  -  	push         HL
  694 D1:B2AF DD 27 FA -  	ld           HL,(IX-6)
  695 D1:B2B2 E5 -  -  -  	push         HL
  696 D1:B2B3 DD 27 E8 -  	ld           HL,(IX-24)
  697 D1:B2B6 E5 -  -  -  	push         HL
  698 D1:B2B7 DD 27 EB -  	ld           HL,(IX-21)
  699 D1:B2BA E5 -  -  -  	push         HL
  700 D1:B2BB D1 -  -  -  	pop          DE
  701 D1:B2BC C1 -  -  -  	pop          BC
  702 D1:B2BD CD 32 AD D1 	call         multiply_int
  703 D1:B2C1 D1 -  -  -  	pop          DE
  704 D1:B2C2 19 -  -  -  	add          HL,DE
  705 D1:B2C3 E5 -  -  -  	push         HL
  706 D1:B2C4 DD 27 EB -  	ld           HL,(IX-21)
  707 D1:B2C7 E5 -  -  -  	push         HL
  708 D1:B2C8 DD 27 EB -  	ld           HL,(IX-21)
  709 D1:B2CB E5 -  -  -  	push         HL
  710 D1:B2CC DD 27 EE -  	ld           HL,(IX-18)
  711 D1:B2CF E5 -  -  -  	push         HL
  712 D1:B2D0 21 00 00 00 	ld           HL,0
  713 D1:B2D4 39 -  -  -  	add          HL,SP
  714 D1:B2D5 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
  715 D1:B2DA CD 53 AF D1 	call         drawBlock_5
  716 D1:B2DE E1 -  -  -  	pop          HL
  717 D1:B2DF ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
  718 D1:B2E4 F9 -  -  -  	ld           SP,HL
  719 D1:B2E5 C3 E9 B2 D1 	jp           if_end_172
  720 D1:B2E9 -  -  -  -  if_next_173:
  721 D1:B2E9 -  -  -  -  if_end_172:
  722 D1:B2E9 CD CF AC D1 	call         sub_block_leave
  723 D1:B2ED CD BB AC D1 	call         sub_block_enter
  724 D1:B2F1 DD 27 DF -  	ld           HL,(IX-33)
  725 D1:B2F4 E5 -  -  -  	push         HL
  726 D1:B2F5 C1 -  -  -  	pop          BC
  727 D1:B2F6 3E FF -  -  	ld           A,regTRUE
  728 D1:B2F8 CB 48 -  -  	bit          1,B
  729 D1:B2FA CC 66 AC D1 	call         Z,A_false_ret
  730 D1:B2FE FE FF -  -  	cp           A,%11111111
  731 D1:B300 C2 5C B3 D1 	jp           NZ,if_next_194
  732 D1:B304 CD BB AC D1 	call         sub_block_enter
  733 D1:B308 DD 27 FD -  	ld           HL,(IX-3)
  734 D1:B30B E5 -  -  -  	push         HL
  735 D1:B30C DD 27 E2 -  	ld           HL,(IX-30)
  736 D1:B30F 11 06 00 00 	ld           DE,6
  737 D1:B313 19 -  -  -  	add          HL,DE
  738 D1:B314 E5 -  -  -  	push         HL
  739 D1:B315 DD 27 EB -  	ld           HL,(IX-21)
  740 D1:B318 E5 -  -  -  	push         HL
  741 D1:B319 D1 -  -  -  	pop          DE
  742 D1:B31A C1 -  -  -  	pop          BC
  743 D1:B31B CD 32 AD D1 	call         multiply_int
  744 D1:B31F D1 -  -  -  	pop          DE
  745 D1:B320 19 -  -  -  	add          HL,DE
  746 D1:B321 E5 -  -  -  	push         HL
  747 D1:B322 DD 27 FA -  	ld           HL,(IX-6)
  748 D1:B325 E5 -  -  -  	push         HL
  749 D1:B326 DD 27 E8 -  	ld           HL,(IX-24)
  750 D1:B329 E5 -  -  -  	push         HL
  751 D1:B32A DD 27 EB -  	ld           HL,(IX-21)
  752 D1:B32D E5 -  -  -  	push         HL
  753 D1:B32E D1 -  -  -  	pop          DE
  754 D1:B32F C1 -  -  -  	pop          BC
  755 D1:B330 CD 32 AD D1 	call         multiply_int
  756 D1:B334 D1 -  -  -  	pop          DE
  757 D1:B335 19 -  -  -  	add          HL,DE
  758 D1:B336 E5 -  -  -  	push         HL
  759 D1:B337 DD 27 EB -  	ld           HL,(IX-21)
  760 D1:B33A E5 -  -  -  	push         HL
  761 D1:B33B DD 27 EB -  	ld           HL,(IX-21)
  762 D1:B33E E5 -  -  -  	push         HL
  763 D1:B33F DD 27 EE -  	ld           HL,(IX-18)
  764 D1:B342 E5 -  -  -  	push         HL
  765 D1:B343 21 00 00 00 	ld           HL,0
  766 D1:B347 39 -  -  -  	add          HL,SP
  767 D1:B348 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
  768 D1:B34D CD 53 AF D1 	call         drawBlock_5
  769 D1:B351 E1 -  -  -  	pop          HL
  770 D1:B352 ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
  771 D1:B357 F9 -  -  -  	ld           SP,HL
  772 D1:B358 C3 5C B3 D1 	jp           if_end_193
  773 D1:B35C -  -  -  -  if_next_194:
  774 D1:B35C -  -  -  -  if_end_193:
  775 D1:B35C CD CF AC D1 	call         sub_block_leave
  776 D1:B360 CD BB AC D1 	call         sub_block_enter
  777 D1:B364 DD 27 DF -  	ld           HL,(IX-33)
  778 D1:B367 E5 -  -  -  	push         HL
  779 D1:B368 C1 -  -  -  	pop          BC
  780 D1:B369 3E FF -  -  	ld           A,regTRUE
  781 D1:B36B CB 40 -  -  	bit          0,B
  782 D1:B36D CC 66 AC D1 	call         Z,A_false_ret
  783 D1:B371 FE FF -  -  	cp           A,%11111111
  784 D1:B373 C2 CF B3 D1 	jp           NZ,if_next_215
  785 D1:B377 CD BB AC D1 	call         sub_block_enter
  786 D1:B37B DD 27 FD -  	ld           HL,(IX-3)
  787 D1:B37E E5 -  -  -  	push         HL
  788 D1:B37F DD 27 E2 -  	ld           HL,(IX-30)
  789 D1:B382 11 07 00 00 	ld           DE,7
  790 D1:B386 19 -  -  -  	add          HL,DE
  791 D1:B387 E5 -  -  -  	push         HL
  792 D1:B388 DD 27 EB -  	ld           HL,(IX-21)
  793 D1:B38B E5 -  -  -  	push         HL
  794 D1:B38C D1 -  -  -  	pop          DE
  795 D1:B38D C1 -  -  -  	pop          BC
  796 D1:B38E CD 32 AD D1 	call         multiply_int
  797 D1:B392 D1 -  -  -  	pop          DE
  798 D1:B393 19 -  -  -  	add          HL,DE
  799 D1:B394 E5 -  -  -  	push         HL
  800 D1:B395 DD 27 FA -  	ld           HL,(IX-6)
  801 D1:B398 E5 -  -  -  	push         HL
  802 D1:B399 DD 27 E8 -  	ld           HL,(IX-24)
  803 D1:B39C E5 -  -  -  	push         HL
  804 D1:B39D DD 27 EB -  	ld           HL,(IX-21)
  805 D1:B3A0 E5 -  -  -  	push         HL
  806 D1:B3A1 D1 -  -  -  	pop          DE
  807 D1:B3A2 C1 -  -  -  	pop          BC
  808 D1:B3A3 CD 32 AD D1 	call         multiply_int
  809 D1:B3A7 D1 -  -  -  	pop          DE
  810 D1:B3A8 19 -  -  -  	add          HL,DE
  811 D1:B3A9 E5 -  -  -  	push         HL
  812 D1:B3AA DD 27 EB -  	ld           HL,(IX-21)
  813 D1:B3AD E5 -  -  -  	push         HL
  814 D1:B3AE DD 27 EB -  	ld           HL,(IX-21)
  815 D1:B3B1 E5 -  -  -  	push         HL
  816 D1:B3B2 DD 27 EE -  	ld           HL,(IX-18)
  817 D1:B3B5 E5 -  -  -  	push         HL
  818 D1:B3B6 21 00 00 00 	ld           HL,0
  819 D1:B3BA 39 -  -  -  	add          HL,SP
  820 D1:B3BB ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
  821 D1:B3C0 CD 53 AF D1 	call         drawBlock_5
  822 D1:B3C4 E1 -  -  -  	pop          HL
  823 D1:B3C5 ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
  824 D1:B3CA F9 -  -  -  	ld           SP,HL
  825 D1:B3CB C3 CF B3 D1 	jp           if_end_214
  826 D1:B3CF -  -  -  -  if_next_215:
  827 D1:B3CF -  -  -  -  if_end_214:
  828 D1:B3CF CD CF AC D1 	call         sub_block_leave
  829 D1:B3D3 DD 27 E2 -  	ld           HL,(IX-30)
  830 D1:B3D6 11 08 00 00 	ld           DE,8
  831 D1:B3DA 19 -  -  -  	add          HL,DE
  832 D1:B3DB DD 2F E2 -  	ld           (IX-30),HL
  833 D1:B3DE DD 27 E5 -  	ld           HL,(IX-27)
  834 D1:B3E1 23 -  -  -  	inc          HL
  835 D1:B3E2 DD 2F E5 -  	ld           (IX-27),HL
  836 D1:B3E5 CD CF AC D1 	call         sub_block_leave
  837 D1:B3E9 C3 15 B0 D1 	jp           while_start52
  838 D1:B3ED -  -  -  -  while_end53:
  839 D1:B3ED DD 27 E8 -  	ld           HL,(IX-24)
  840 D1:B3F0 23 -  -  -  	inc          HL
  841 D1:B3F1 DD 2F E8 -  	ld           (IX-24),HL
  842 D1:B3F4 CD CF AC D1 	call         sub_block_leave
  843 D1:B3F8 C3 F9 AF D1 	jp           while_start44
  844 D1:B3FC -  -  -  -  while_end45:
  845 D1:B3FC 11 00 00 00 	ld           DE,0
  846 D1:B400 -  -  -  -  displayBitmap_end_38:
  847 D1:B400 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
  848 D1:B405 DD E1 -  -  	pop          IX
  849 D1:B407 C9 -  -  -  	ret          
  850 D1:B408 -  -  -  -  malloc_244:
  851 D1:B408 DD E5 -  -  	push         IX                        ; push stack_start
  852 D1:B40A ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
  853 D1:B40F F9 -  -  -  	ld           SP,HL
  854 D1:B410 DD 21 03 00 
              00 -  -  -  	ld           IX,3
  855 D1:B415 DD 39 -  -  	add          IX,SP
  856 D1:B417 2A F6 31 D0 	ld           HL,(globalVars+0)
  857 D1:B41B E5 -  -  -  	push         HL
  858 D1:B41C 2A F6 31 D0 	ld           HL,(globalVars+0)
  859 D1:B420 E5 -  -  -  	push         HL
  860 D1:B421 DD 27 FD -  	ld           HL,(IX-3)
  861 D1:B424 E5 -  -  -  	push         HL
  862 D1:B425 F1 -  -  -  	pop          AF
  863 D1:B426 E1 -  -  -  	pop          HL
  864 D1:B427 11 00 00 00 	ld           DE,0
  865 D1:B42B 5F -  -  -  	ld           E,A
  866 D1:B42C 19 -  -  -  	add          HL,DE
  867 D1:B42D 22 F6 31 D0 	ld           (globalVars+0),HL
  868 D1:B431 2A F6 31 D0 	ld           HL,(globalVars+0)
  869 D1:B435 E5 -  -  -  	push         HL
  870 D1:B436 D1 -  -  -  	pop          DE
  871 D1:B437 C3 3F B4 D1 	jp           malloc_end_245
  872 D1:B43B 11 00 00 00 	ld           DE,0
  873 D1:B43F -  -  -  -  malloc_end_245:
  874 D1:B43F ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
  875 D1:B444 DD E1 -  -  	pop          IX
  876 D1:B446 C9 -  -  -  	ret          
  877 D1:B447 -  -  -  -  malloc_251:
  878 D1:B447 DD E5 -  -  	push         IX                        ; push stack_start
  879 D1:B449 ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
  880 D1:B44E F9 -  -  -  	ld           SP,HL
  881 D1:B44F DD 21 03 00 
              00 -  -  -  	ld           IX,3
  882 D1:B454 DD 39 -  -  	add          IX,SP
  883 D1:B456 2A F6 31 D0 	ld           HL,(globalVars+0)
  884 D1:B45A E5 -  -  -  	push         HL
  885 D1:B45B 2A F6 31 D0 	ld           HL,(globalVars+0)
  886 D1:B45F E5 -  -  -  	push         HL
  887 D1:B460 DD 27 FD -  	ld           HL,(IX-3)
  888 D1:B463 E5 -  -  -  	push         HL
  889 D1:B464 D1 -  -  -  	pop          DE
  890 D1:B465 E1 -  -  -  	pop          HL
  891 D1:B466 01 00 00 00 	ld           BC,0
  892 D1:B46A 42 -  -  -  	ld           B,D
  893 D1:B46B 4B -  -  -  	ld           C,E
  894 D1:B46C 19 -  -  -  	add          HL,DE
  895 D1:B46D 22 F6 31 D0 	ld           (globalVars+0),HL
  896 D1:B471 2A F6 31 D0 	ld           HL,(globalVars+0)
  897 D1:B475 E5 -  -  -  	push         HL
  898 D1:B476 D1 -  -  -  	pop          DE
  899 D1:B477 C3 7F B4 D1 	jp           malloc_end_252
  900 D1:B47B 11 00 00 00 	ld           DE,0
  901 D1:B47F -  -  -  -  malloc_end_252:
  902 D1:B47F ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
  903 D1:B484 DD E1 -  -  	pop          IX
  904 D1:B486 C9 -  -  -  	ret          
  905 D1:B487 -  -  -  -  enterHeapBlock_258:
  906 D1:B487 DD E5 -  -  	push         IX                        ; push stack_start
  907 D1:B489 ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
  908 D1:B48E F9 -  -  -  	ld           SP,HL
  909 D1:B48F DD 21 00 00 
              00 -  -  -  	ld           IX,0
  910 D1:B494 DD 39 -  -  	add          IX,SP
  911 D1:B496 2A F9 31 D0 	ld           HL,(globalVars+3)
  912 D1:B49A E5 -  -  -  	push         HL
  913 D1:B49B 2A F6 31 D0 	ld           HL,(globalVars+0)
  914 D1:B49F D1 -  -  -  	pop          DE
  915 D1:B4A0 ED 1F -  -  	ld           (HL),DE
  916 D1:B4A2 2A F6 31 D0 	ld           HL,(globalVars+0)
  917 D1:B4A6 22 F9 31 D0 	ld           (globalVars+3),HL
  918 D1:B4AA 2A F6 31 D0 	ld           HL,(globalVars+0)
  919 D1:B4AE E5 -  -  -  	push         HL
  920 D1:B4AF 3E 03 -  -  	ld           A,3
  921 D1:B4B1 E1 -  -  -  	pop          HL
  922 D1:B4B2 11 00 00 00 	ld           DE,0
  923 D1:B4B6 5F -  -  -  	ld           E,A
  924 D1:B4B7 19 -  -  -  	add          HL,DE
  925 D1:B4B8 22 F6 31 D0 	ld           (globalVars+0),HL
  926 D1:B4BC 11 00 00 00 	ld           DE,0
  927 D1:B4C0 -  -  -  -  enterHeapBlock_end_259:
  928 D1:B4C0 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
  929 D1:B4C5 DD E1 -  -  	pop          IX
  930 D1:B4C7 C9 -  -  -  	ret          
  931 D1:B4C8 -  -  -  -  exitHeapBlock_263:
  932 D1:B4C8 DD E5 -  -  	push         IX                        ; push stack_start
  933 D1:B4CA ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
  934 D1:B4CF F9 -  -  -  	ld           SP,HL
  935 D1:B4D0 DD 21 00 00 
              00 -  -  -  	ld           IX,0
  936 D1:B4D5 DD 39 -  -  	add          IX,SP
  937 D1:B4D7 2A F9 31 D0 	ld           HL,(globalVars+3)
  938 D1:B4DB 22 F6 31 D0 	ld           (globalVars+0),HL
  939 D1:B4DF 2A F6 31 D0 	ld           HL,(globalVars+0)
  940 D1:B4E3 ED 17 -  -  	ld           DE,(HL)
  941 D1:B4E5 D5 -  -  -  	push         DE
  942 D1:B4E6 E1 -  -  -  	pop          HL
  943 D1:B4E7 22 F9 31 D0 	ld           (globalVars+3),HL
  944 D1:B4EB 11 00 00 00 	ld           DE,0
  945 D1:B4EF -  -  -  -  exitHeapBlock_end_264:
  946 D1:B4EF ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
  947 D1:B4F4 DD E1 -  -  	pop          IX
  948 D1:B4F6 C9 -  -  -  	ret          
  949 D1:B4F7 -  -  -  -  PS_init_268:
  950 D1:B4F7 DD E5 -  -  	push         IX                        ; push stack_start
  951 D1:B4F9 ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
  952 D1:B4FE F9 -  -  -  	ld           SP,HL
  953 D1:B4FF DD 21 03 00 
              00 -  -  -  	ld           IX,3
  954 D1:B504 DD 39 -  -  	add          IX,SP
  955 D1:B506 DD 27 FD -  	ld           HL,(IX-3)
  956 D1:B509 E5 -  -  -  	push         HL
  957 D1:B50A 3E 03 -  -  	ld           A,3
  958 D1:B50C E1 -  -  -  	pop          HL
  959 D1:B50D 11 00 00 00 	ld           DE,0
  960 D1:B511 5F -  -  -  	ld           E,A
  961 D1:B512 19 -  -  -  	add          HL,DE
  962 D1:B513 22 F6 31 D0 	ld           (globalVars+0),HL
  963 D1:B517 DD 27 FD -  	ld           HL,(IX-3)
  964 D1:B51A 22 F9 31 D0 	ld           (globalVars+3),HL
  965 D1:B51E CD BB AC D1 	call         sub_block_enter
  966 D1:B522 21 00 00 00 	ld           HL,0
  967 D1:B526 39 -  -  -  	add          HL,SP
  968 D1:B527 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
  969 D1:B52C CD 87 B4 D1 	call         enterHeapBlock_258
  970 D1:B530 E1 -  -  -  	pop          HL
  971 D1:B531 ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
  972 D1:B536 F9 -  -  -  	ld           SP,HL
  973 D1:B537 11 00 00 00 	ld           DE,0
  974 D1:B53B -  -  -  -  PS_init_end_269:
  975 D1:B53B ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
  976 D1:B540 DD E1 -  -  	pop          IX
  977 D1:B542 C9 -  -  -  	ret          
  978 D1:B543 -  -  -  -  fillByteArray_276:
  979 D1:B543 DD E5 -  -  	push         IX                        ; push stack_start
  980 D1:B545 ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
  981 D1:B54A F9 -  -  -  	ld           SP,HL
  982 D1:B54B DD 21 06 00 
              00 -  -  -  	ld           IX,6
  983 D1:B550 DD 39 -  -  	add          IX,SP
  984 D1:B552 21 00 00 00 	ld           HL,0
  985 D1:B556 E5 -  -  -  	push         HL
  986 D1:B557 DD 27 FD -  	ld           HL,(IX-3)
  987 D1:B55A E5 -  -  -  	push         HL
  988 D1:B55B CD 95 AB D1 	call         get_array_size
  989 D1:B55F -  -  -  -  while_start283:
  990 D1:B55F DD 27 F7 -  	ld           HL,(IX-9)
  991 D1:B562 E5 -  -  -  	push         HL
  992 D1:B563 DD 27 F4 -  	ld           HL,(IX-12)
  993 D1:B566 D1 -  -  -  	pop          DE
  994 D1:B567 EB -  -  -  	ex           DE,HL
  995 D1:B568 CD 69 AC D1 	call         int_smaller
  996 D1:B56C FE FF -  -  	cp           A,%11111111
  997 D1:B56E C2 96 B5 D1 	jp           NZ,while_end284
  998 D1:B572 CD BB AC D1 	call         sub_block_enter
  999 D1:B576 DD 27 FA -  	ld           HL,(IX-6)
 1000 D1:B579 E5 -  -  -  	push         HL
 1001 D1:B57A DD 27 F7 -  	ld           HL,(IX-9)
 1002 D1:B57D E5 -  -  -  	push         HL
 1003 D1:B57E DD 27 FD -  	ld           HL,(IX-3)
 1004 D1:B581 C1 -  -  -  	pop          BC
 1005 D1:B582 23 -  -  -  	inc          HL
 1006 D1:B583 23 -  -  -  	inc          HL
 1007 D1:B584 09 -  -  -  	add          HL,BC
 1008 D1:B585 F1 -  -  -  	pop          AF
 1009 D1:B586 77 -  -  -  	ld           (HL),A
 1010 D1:B587 DD 27 F7 -  	ld           HL,(IX-9)
 1011 D1:B58A 23 -  -  -  	inc          HL
 1012 D1:B58B DD 2F F7 -  	ld           (IX-9),HL
 1013 D1:B58E CD CF AC D1 	call         sub_block_leave
 1014 D1:B592 C3 5F B5 D1 	jp           while_start283
 1015 D1:B596 -  -  -  -  while_end284:
 1016 D1:B596 11 00 00 00 	ld           DE,0
 1017 D1:B59A -  -  -  -  fillByteArray_end_277:
 1018 D1:B59A ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 1019 D1:B59F DD E1 -  -  	pop          IX
 1020 D1:B5A1 C9 -  -  -  	ret          
 1021 D1:B5A2 -  -  -  -  add_295:
 1022 D1:B5A2 DD E5 -  -  	push         IX                        ; push stack_start
 1023 D1:B5A4 ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 1024 D1:B5A9 F9 -  -  -  	ld           SP,HL
 1025 D1:B5AA DD 21 06 00 
              00 -  -  -  	ld           IX,6
 1026 D1:B5AF DD 39 -  -  	add          IX,SP
 1027 D1:B5B1 -  -  -  -  while_start298:
 1028 D1:B5B1 DD 27 FA -  	ld           HL,(IX-6)
 1029 D1:B5B4 E5 -  -  -  	push         HL
 1030 D1:B5B5 21 00 00 00 	ld           HL,0
 1031 D1:B5B9 D1 -  -  -  	pop          DE
 1032 D1:B5BA EB -  -  -  	ex           DE,HL
 1033 D1:B5BB CD 74 AC D1 	call         int_higher
 1034 D1:B5BF FE FF -  -  	cp           A,%11111111
 1035 D1:B5C1 C2 61 B6 D1 	jp           NZ,while_end299
 1036 D1:B5C5 CD BB AC D1 	call         sub_block_enter
 1037 D1:B5C9 DD 27 FA -  	ld           HL,(IX-6)
 1038 D1:B5CC 2B -  -  -  	dec          HL
 1039 D1:B5CD DD 2F FA -  	ld           (IX-6),HL
 1040 D1:B5D0 21 04 00 00 	ld           HL,4
 1041 D1:B5D4 E5 -  -  -  	push         HL
 1042 D1:B5D5 -  -  -  -  while_start309:
 1043 D1:B5D5 DD 27 F7 -  	ld           HL,(IX-9)
 1044 D1:B5D8 E5 -  -  -  	push         HL
 1045 D1:B5D9 21 00 00 00 	ld           HL,0
 1046 D1:B5DD D1 -  -  -  	pop          DE
 1047 D1:B5DE EB -  -  -  	ex           DE,HL
 1048 D1:B5DF CD 74 AC D1 	call         int_higher
 1049 D1:B5E3 FE FF -  -  	cp           A,%11111111
 1050 D1:B5E5 C2 59 B6 D1 	jp           NZ,while_end310
 1051 D1:B5E9 CD BB AC D1 	call         sub_block_enter
 1052 D1:B5ED CD BB AC D1 	call         sub_block_enter
 1053 D1:B5F1 DD 27 FD -  	ld           HL,(IX-3)
 1054 D1:B5F4 E5 -  -  -  	push         HL
 1055 D1:B5F5 DD 27 F7 -  	ld           HL,(IX-9)
 1056 D1:B5F8 C1 -  -  -  	pop          BC
 1057 D1:B5F9 23 -  -  -  	inc          HL
 1058 D1:B5FA 23 -  -  -  	inc          HL
 1059 D1:B5FB 09 -  -  -  	add          HL,BC
 1060 D1:B5FC 7E -  -  -  	ld           A,(HL)
 1061 D1:B5FD F5 -  -  -  	push         AF
 1062 D1:B5FE 3E 09 -  -  	ld           A,9
 1063 D1:B600 F5 -  -  -  	push         AF
 1064 D1:B601 E1 -  -  -  	pop          HL
 1065 D1:B602 F1 -  -  -  	pop          AF
 1066 D1:B603 CD 4B AC D1 	call         byte_equals
 1067 D1:B607 FE FF -  -  	cp           A,%11111111
 1068 D1:B609 C2 28 B6 D1 	jp           NZ,if_next_320
 1069 D1:B60D 3E 00 -  -  	ld           A,0                       ; 0b
 1070 D1:B60F F5 -  -  -  	push         AF
 1071 D1:B610 DD 27 F7 -  	ld           HL,(IX-9)
 1072 D1:B613 E5 -  -  -  	push         HL
 1073 D1:B614 DD 27 FD -  	ld           HL,(IX-3)
 1074 D1:B617 C1 -  -  -  	pop          BC
 1075 D1:B618 23 -  -  -  	inc          HL
 1076 D1:B619 23 -  -  -  	inc          HL
 1077 D1:B61A 09 -  -  -  	add          HL,BC
 1078 D1:B61B F1 -  -  -  	pop          AF
 1079 D1:B61C 77 -  -  -  	ld           (HL),A
 1080 D1:B61D DD 27 F7 -  	ld           HL,(IX-9)
 1081 D1:B620 2B -  -  -  	dec          HL
 1082 D1:B621 DD 2F F7 -  	ld           (IX-9),HL
 1083 D1:B624 C3 4D B6 D1 	jp           if_end_319
 1084 D1:B628 -  -  -  -  if_next_320:
 1085 D1:B628 DD 27 FD -  	ld           HL,(IX-3)
 1086 D1:B62B E5 -  -  -  	push         HL
 1087 D1:B62C DD 27 F7 -  	ld           HL,(IX-9)
 1088 D1:B62F C1 -  -  -  	pop          BC
 1089 D1:B630 23 -  -  -  	inc          HL
 1090 D1:B631 23 -  -  -  	inc          HL
 1091 D1:B632 09 -  -  -  	add          HL,BC
 1092 D1:B633 7E -  -  -  	ld           A,(HL)
 1093 D1:B634 3C -  -  -  	inc          A
 1094 D1:B635 F5 -  -  -  	push         AF
 1095 D1:B636 DD 27 F7 -  	ld           HL,(IX-9)
 1096 D1:B639 E5 -  -  -  	push         HL
 1097 D1:B63A DD 27 FD -  	ld           HL,(IX-3)
 1098 D1:B63D C1 -  -  -  	pop          BC
 1099 D1:B63E 23 -  -  -  	inc          HL
 1100 D1:B63F 23 -  -  -  	inc          HL
 1101 D1:B640 09 -  -  -  	add          HL,BC
 1102 D1:B641 F1 -  -  -  	pop          AF
 1103 D1:B642 77 -  -  -  	ld           (HL),A
 1104 D1:B643 06 02 -  -  	ld           B,2
 1105 D1:B645 CD DE AC D1 	call         multi_block_leave
 1106 D1:B649 C3 59 B6 D1 	jp           while_end310
 1107 D1:B64D -  -  -  -  if_end_319:
 1108 D1:B64D CD CF AC D1 	call         sub_block_leave
 1109 D1:B651 CD CF AC D1 	call         sub_block_leave
 1110 D1:B655 C3 D5 B5 D1 	jp           while_start309
 1111 D1:B659 -  -  -  -  while_end310:
 1112 D1:B659 CD CF AC D1 	call         sub_block_leave
 1113 D1:B65D C3 B1 B5 D1 	jp           while_start298
 1114 D1:B661 -  -  -  -  while_end299:
 1115 D1:B661 DD 27 FD -  	ld           HL,(IX-3)
 1116 D1:B664 E5 -  -  -  	push         HL
 1117 D1:B665 D1 -  -  -  	pop          DE
 1118 D1:B666 C3 6E B6 D1 	jp           add_end_296
 1119 D1:B66A 11 00 00 00 	ld           DE,0
 1120 D1:B66E -  -  -  -  add_end_296:
 1121 D1:B66E ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 1122 D1:B673 DD E1 -  -  	pop          IX
 1123 D1:B675 C9 -  -  -  	ret          
 1124 D1:B676 -  -  -  -  newBase10_334:
 1125 D1:B676 DD E5 -  -  	push         IX                        ; push stack_start
 1126 D1:B678 ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 1127 D1:B67D F9 -  -  -  	ld           SP,HL
 1128 D1:B67E DD 21 03 00 
              00 -  -  -  	ld           IX,3
 1129 D1:B683 DD 39 -  -  	add          IX,SP
 1130 D1:B685 21 05 00 00 	ld           HL,5
 1131 D1:B689 E5 -  -  -  	push         HL
 1132 D1:B68A DD 27 FD -  	ld           HL,(IX-3)
 1133 D1:B68D D1 -  -  -  	pop          DE
 1134 D1:B68E 72 -  -  -  	ld           (HL),D
 1135 D1:B68F 23 -  -  -  	inc          HL
 1136 D1:B690 73 -  -  -  	ld           (HL),E
 1137 D1:B691 2B -  -  -  	dec          HL
 1138 D1:B692 E5 -  -  -  	push         HL
 1139 D1:B693 CD BB AC D1 	call         sub_block_enter
 1140 D1:B697 DD 27 FA -  	ld           HL,(IX-6)
 1141 D1:B69A E5 -  -  -  	push         HL
 1142 D1:B69B 3E 00 -  -  	ld           A,0                       ; 0b
 1143 D1:B69D F5 -  -  -  	push         AF
 1144 D1:B69E 21 00 00 00 	ld           HL,0
 1145 D1:B6A2 39 -  -  -  	add          HL,SP
 1146 D1:B6A3 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 1147 D1:B6A8 CD 43 B5 D1 	call         fillByteArray_276
 1148 D1:B6AC E1 -  -  -  	pop          HL
 1149 D1:B6AD ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 1150 D1:B6B2 F9 -  -  -  	ld           SP,HL
 1151 D1:B6B3 DD 27 FA -  	ld           HL,(IX-6)
 1152 D1:B6B6 E5 -  -  -  	push         HL
 1153 D1:B6B7 D1 -  -  -  	pop          DE
 1154 D1:B6B8 C3 C0 B6 D1 	jp           newBase10_end_335
 1155 D1:B6BC 11 00 00 00 	ld           DE,0
 1156 D1:B6C0 -  -  -  -  newBase10_end_335:
 1157 D1:B6C0 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 1158 D1:B6C5 DD E1 -  -  	pop          IX
 1159 D1:B6C7 C9 -  -  -  	ret          
 1160 D1:B6C8 -  -  -  -  displayBase10_343:
 1161 D1:B6C8 DD E5 -  -  	push         IX                        ; push stack_start
 1162 D1:B6CA ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 1163 D1:B6CF F9 -  -  -  	ld           SP,HL
 1164 D1:B6D0 DD 21 0F 00 
              00 -  -  -  	ld           IX,15
 1165 D1:B6D5 DD 39 -  -  	add          IX,SP
 1166 D1:B6D7 21 00 00 00 	ld           HL,0
 1167 D1:B6DB E5 -  -  -  	push         HL
 1168 D1:B6DC 21 00 00 00 	ld           HL,0
 1169 D1:B6E0 E5 -  -  -  	push         HL
 1170 D1:B6E1 -  -  -  -  while_start350:
 1171 D1:B6E1 DD 27 EE -  	ld           HL,(IX-18)
 1172 D1:B6E4 E5 -  -  -  	push         HL
 1173 D1:B6E5 21 05 00 00 	ld           HL,5
 1174 D1:B6E9 D1 -  -  -  	pop          DE
 1175 D1:B6EA EB -  -  -  	ex           DE,HL
 1176 D1:B6EB CD 69 AC D1 	call         int_smaller
 1177 D1:B6EF FE FF -  -  	cp           A,%11111111
 1178 D1:B6F1 C2 A3 B7 D1 	jp           NZ,while_end351
 1179 D1:B6F5 CD BB AC D1 	call         sub_block_enter
 1180 D1:B6F9 CD BB AC D1 	call         sub_block_enter
 1181 D1:B6FD DD 27 F7 -  	ld           HL,(IX-9)
 1182 D1:B700 E5 -  -  -  	push         HL
 1183 D1:B701 DD 27 EE -  	ld           HL,(IX-18)
 1184 D1:B704 C1 -  -  -  	pop          BC
 1185 D1:B705 23 -  -  -  	inc          HL
 1186 D1:B706 23 -  -  -  	inc          HL
 1187 D1:B707 09 -  -  -  	add          HL,BC
 1188 D1:B708 7E -  -  -  	ld           A,(HL)
 1189 D1:B709 F5 -  -  -  	push         AF
 1190 D1:B70A 3E 00 -  -  	ld           A,0
 1191 D1:B70C F5 -  -  -  	push         AF
 1192 D1:B70D E1 -  -  -  	pop          HL
 1193 D1:B70E F1 -  -  -  	pop          AF
 1194 D1:B70F CD 57 AC D1 	call         byte_not_equals
 1195 D1:B713 FE FF -  -  	cp           A,%11111111
 1196 D1:B715 C2 90 B7 D1 	jp           NZ,if_next_361
 1197 D1:B719 CD BB AC D1 	call         sub_block_enter
 1198 D1:B71D DD 27 FD -  	ld           HL,(IX-3)
 1199 D1:B720 E5 -  -  -  	push         HL
 1200 D1:B721 DD 27 EB -  	ld           HL,(IX-21)
 1201 D1:B724 D1 -  -  -  	pop          DE
 1202 D1:B725 19 -  -  -  	add          HL,DE
 1203 D1:B726 E5 -  -  -  	push         HL
 1204 D1:B727 DD 27 FA -  	ld           HL,(IX-6)
 1205 D1:B72A E5 -  -  -  	push         HL
 1206 D1:B72B 21 01 00 00 	ld           HL,1
 1207 D1:B72F E5 -  -  -  	push         HL
 1208 D1:B730 21 05 00 00 	ld           HL,5
 1209 D1:B734 E5 -  -  -  	push         HL
 1210 D1:B735 21 EB CC D1 	ld           HL,number_chars
 1211 D1:B739 E5 -  -  -  	push         HL
 1212 D1:B73A DD 27 F7 -  	ld           HL,(IX-9)
 1213 D1:B73D E5 -  -  -  	push         HL
 1214 D1:B73E DD 27 EE -  	ld           HL,(IX-18)
 1215 D1:B741 C1 -  -  -  	pop          BC
 1216 D1:B742 23 -  -  -  	inc          HL
 1217 D1:B743 23 -  -  -  	inc          HL
 1218 D1:B744 09 -  -  -  	add          HL,BC
 1219 D1:B745 7E -  -  -  	ld           A,(HL)
 1220 D1:B746 F5 -  -  -  	push         AF
 1221 D1:B747 E1 -  -  -  	pop          HL
 1222 D1:B748 2E 05 -  -  	ld           L,5
 1223 D1:B74A ED 6C -  -  	mlt          HL
 1224 D1:B74C 65 -  -  -  	ld           H,L
 1225 D1:B74D E5 -  -  -  	push         HL
 1226 D1:B74E F1 -  -  -  	pop          AF
 1227 D1:B74F E1 -  -  -  	pop          HL
 1228 D1:B750 11 00 00 00 	ld           DE,0
 1229 D1:B754 5F -  -  -  	ld           E,A
 1230 D1:B755 19 -  -  -  	add          HL,DE
 1231 D1:B756 E5 -  -  -  	push         HL
 1232 D1:B757 DD 27 F1 -  	ld           HL,(IX-15)
 1233 D1:B75A E5 -  -  -  	push         HL
 1234 D1:B75B DD 27 F4 -  	ld           HL,(IX-12)
 1235 D1:B75E E5 -  -  -  	push         HL
 1236 D1:B75F 21 00 00 00 	ld           HL,0
 1237 D1:B763 39 -  -  -  	add          HL,SP
 1238 D1:B764 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 1239 D1:B769 CD E0 AF D1 	call         displayBitmap_37
 1240 D1:B76D E1 -  -  -  	pop          HL
 1241 D1:B76E ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 1242 D1:B773 F9 -  -  -  	ld           SP,HL
 1243 D1:B774 21 05 00 00 	ld           HL,5
 1244 D1:B778 E5 -  -  -  	push         HL
 1245 D1:B779 DD 27 F4 -  	ld           HL,(IX-12)
 1246 D1:B77C E5 -  -  -  	push         HL
 1247 D1:B77D D1 -  -  -  	pop          DE
 1248 D1:B77E C1 -  -  -  	pop          BC
 1249 D1:B77F CD 32 AD D1 	call         multiply_int
 1250 D1:B783 E5 -  -  -  	push         HL
 1251 D1:B784 DD 27 EB -  	ld           HL,(IX-21)
 1252 D1:B787 D1 -  -  -  	pop          DE
 1253 D1:B788 19 -  -  -  	add          HL,DE
 1254 D1:B789 DD 2F EB -  	ld           (IX-21),HL
 1255 D1:B78C C3 90 B7 D1 	jp           if_end_360
 1256 D1:B790 -  -  -  -  if_next_361:
 1257 D1:B790 -  -  -  -  if_end_360:
 1258 D1:B790 CD CF AC D1 	call         sub_block_leave
 1259 D1:B794 DD 27 EE -  	ld           HL,(IX-18)
 1260 D1:B797 23 -  -  -  	inc          HL
 1261 D1:B798 DD 2F EE -  	ld           (IX-18),HL
 1262 D1:B79B CD CF AC D1 	call         sub_block_leave
 1263 D1:B79F C3 E1 B6 D1 	jp           while_start350
 1264 D1:B7A3 -  -  -  -  while_end351:
 1265 D1:B7A3 11 00 00 00 	ld           DE,0
 1266 D1:B7A7 -  -  -  -  displayBase10_end_344:
 1267 D1:B7A7 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 1268 D1:B7AC DD E1 -  -  	pop          IX
 1269 D1:B7AE C9 -  -  -  	ret          
 1270 D1:B7AF -  -  -  -  setTile_409:
 1271 D1:B7AF DD E5 -  -  	push         IX                        ; push stack_start
 1272 D1:B7B1 ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 1273 D1:B7B6 F9 -  -  -  	ld           SP,HL
 1274 D1:B7B7 DD 21 09 00 
              00 -  -  -  	ld           IX,9
 1275 D1:B7BC DD 39 -  -  	add          IX,SP
 1276 D1:B7BE DD 27 F7 -  	ld           HL,(IX-9)
 1277 D1:B7C1 E5 -  -  -  	push         HL
 1278 D1:B7C2 DD 27 FA -  	ld           HL,(IX-6)
 1279 D1:B7C5 B7 -  -  -  	or           A,A
 1280 D1:B7C6 11 64 00 00 	ld           DE,100
 1281 D1:B7CA ED 52 -  -  	sbc          HL,DE
 1282 D1:B7CC E5 -  -  -  	push         HL
 1283 D1:B7CD 21 0A 00 00 	ld           HL,10
 1284 D1:B7D1 E5 -  -  -  	push         HL
 1285 D1:B7D2 D1 -  -  -  	pop          DE
 1286 D1:B7D3 C1 -  -  -  	pop          BC
 1287 D1:B7D4 CD 32 AD D1 	call         multiply_int
 1288 D1:B7D8 E5 -  -  -  	push         HL
 1289 D1:B7D9 DD 27 FD -  	ld           HL,(IX-3)
 1290 D1:B7DC B7 -  -  -  	or           A,A
 1291 D1:B7DD 11 64 00 00 	ld           DE,100
 1292 D1:B7E1 ED 52 -  -  	sbc          HL,DE
 1293 D1:B7E3 D1 -  -  -  	pop          DE
 1294 D1:B7E4 19 -  -  -  	add          HL,DE
 1295 D1:B7E5 E5 -  -  -  	push         HL
 1296 D1:B7E6 2A 0A 32 D0 	ld           HL,(globalVars+20)
 1297 D1:B7EA C1 -  -  -  	pop          BC
 1298 D1:B7EB 23 -  -  -  	inc          HL
 1299 D1:B7EC 23 -  -  -  	inc          HL
 1300 D1:B7ED 09 -  -  -  	add          HL,BC
 1301 D1:B7EE F1 -  -  -  	pop          AF
 1302 D1:B7EF 77 -  -  -  	ld           (HL),A
 1303 D1:B7F0 11 00 00 00 	ld           DE,0
 1304 D1:B7F4 -  -  -  -  setTile_end_410:
 1305 D1:B7F4 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 1306 D1:B7F9 DD E1 -  -  	pop          IX
 1307 D1:B7FB C9 -  -  -  	ret          
 1308 D1:B7FC -  -  -  -  getTile_421:
 1309 D1:B7FC DD E5 -  -  	push         IX                        ; push stack_start
 1310 D1:B7FE ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 1311 D1:B803 F9 -  -  -  	ld           SP,HL
 1312 D1:B804 DD 21 06 00 
              00 -  -  -  	ld           IX,6
 1313 D1:B809 DD 39 -  -  	add          IX,SP
 1314 D1:B80B 2A 0A 32 D0 	ld           HL,(globalVars+20)
 1315 D1:B80F E5 -  -  -  	push         HL
 1316 D1:B810 DD 27 FA -  	ld           HL,(IX-6)
 1317 D1:B813 B7 -  -  -  	or           A,A
 1318 D1:B814 11 64 00 00 	ld           DE,100
 1319 D1:B818 ED 52 -  -  	sbc          HL,DE
 1320 D1:B81A E5 -  -  -  	push         HL
 1321 D1:B81B 21 0A 00 00 	ld           HL,10
 1322 D1:B81F E5 -  -  -  	push         HL
 1323 D1:B820 D1 -  -  -  	pop          DE
 1324 D1:B821 C1 -  -  -  	pop          BC
 1325 D1:B822 CD 32 AD D1 	call         multiply_int
 1326 D1:B826 E5 -  -  -  	push         HL
 1327 D1:B827 DD 27 FD -  	ld           HL,(IX-3)
 1328 D1:B82A B7 -  -  -  	or           A,A
 1329 D1:B82B 11 64 00 00 	ld           DE,100
 1330 D1:B82F ED 52 -  -  	sbc          HL,DE
 1331 D1:B831 D1 -  -  -  	pop          DE
 1332 D1:B832 19 -  -  -  	add          HL,DE
 1333 D1:B833 C1 -  -  -  	pop          BC
 1334 D1:B834 23 -  -  -  	inc          HL
 1335 D1:B835 23 -  -  -  	inc          HL
 1336 D1:B836 09 -  -  -  	add          HL,BC
 1337 D1:B837 7E -  -  -  	ld           A,(HL)
 1338 D1:B838 F5 -  -  -  	push         AF
 1339 D1:B839 D1 -  -  -  	pop          DE
 1340 D1:B83A C3 42 B8 D1 	jp           getTile_end_422
 1341 D1:B83E 11 00 00 00 	ld           DE,0
 1342 D1:B842 -  -  -  -  getTile_end_422:
 1343 D1:B842 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 1344 D1:B847 DD E1 -  -  	pop          IX
 1345 D1:B849 C9 -  -  -  	ret          
 1346 D1:B84A -  -  -  -  clearLine_433:
 1347 D1:B84A DD E5 -  -  	push         IX                        ; push stack_start
 1348 D1:B84C ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 1349 D1:B851 F9 -  -  -  	ld           SP,HL
 1350 D1:B852 DD 21 03 00 
              00 -  -  -  	ld           IX,3
 1351 D1:B857 DD 39 -  -  	add          IX,SP
 1352 D1:B859 DD 27 FD -  	ld           HL,(IX-3)
 1353 D1:B85C E5 -  -  -  	push         HL
 1354 D1:B85D -  -  -  -  while_start438:
 1355 D1:B85D DD 27 FD -  	ld           HL,(IX-3)
 1356 D1:B860 E5 -  -  -  	push         HL
 1357 D1:B861 21 64 00 00 	ld           HL,100
 1358 D1:B865 D1 -  -  -  	pop          DE
 1359 D1:B866 EB -  -  -  	ex           DE,HL
 1360 D1:B867 CD 74 AC D1 	call         int_higher
 1361 D1:B86B FE FF -  -  	cp           A,%11111111
 1362 D1:B86D C2 39 B9 D1 	jp           NZ,while_end439
 1363 D1:B871 CD BB AC D1 	call         sub_block_enter
 1364 D1:B875 21 64 00 00 	ld           HL,100
 1365 D1:B879 E5 -  -  -  	push         HL
 1366 D1:B87A -  -  -  -  while_start446:
 1367 D1:B87A DD 27 F7 -  	ld           HL,(IX-9)
 1368 D1:B87D E5 -  -  -  	push         HL
 1369 D1:B87E 21 6E 00 00 	ld           HL,110
 1370 D1:B882 D1 -  -  -  	pop          DE
 1371 D1:B883 EB -  -  -  	ex           DE,HL
 1372 D1:B884 CD 69 AC D1 	call         int_smaller
 1373 D1:B888 FE FF -  -  	cp           A,%11111111
 1374 D1:B88A C2 2A B9 D1 	jp           NZ,while_end447
 1375 D1:B88E CD BB AC D1 	call         sub_block_enter
 1376 D1:B892 CD BB AC D1 	call         sub_block_enter
 1377 D1:B896 DD 27 FD -  	ld           HL,(IX-3)
 1378 D1:B899 E5 -  -  -  	push         HL
 1379 D1:B89A 21 65 00 00 	ld           HL,101
 1380 D1:B89E D1 -  -  -  	pop          DE
 1381 D1:B89F EB -  -  -  	ex           DE,HL
 1382 D1:B8A0 CD 9D AC D1 	call         int_equals
 1383 D1:B8A4 FE FF -  -  	cp           A,%11111111
 1384 D1:B8A6 C2 D3 B8 D1 	jp           NZ,if_next_456
 1385 D1:B8AA CD BB AC D1 	call         sub_block_enter
 1386 D1:B8AE DD 27 F7 -  	ld           HL,(IX-9)
 1387 D1:B8B1 E5 -  -  -  	push         HL
 1388 D1:B8B2 DD 27 FD -  	ld           HL,(IX-3)
 1389 D1:B8B5 2B -  -  -  	dec          HL
 1390 D1:B8B6 E5 -  -  -  	push         HL
 1391 D1:B8B7 3E 00 -  -  	ld           A,0                       ; 0b
 1392 D1:B8B9 F5 -  -  -  	push         AF
 1393 D1:B8BA 21 00 00 00 	ld           HL,0
 1394 D1:B8BE 39 -  -  -  	add          HL,SP
 1395 D1:B8BF ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 1396 D1:B8C4 CD AF B7 D1 	call         setTile_409
 1397 D1:B8C8 E1 -  -  -  	pop          HL
 1398 D1:B8C9 ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 1399 D1:B8CE F9 -  -  -  	ld           SP,HL
 1400 D1:B8CF C3 17 B9 D1 	jp           if_end_455
 1401 D1:B8D3 -  -  -  -  if_next_456:
 1402 D1:B8D3 CD BB AC D1 	call         sub_block_enter
 1403 D1:B8D7 DD 27 F7 -  	ld           HL,(IX-9)
 1404 D1:B8DA E5 -  -  -  	push         HL
 1405 D1:B8DB DD 27 FD -  	ld           HL,(IX-3)
 1406 D1:B8DE E5 -  -  -  	push         HL
 1407 D1:B8DF CD BB AC D1 	call         sub_block_enter
 1408 D1:B8E3 DD 27 F7 -  	ld           HL,(IX-9)
 1409 D1:B8E6 E5 -  -  -  	push         HL
 1410 D1:B8E7 DD 27 FD -  	ld           HL,(IX-3)
 1411 D1:B8EA 2B -  -  -  	dec          HL
 1412 D1:B8EB E5 -  -  -  	push         HL
 1413 D1:B8EC 21 00 00 00 	ld           HL,0
 1414 D1:B8F0 39 -  -  -  	add          HL,SP
 1415 D1:B8F1 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 1416 D1:B8F6 CD FC B7 D1 	call         getTile_421
 1417 D1:B8FA E1 -  -  -  	pop          HL
 1418 D1:B8FB ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 1419 D1:B900 F9 -  -  -  	ld           SP,HL
 1420 D1:B901 D5 -  -  -  	push         DE
 1421 D1:B902 21 00 00 00 	ld           HL,0
 1422 D1:B906 39 -  -  -  	add          HL,SP
 1423 D1:B907 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 1424 D1:B90C CD AF B7 D1 	call         setTile_409
 1425 D1:B910 E1 -  -  -  	pop          HL
 1426 D1:B911 ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 1427 D1:B916 F9 -  -  -  	ld           SP,HL
 1428 D1:B917 -  -  -  -  if_end_455:
 1429 D1:B917 CD CF AC D1 	call         sub_block_leave
 1430 D1:B91B DD 27 F7 -  	ld           HL,(IX-9)
 1431 D1:B91E 23 -  -  -  	inc          HL
 1432 D1:B91F DD 2F F7 -  	ld           (IX-9),HL
 1433 D1:B922 CD CF AC D1 	call         sub_block_leave
 1434 D1:B926 C3 7A B8 D1 	jp           while_start446
 1435 D1:B92A -  -  -  -  while_end447:
 1436 D1:B92A DD 27 FD -  	ld           HL,(IX-3)
 1437 D1:B92D 2B -  -  -  	dec          HL
 1438 D1:B92E DD 2F FD -  	ld           (IX-3),HL
 1439 D1:B931 CD CF AC D1 	call         sub_block_leave
 1440 D1:B935 C3 5D B8 D1 	jp           while_start438
 1441 D1:B939 -  -  -  -  while_end439:
 1442 D1:B939 11 00 00 00 	ld           DE,0
 1443 D1:B93D -  -  -  -  clearLine_end_434:
 1444 D1:B93D ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 1445 D1:B942 DD E1 -  -  	pop          IX
 1446 D1:B944 C9 -  -  -  	ret          
 1447 D1:B945 -  -  -  -  checkClearLines_475:
 1448 D1:B945 DD E5 -  -  	push         IX                        ; push stack_start
 1449 D1:B947 ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 1450 D1:B94C F9 -  -  -  	ld           SP,HL
 1451 D1:B94D DD 21 00 00 
              00 -  -  -  	ld           IX,0
 1452 D1:B952 DD 39 -  -  	add          IX,SP
 1453 D1:B954 3E 00 -  -  	ld           A,0                       ; 0b
 1454 D1:B956 F5 -  -  -  	push         AF
 1455 D1:B957 21 64 00 00 	ld           HL,100
 1456 D1:B95B E5 -  -  -  	push         HL
 1457 D1:B95C -  -  -  -  while_start482:
 1458 D1:B95C DD 27 FA -  	ld           HL,(IX-6)
 1459 D1:B95F E5 -  -  -  	push         HL
 1460 D1:B960 21 78 00 00 	ld           HL,120
 1461 D1:B964 D1 -  -  -  	pop          DE
 1462 D1:B965 EB -  -  -  	ex           DE,HL
 1463 D1:B966 CD 69 AC D1 	call         int_smaller
 1464 D1:B96A FE FF -  -  	cp           A,%11111111
 1465 D1:B96C C2 27 BA D1 	jp           NZ,while_end483
 1466 D1:B970 CD BB AC D1 	call         sub_block_enter
 1467 D1:B974 21 64 00 00 	ld           HL,100
 1468 D1:B978 E5 -  -  -  	push         HL
 1469 D1:B979 3E FF -  -  	ld           A,%11111111
 1470 D1:B97B F5 -  -  -  	push         AF
 1471 D1:B97C -  -  -  -  while_start492:
 1472 D1:B97C DD 27 F7 -  	ld           HL,(IX-9)
 1473 D1:B97F E5 -  -  -  	push         HL
 1474 D1:B980 21 6E 00 00 	ld           HL,110
 1475 D1:B984 D1 -  -  -  	pop          DE
 1476 D1:B985 EB -  -  -  	ex           DE,HL
 1477 D1:B986 CD 69 AC D1 	call         int_smaller
 1478 D1:B98A FE FF -  -  	cp           A,%11111111
 1479 D1:B98C C2 D9 B9 D1 	jp           NZ,while_end493
 1480 D1:B990 CD BB AC D1 	call         sub_block_enter
 1481 D1:B994 CD BB AC D1 	call         sub_block_enter
 1482 D1:B998 DD 27 F7 -  	ld           HL,(IX-9)
 1483 D1:B99B E5 -  -  -  	push         HL
 1484 D1:B99C DD 27 FA -  	ld           HL,(IX-6)
 1485 D1:B99F E5 -  -  -  	push         HL
 1486 D1:B9A0 21 00 00 00 	ld           HL,0
 1487 D1:B9A4 39 -  -  -  	add          HL,SP
 1488 D1:B9A5 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 1489 D1:B9AA CD FC B7 D1 	call         getTile_421
 1490 D1:B9AE E1 -  -  -  	pop          HL
 1491 D1:B9AF ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 1492 D1:B9B4 F9 -  -  -  	ld           SP,HL
 1493 D1:B9B5 D5 -  -  -  	push         DE
 1494 D1:B9B6 3E 00 -  -  	ld           A,0
 1495 D1:B9B8 F5 -  -  -  	push         AF
 1496 D1:B9B9 E1 -  -  -  	pop          HL
 1497 D1:B9BA F1 -  -  -  	pop          AF
 1498 D1:B9BB CD 57 AC D1 	call         byte_not_equals
 1499 D1:B9BF F5 -  -  -  	push         AF
 1500 D1:B9C0 DD 27 F4 -  	ld           HL,(IX-12)
 1501 D1:B9C3 F1 -  -  -  	pop          AF
 1502 D1:B9C4 A4 -  -  -  	and          A,H
 1503 D1:B9C5 F5 -  -  -  	push         AF
 1504 D1:B9C6 E1 -  -  -  	pop          HL
 1505 D1:B9C7 DD 2F F4 -  	ld           (IX-12),HL
 1506 D1:B9CA DD 27 F7 -  	ld           HL,(IX-9)
 1507 D1:B9CD 23 -  -  -  	inc          HL
 1508 D1:B9CE DD 2F F7 -  	ld           (IX-9),HL
 1509 D1:B9D1 CD CF AC D1 	call         sub_block_leave
 1510 D1:B9D5 C3 7C B9 D1 	jp           while_start492
 1511 D1:B9D9 -  -  -  -  while_end493:
 1512 D1:B9D9 CD BB AC D1 	call         sub_block_enter
 1513 D1:B9DD DD 27 F4 -  	ld           HL,(IX-12)
 1514 D1:B9E0 E5 -  -  -  	push         HL
 1515 D1:B9E1 F1 -  -  -  	pop          AF
 1516 D1:B9E2 FE FF -  -  	cp           A,%11111111
 1517 D1:B9E4 C2 14 BA D1 	jp           NZ,if_next_507
 1518 D1:B9E8 CD BB AC D1 	call         sub_block_enter
 1519 D1:B9EC DD 27 FA -  	ld           HL,(IX-6)
 1520 D1:B9EF E5 -  -  -  	push         HL
 1521 D1:B9F0 21 00 00 00 	ld           HL,0
 1522 D1:B9F4 39 -  -  -  	add          HL,SP
 1523 D1:B9F5 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 1524 D1:B9FA CD 4A B8 D1 	call         clearLine_433
 1525 D1:B9FE E1 -  -  -  	pop          HL
 1526 D1:B9FF ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 1527 D1:BA04 F9 -  -  -  	ld           SP,HL
 1528 D1:BA05 DD 27 FD -  	ld           HL,(IX-3)
 1529 D1:BA08 E5 -  -  -  	push         HL
 1530 D1:BA09 F1 -  -  -  	pop          AF
 1531 D1:BA0A 3C -  -  -  	inc          A
 1532 D1:BA0B F5 -  -  -  	push         AF
 1533 D1:BA0C E1 -  -  -  	pop          HL
 1534 D1:BA0D DD 2F FD -  	ld           (IX-3),HL
 1535 D1:BA10 C3 14 BA D1 	jp           if_end_506
 1536 D1:BA14 -  -  -  -  if_next_507:
 1537 D1:BA14 -  -  -  -  if_end_506:
 1538 D1:BA14 CD CF AC D1 	call         sub_block_leave
 1539 D1:BA18 DD 27 FA -  	ld           HL,(IX-6)
 1540 D1:BA1B 23 -  -  -  	inc          HL
 1541 D1:BA1C DD 2F FA -  	ld           (IX-6),HL
 1542 D1:BA1F CD CF AC D1 	call         sub_block_leave
 1543 D1:BA23 C3 5C B9 D1 	jp           while_start482
 1544 D1:BA27 -  -  -  -  while_end483:
 1545 D1:BA27 CD BB AC D1 	call         sub_block_enter
 1546 D1:BA2B DD 27 FD -  	ld           HL,(IX-3)
 1547 D1:BA2E E5 -  -  -  	push         HL
 1548 D1:BA2F 3E 01 -  -  	ld           A,1
 1549 D1:BA31 F5 -  -  -  	push         AF
 1550 D1:BA32 E1 -  -  -  	pop          HL
 1551 D1:BA33 F1 -  -  -  	pop          AF
 1552 D1:BA34 CD 4B AC D1 	call         byte_equals
 1553 D1:BA38 FE FF -  -  	cp           A,%11111111
 1554 D1:BA3A C2 7B BA D1 	jp           NZ,if_next_519
 1555 D1:BA3E CD BB AC D1 	call         sub_block_enter
 1556 D1:BA42 2A 07 32 D0 	ld           HL,(globalVars+17)
 1557 D1:BA46 E5 -  -  -  	push         HL
 1558 D1:BA47 11 00 00 00 	ld           DE,0
 1559 D1:BA4B 21 05 32 D0 	ld           HL,globalVars+15
 1560 D1:BA4F 56 -  -  -  	ld           D,(HL)
 1561 D1:BA50 23 -  -  -  	inc          HL
 1562 D1:BA51 5E -  -  -  	ld           E,(HL)
 1563 D1:BA52 D5 -  -  -  	push         DE
 1564 D1:BA53 E1 -  -  -  	pop          HL
 1565 D1:BA54 23 -  -  -  	inc          HL
 1566 D1:BA55 E5 -  -  -  	push         HL
 1567 D1:BA56 21 28 00 00 	ld           HL,40
 1568 D1:BA5A E5 -  -  -  	push         HL
 1569 D1:BA5B D1 -  -  -  	pop          DE
 1570 D1:BA5C C1 -  -  -  	pop          BC
 1571 D1:BA5D CD 32 AD D1 	call         multiply_int
 1572 D1:BA61 E5 -  -  -  	push         HL
 1573 D1:BA62 21 00 00 00 	ld           HL,0
 1574 D1:BA66 39 -  -  -  	add          HL,SP
 1575 D1:BA67 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 1576 D1:BA6C CD A2 B5 D1 	call         add_295
 1577 D1:BA70 E1 -  -  -  	pop          HL
 1578 D1:BA71 ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 1579 D1:BA76 F9 -  -  -  	ld           SP,HL
 1580 D1:BA77 C3 6B BB D1 	jp           if_end_518
 1581 D1:BA7B -  -  -  -  if_next_519:
 1582 D1:BA7B DD 27 FD -  	ld           HL,(IX-3)
 1583 D1:BA7E E5 -  -  -  	push         HL
 1584 D1:BA7F 3E 02 -  -  	ld           A,2
 1585 D1:BA81 F5 -  -  -  	push         AF
 1586 D1:BA82 E1 -  -  -  	pop          HL
 1587 D1:BA83 F1 -  -  -  	pop          AF
 1588 D1:BA84 CD 4B AC D1 	call         byte_equals
 1589 D1:BA88 FE FF -  -  	cp           A,%11111111
 1590 D1:BA8A C2 CB BA D1 	jp           NZ,elif_next_526
 1591 D1:BA8E CD BB AC D1 	call         sub_block_enter
 1592 D1:BA92 2A 07 32 D0 	ld           HL,(globalVars+17)
 1593 D1:BA96 E5 -  -  -  	push         HL
 1594 D1:BA97 11 00 00 00 	ld           DE,0
 1595 D1:BA9B 21 05 32 D0 	ld           HL,globalVars+15
 1596 D1:BA9F 56 -  -  -  	ld           D,(HL)
 1597 D1:BAA0 23 -  -  -  	inc          HL
 1598 D1:BAA1 5E -  -  -  	ld           E,(HL)
 1599 D1:BAA2 D5 -  -  -  	push         DE
 1600 D1:BAA3 E1 -  -  -  	pop          HL
 1601 D1:BAA4 23 -  -  -  	inc          HL
 1602 D1:BAA5 E5 -  -  -  	push         HL
 1603 D1:BAA6 21 64 00 00 	ld           HL,100
 1604 D1:BAAA E5 -  -  -  	push         HL
 1605 D1:BAAB D1 -  -  -  	pop          DE
 1606 D1:BAAC C1 -  -  -  	pop          BC
 1607 D1:BAAD CD 32 AD D1 	call         multiply_int
 1608 D1:BAB1 E5 -  -  -  	push         HL
 1609 D1:BAB2 21 00 00 00 	ld           HL,0
 1610 D1:BAB6 39 -  -  -  	add          HL,SP
 1611 D1:BAB7 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 1612 D1:BABC CD A2 B5 D1 	call         add_295
 1613 D1:BAC0 E1 -  -  -  	pop          HL
 1614 D1:BAC1 ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 1615 D1:BAC6 F9 -  -  -  	ld           SP,HL
 1616 D1:BAC7 C3 6B BB D1 	jp           if_end_518
 1617 D1:BACB -  -  -  -  elif_next_526:
 1618 D1:BACB DD 27 FD -  	ld           HL,(IX-3)
 1619 D1:BACE E5 -  -  -  	push         HL
 1620 D1:BACF 3E 03 -  -  	ld           A,3
 1621 D1:BAD1 F5 -  -  -  	push         AF
 1622 D1:BAD2 E1 -  -  -  	pop          HL
 1623 D1:BAD3 F1 -  -  -  	pop          AF
 1624 D1:BAD4 CD 4B AC D1 	call         byte_equals
 1625 D1:BAD8 FE FF -  -  	cp           A,%11111111
 1626 D1:BADA C2 1B BB D1 	jp           NZ,elif_next_533
 1627 D1:BADE CD BB AC D1 	call         sub_block_enter
 1628 D1:BAE2 2A 07 32 D0 	ld           HL,(globalVars+17)
 1629 D1:BAE6 E5 -  -  -  	push         HL
 1630 D1:BAE7 11 00 00 00 	ld           DE,0
 1631 D1:BAEB 21 05 32 D0 	ld           HL,globalVars+15
 1632 D1:BAEF 56 -  -  -  	ld           D,(HL)
 1633 D1:BAF0 23 -  -  -  	inc          HL
 1634 D1:BAF1 5E -  -  -  	ld           E,(HL)
 1635 D1:BAF2 D5 -  -  -  	push         DE
 1636 D1:BAF3 E1 -  -  -  	pop          HL
 1637 D1:BAF4 23 -  -  -  	inc          HL
 1638 D1:BAF5 E5 -  -  -  	push         HL
 1639 D1:BAF6 21 2C 01 00 	ld           HL,300
 1640 D1:BAFA E5 -  -  -  	push         HL
 1641 D1:BAFB D1 -  -  -  	pop          DE
 1642 D1:BAFC C1 -  -  -  	pop          BC
 1643 D1:BAFD CD 32 AD D1 	call         multiply_int
 1644 D1:BB01 E5 -  -  -  	push         HL
 1645 D1:BB02 21 00 00 00 	ld           HL,0
 1646 D1:BB06 39 -  -  -  	add          HL,SP
 1647 D1:BB07 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 1648 D1:BB0C CD A2 B5 D1 	call         add_295
 1649 D1:BB10 E1 -  -  -  	pop          HL
 1650 D1:BB11 ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 1651 D1:BB16 F9 -  -  -  	ld           SP,HL
 1652 D1:BB17 C3 6B BB D1 	jp           if_end_518
 1653 D1:BB1B -  -  -  -  elif_next_533:
 1654 D1:BB1B DD 27 FD -  	ld           HL,(IX-3)
 1655 D1:BB1E E5 -  -  -  	push         HL
 1656 D1:BB1F 3E 04 -  -  	ld           A,4
 1657 D1:BB21 F5 -  -  -  	push         AF
 1658 D1:BB22 E1 -  -  -  	pop          HL
 1659 D1:BB23 F1 -  -  -  	pop          AF
 1660 D1:BB24 CD 4B AC D1 	call         byte_equals
 1661 D1:BB28 FE FF -  -  	cp           A,%11111111
 1662 D1:BB2A C2 6B BB D1 	jp           NZ,elif_next_540
 1663 D1:BB2E CD BB AC D1 	call         sub_block_enter
 1664 D1:BB32 2A 07 32 D0 	ld           HL,(globalVars+17)
 1665 D1:BB36 E5 -  -  -  	push         HL
 1666 D1:BB37 11 00 00 00 	ld           DE,0
 1667 D1:BB3B 21 05 32 D0 	ld           HL,globalVars+15
 1668 D1:BB3F 56 -  -  -  	ld           D,(HL)
 1669 D1:BB40 23 -  -  -  	inc          HL
 1670 D1:BB41 5E -  -  -  	ld           E,(HL)
 1671 D1:BB42 D5 -  -  -  	push         DE
 1672 D1:BB43 E1 -  -  -  	pop          HL
 1673 D1:BB44 23 -  -  -  	inc          HL
 1674 D1:BB45 E5 -  -  -  	push         HL
 1675 D1:BB46 21 B0 04 00 	ld           HL,1200
 1676 D1:BB4A E5 -  -  -  	push         HL
 1677 D1:BB4B D1 -  -  -  	pop          DE
 1678 D1:BB4C C1 -  -  -  	pop          BC
 1679 D1:BB4D CD 32 AD D1 	call         multiply_int
 1680 D1:BB51 E5 -  -  -  	push         HL
 1681 D1:BB52 21 00 00 00 	ld           HL,0
 1682 D1:BB56 39 -  -  -  	add          HL,SP
 1683 D1:BB57 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 1684 D1:BB5C CD A2 B5 D1 	call         add_295
 1685 D1:BB60 E1 -  -  -  	pop          HL
 1686 D1:BB61 ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 1687 D1:BB66 F9 -  -  -  	ld           SP,HL
 1688 D1:BB67 C3 6B BB D1 	jp           if_end_518
 1689 D1:BB6B -  -  -  -  elif_next_540:
 1690 D1:BB6B -  -  -  -  if_end_518:
 1691 D1:BB6B CD CF AC D1 	call         sub_block_leave
 1692 D1:BB6F 11 00 00 00 	ld           DE,0
 1693 D1:BB73 -  -  -  -  checkClearLines_end_476:
 1694 D1:BB73 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 1695 D1:BB78 DD E1 -  -  	pop          IX
 1696 D1:BB7A C9 -  -  -  	ret          
 1697 D1:BB7B -  -  -  -  checkBlock_546:
 1698 D1:BB7B DD E5 -  -  	push         IX                        ; push stack_start
 1699 D1:BB7D ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 1700 D1:BB82 F9 -  -  -  	ld           SP,HL
 1701 D1:BB83 DD 21 06 00 
              00 -  -  -  	ld           IX,6
 1702 D1:BB88 DD 39 -  -  	add          IX,SP
 1703 D1:BB8A CD BB AC D1 	call         sub_block_enter
 1704 D1:BB8E DD 27 FD -  	ld           HL,(IX-3)
 1705 D1:BB91 E5 -  -  -  	push         HL
 1706 D1:BB92 21 6D 00 00 	ld           HL,109
 1707 D1:BB96 D1 -  -  -  	pop          DE
 1708 D1:BB97 EB -  -  -  	ex           DE,HL
 1709 D1:BB98 CD 74 AC D1 	call         int_higher
 1710 D1:BB9C F5 -  -  -  	push         AF
 1711 D1:BB9D DD 27 FD -  	ld           HL,(IX-3)
 1712 D1:BBA0 E5 -  -  -  	push         HL
 1713 D1:BBA1 21 64 00 00 	ld           HL,100
 1714 D1:BBA5 D1 -  -  -  	pop          DE
 1715 D1:BBA6 EB -  -  -  	ex           DE,HL
 1716 D1:BBA7 CD 69 AC D1 	call         int_smaller
 1717 D1:BBAB F5 -  -  -  	push         AF
 1718 D1:BBAC E1 -  -  -  	pop          HL
 1719 D1:BBAD F1 -  -  -  	pop          AF
 1720 D1:BBAE B4 -  -  -  	or           A,H
 1721 D1:BBAF F5 -  -  -  	push         AF
 1722 D1:BBB0 DD 27 FA -  	ld           HL,(IX-6)
 1723 D1:BBB3 E5 -  -  -  	push         HL
 1724 D1:BBB4 21 77 00 00 	ld           HL,119
 1725 D1:BBB8 D1 -  -  -  	pop          DE
 1726 D1:BBB9 EB -  -  -  	ex           DE,HL
 1727 D1:BBBA CD 74 AC D1 	call         int_higher
 1728 D1:BBBE F5 -  -  -  	push         AF
 1729 D1:BBBF E1 -  -  -  	pop          HL
 1730 D1:BBC0 F1 -  -  -  	pop          AF
 1731 D1:BBC1 B4 -  -  -  	or           A,H
 1732 D1:BBC2 FE FF -  -  	cp           A,%11111111
 1733 D1:BBC4 C2 DA BB D1 	jp           NZ,if_next_559
 1734 D1:BBC8 3E FF -  -  	ld           A,%11111111
 1735 D1:BBCA F5 -  -  -  	push         AF
 1736 D1:BBCB D1 -  -  -  	pop          DE
 1737 D1:BBCC 06 01 -  -  	ld           B,1
 1738 D1:BBCE CD DE AC D1 	call         multi_block_leave
 1739 D1:BBD2 C3 13 BC D1 	jp           checkBlock_end_547
 1740 D1:BBD6 C3 DA BB D1 	jp           if_end_558
 1741 D1:BBDA -  -  -  -  if_next_559:
 1742 D1:BBDA -  -  -  -  if_end_558:
 1743 D1:BBDA CD CF AC D1 	call         sub_block_leave
 1744 D1:BBDE CD BB AC D1 	call         sub_block_enter
 1745 D1:BBE2 DD 27 FD -  	ld           HL,(IX-3)
 1746 D1:BBE5 E5 -  -  -  	push         HL
 1747 D1:BBE6 DD 27 FA -  	ld           HL,(IX-6)
 1748 D1:BBE9 E5 -  -  -  	push         HL
 1749 D1:BBEA 21 00 00 00 	ld           HL,0
 1750 D1:BBEE 39 -  -  -  	add          HL,SP
 1751 D1:BBEF ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 1752 D1:BBF4 CD FC B7 D1 	call         getTile_421
 1753 D1:BBF8 E1 -  -  -  	pop          HL
 1754 D1:BBF9 ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 1755 D1:BBFE F9 -  -  -  	ld           SP,HL
 1756 D1:BBFF D5 -  -  -  	push         DE
 1757 D1:BC00 3E 00 -  -  	ld           A,0
 1758 D1:BC02 F5 -  -  -  	push         AF
 1759 D1:BC03 E1 -  -  -  	pop          HL
 1760 D1:BC04 F1 -  -  -  	pop          AF
 1761 D1:BC05 CD 57 AC D1 	call         byte_not_equals
 1762 D1:BC09 F5 -  -  -  	push         AF
 1763 D1:BC0A D1 -  -  -  	pop          DE
 1764 D1:BC0B C3 13 BC D1 	jp           checkBlock_end_547
 1765 D1:BC0F 11 00 00 00 	ld           DE,0
 1766 D1:BC13 -  -  -  -  checkBlock_end_547:
 1767 D1:BC13 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 1768 D1:BC18 DD E1 -  -  	pop          IX
 1769 D1:BC1A C9 -  -  -  	ret          
 1770 D1:BC1B -  -  -  -  checkHitBox_565:
 1771 D1:BC1B DD E5 -  -  	push         IX                        ; push stack_start
 1772 D1:BC1D ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 1773 D1:BC22 F9 -  -  -  	ld           SP,HL
 1774 D1:BC23 DD 21 09 00 
              00 -  -  -  	ld           IX,9
 1775 D1:BC28 DD 39 -  -  	add          IX,SP
 1776 D1:BC2A 21 00 00 00 	ld           HL,0
 1777 D1:BC2E E5 -  -  -  	push         HL
 1778 D1:BC2F 21 00 00 00 	ld           HL,0
 1779 D1:BC33 E5 -  -  -  	push         HL
 1780 D1:BC34 -  -  -  -  while_start572:
 1781 D1:BC34 DD 27 F4 -  	ld           HL,(IX-12)
 1782 D1:BC37 E5 -  -  -  	push         HL
 1783 D1:BC38 21 04 00 00 	ld           HL,4
 1784 D1:BC3C D1 -  -  -  	pop          DE
 1785 D1:BC3D EB -  -  -  	ex           DE,HL
 1786 D1:BC3E CD 69 AC D1 	call         int_smaller
 1787 D1:BC42 FE FF -  -  	cp           A,%11111111
 1788 D1:BC44 C2 01 BD D1 	jp           NZ,while_end573
 1789 D1:BC48 CD BB AC D1 	call         sub_block_enter
 1790 D1:BC4C 21 00 00 00 	ld           HL,0
 1791 D1:BC50 E5 -  -  -  	push         HL
 1792 D1:BC51 -  -  -  -  while_start580:
 1793 D1:BC51 DD 27 EE -  	ld           HL,(IX-18)
 1794 D1:BC54 E5 -  -  -  	push         HL
 1795 D1:BC55 21 04 00 00 	ld           HL,4
 1796 D1:BC59 D1 -  -  -  	pop          DE
 1797 D1:BC5A EB -  -  -  	ex           DE,HL
 1798 D1:BC5B CD 69 AC D1 	call         int_smaller
 1799 D1:BC5F FE FF -  -  	cp           A,%11111111
 1800 D1:BC61 C2 F2 BC D1 	jp           NZ,while_end581
 1801 D1:BC65 CD BB AC D1 	call         sub_block_enter
 1802 D1:BC69 CD BB AC D1 	call         sub_block_enter
 1803 D1:BC6D DD 27 F7 -  	ld           HL,(IX-9)
 1804 D1:BC70 E5 -  -  -  	push         HL
 1805 D1:BC71 DD 27 F1 -  	ld           HL,(IX-15)
 1806 D1:BC74 E5 -  -  -  	push         HL
 1807 D1:BC75 D1 -  -  -  	pop          DE
 1808 D1:BC76 E1 -  -  -  	pop          HL
 1809 D1:BC77 01 00 00 00 	ld           BC,0
 1810 D1:BC7B 42 -  -  -  	ld           B,D
 1811 D1:BC7C 4B -  -  -  	ld           C,E
 1812 D1:BC7D 19 -  -  -  	add          HL,DE
 1813 D1:BC7E 7E -  -  -  	ld           A,(HL)
 1814 D1:BC7F FE FF -  -  	cp           A,%11111111
 1815 D1:BC81 C2 D8 BC D1 	jp           NZ,if_next_592
 1816 D1:BC85 CD BB AC D1 	call         sub_block_enter
 1817 D1:BC89 CD BB AC D1 	call         sub_block_enter
 1818 D1:BC8D DD 27 FD -  	ld           HL,(IX-3)
 1819 D1:BC90 E5 -  -  -  	push         HL
 1820 D1:BC91 DD 27 EE -  	ld           HL,(IX-18)
 1821 D1:BC94 D1 -  -  -  	pop          DE
 1822 D1:BC95 19 -  -  -  	add          HL,DE
 1823 D1:BC96 E5 -  -  -  	push         HL
 1824 D1:BC97 DD 27 FA -  	ld           HL,(IX-6)
 1825 D1:BC9A E5 -  -  -  	push         HL
 1826 D1:BC9B DD 27 F4 -  	ld           HL,(IX-12)
 1827 D1:BC9E D1 -  -  -  	pop          DE
 1828 D1:BC9F 19 -  -  -  	add          HL,DE
 1829 D1:BCA0 E5 -  -  -  	push         HL
 1830 D1:BCA1 21 00 00 00 	ld           HL,0
 1831 D1:BCA5 39 -  -  -  	add          HL,SP
 1832 D1:BCA6 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 1833 D1:BCAB CD 7B BB D1 	call         checkBlock_546
 1834 D1:BCAF E1 -  -  -  	pop          HL
 1835 D1:BCB0 ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 1836 D1:BCB5 F9 -  -  -  	ld           SP,HL
 1837 D1:BCB6 D5 -  -  -  	push         DE
 1838 D1:BCB7 F1 -  -  -  	pop          AF
 1839 D1:BCB8 FE FF -  -  	cp           A,%11111111
 1840 D1:BCBA C2 D0 BC D1 	jp           NZ,if_next_601
 1841 D1:BCBE 3E 00 -  -  	ld           A,%00000000
 1842 D1:BCC0 F5 -  -  -  	push         AF
 1843 D1:BCC1 D1 -  -  -  	pop          DE
 1844 D1:BCC2 06 04 -  -  	ld           B,4
 1845 D1:BCC4 CD DE AC D1 	call         multi_block_leave
 1846 D1:BCC8 C3 0D BD D1 	jp           checkHitBox_end_566
 1847 D1:BCCC C3 D0 BC D1 	jp           if_end_600
 1848 D1:BCD0 -  -  -  -  if_next_601:
 1849 D1:BCD0 -  -  -  -  if_end_600:
 1850 D1:BCD0 CD CF AC D1 	call         sub_block_leave
 1851 D1:BCD4 C3 D8 BC D1 	jp           if_end_591
 1852 D1:BCD8 -  -  -  -  if_next_592:
 1853 D1:BCD8 -  -  -  -  if_end_591:
 1854 D1:BCD8 CD CF AC D1 	call         sub_block_leave
 1855 D1:BCDC DD 27 EE -  	ld           HL,(IX-18)
 1856 D1:BCDF 23 -  -  -  	inc          HL
 1857 D1:BCE0 DD 2F EE -  	ld           (IX-18),HL
 1858 D1:BCE3 DD 27 F1 -  	ld           HL,(IX-15)
 1859 D1:BCE6 23 -  -  -  	inc          HL
 1860 D1:BCE7 DD 2F F1 -  	ld           (IX-15),HL
 1861 D1:BCEA CD CF AC D1 	call         sub_block_leave
 1862 D1:BCEE C3 51 BC D1 	jp           while_start580
 1863 D1:BCF2 -  -  -  -  while_end581:
 1864 D1:BCF2 DD 27 F4 -  	ld           HL,(IX-12)
 1865 D1:BCF5 23 -  -  -  	inc          HL
 1866 D1:BCF6 DD 2F F4 -  	ld           (IX-12),HL
 1867 D1:BCF9 CD CF AC D1 	call         sub_block_leave
 1868 D1:BCFD C3 34 BC D1 	jp           while_start572
 1869 D1:BD01 -  -  -  -  while_end573:
 1870 D1:BD01 3E FF -  -  	ld           A,%11111111
 1871 D1:BD03 F5 -  -  -  	push         AF
 1872 D1:BD04 D1 -  -  -  	pop          DE
 1873 D1:BD05 C3 0D BD D1 	jp           checkHitBox_end_566
 1874 D1:BD09 11 00 00 00 	ld           DE,0
 1875 D1:BD0D -  -  -  -  checkHitBox_end_566:
 1876 D1:BD0D ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 1877 D1:BD12 DD E1 -  -  	pop          IX
 1878 D1:BD14 C9 -  -  -  	ret          
 1879 D1:BD15 -  -  -  -  placeBlock_614:
 1880 D1:BD15 DD E5 -  -  	push         IX                        ; push stack_start
 1881 D1:BD17 ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 1882 D1:BD1C F9 -  -  -  	ld           SP,HL
 1883 D1:BD1D DD 21 0C 00 
              00 -  -  -  	ld           IX,12
 1884 D1:BD22 DD 39 -  -  	add          IX,SP
 1885 D1:BD24 21 00 00 00 	ld           HL,0
 1886 D1:BD28 E5 -  -  -  	push         HL
 1887 D1:BD29 21 00 00 00 	ld           HL,0
 1888 D1:BD2D E5 -  -  -  	push         HL
 1889 D1:BD2E -  -  -  -  while_start621:
 1890 D1:BD2E DD 27 F1 -  	ld           HL,(IX-15)
 1891 D1:BD31 E5 -  -  -  	push         HL
 1892 D1:BD32 21 04 00 00 	ld           HL,4
 1893 D1:BD36 D1 -  -  -  	pop          DE
 1894 D1:BD37 EB -  -  -  	ex           DE,HL
 1895 D1:BD38 CD 69 AC D1 	call         int_smaller
 1896 D1:BD3C FE FF -  -  	cp           A,%11111111
 1897 D1:BD3E C2 17 BE D1 	jp           NZ,while_end622
 1898 D1:BD42 CD BB AC D1 	call         sub_block_enter
 1899 D1:BD46 21 00 00 00 	ld           HL,0
 1900 D1:BD4A E5 -  -  -  	push         HL
 1901 D1:BD4B -  -  -  -  while_start629:
 1902 D1:BD4B DD 27 EB -  	ld           HL,(IX-21)
 1903 D1:BD4E E5 -  -  -  	push         HL
 1904 D1:BD4F 21 04 00 00 	ld           HL,4
 1905 D1:BD53 D1 -  -  -  	pop          DE
 1906 D1:BD54 EB -  -  -  	ex           DE,HL
 1907 D1:BD55 CD 69 AC D1 	call         int_smaller
 1908 D1:BD59 FE FF -  -  	cp           A,%11111111
 1909 D1:BD5B C2 08 BE D1 	jp           NZ,while_end630
 1910 D1:BD5F CD BB AC D1 	call         sub_block_enter
 1911 D1:BD63 CD BB AC D1 	call         sub_block_enter
 1912 D1:BD67 DD 27 F7 -  	ld           HL,(IX-9)
 1913 D1:BD6A E5 -  -  -  	push         HL
 1914 D1:BD6B DD 27 EE -  	ld           HL,(IX-18)
 1915 D1:BD6E E5 -  -  -  	push         HL
 1916 D1:BD6F D1 -  -  -  	pop          DE
 1917 D1:BD70 E1 -  -  -  	pop          HL
 1918 D1:BD71 01 00 00 00 	ld           BC,0
 1919 D1:BD75 42 -  -  -  	ld           B,D
 1920 D1:BD76 4B -  -  -  	ld           C,E
 1921 D1:BD77 19 -  -  -  	add          HL,DE
 1922 D1:BD78 7E -  -  -  	ld           A,(HL)
 1923 D1:BD79 FE FF -  -  	cp           A,%11111111
 1924 D1:BD7B C2 EE BD D1 	jp           NZ,if_next_641
 1925 D1:BD7F CD BB AC D1 	call         sub_block_enter
 1926 D1:BD83 DD 27 FA -  	ld           HL,(IX-6)
 1927 D1:BD86 E5 -  -  -  	push         HL
 1928 D1:BD87 DD 27 F1 -  	ld           HL,(IX-15)
 1929 D1:BD8A D1 -  -  -  	pop          DE
 1930 D1:BD8B 19 -  -  -  	add          HL,DE
 1931 D1:BD8C E5 -  -  -  	push         HL
 1932 D1:BD8D 21 00 00 00 	ld           HL,0
 1933 D1:BD91 D1 -  -  -  	pop          DE
 1934 D1:BD92 EB -  -  -  	ex           DE,HL
 1935 D1:BD93 CD 9D AC D1 	call         int_equals
 1936 D1:BD97 FE FF -  -  	cp           A,%11111111
 1937 D1:BD99 C2 B5 BD D1 	jp           NZ,if_next_649
 1938 D1:BD9D 3E 00 -  -  	ld           A,%00000000
 1939 D1:BD9F 32 0D 32 D0 	ld           (globalVars+23),A
 1940 D1:BDA3 3E FF -  -  	ld           A,%11111111
 1941 D1:BDA5 F5 -  -  -  	push         AF
 1942 D1:BDA6 D1 -  -  -  	pop          DE
 1943 D1:BDA7 06 04 -  -  	ld           B,4
 1944 D1:BDA9 CD DE AC D1 	call         multi_block_leave
 1945 D1:BDAD C3 34 BE D1 	jp           placeBlock_end_615
 1946 D1:BDB1 C3 B5 BD D1 	jp           if_end_648
 1947 D1:BDB5 -  -  -  -  if_next_649:
 1948 D1:BDB5 -  -  -  -  if_end_648:
 1949 D1:BDB5 CD CF AC D1 	call         sub_block_leave
 1950 D1:BDB9 CD BB AC D1 	call         sub_block_enter
 1951 D1:BDBD DD 27 FD -  	ld           HL,(IX-3)
 1952 D1:BDC0 E5 -  -  -  	push         HL
 1953 D1:BDC1 DD 27 EB -  	ld           HL,(IX-21)
 1954 D1:BDC4 D1 -  -  -  	pop          DE
 1955 D1:BDC5 19 -  -  -  	add          HL,DE
 1956 D1:BDC6 E5 -  -  -  	push         HL
 1957 D1:BDC7 DD 27 FA -  	ld           HL,(IX-6)
 1958 D1:BDCA E5 -  -  -  	push         HL
 1959 D1:BDCB DD 27 F1 -  	ld           HL,(IX-15)
 1960 D1:BDCE D1 -  -  -  	pop          DE
 1961 D1:BDCF 19 -  -  -  	add          HL,DE
 1962 D1:BDD0 E5 -  -  -  	push         HL
 1963 D1:BDD1 DD 27 F4 -  	ld           HL,(IX-12)
 1964 D1:BDD4 E5 -  -  -  	push         HL
 1965 D1:BDD5 21 00 00 00 	ld           HL,0
 1966 D1:BDD9 39 -  -  -  	add          HL,SP
 1967 D1:BDDA ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 1968 D1:BDDF CD AF B7 D1 	call         setTile_409
 1969 D1:BDE3 E1 -  -  -  	pop          HL
 1970 D1:BDE4 ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 1971 D1:BDE9 F9 -  -  -  	ld           SP,HL
 1972 D1:BDEA C3 EE BD D1 	jp           if_end_640
 1973 D1:BDEE -  -  -  -  if_next_641:
 1974 D1:BDEE -  -  -  -  if_end_640:
 1975 D1:BDEE CD CF AC D1 	call         sub_block_leave
 1976 D1:BDF2 DD 27 EB -  	ld           HL,(IX-21)
 1977 D1:BDF5 23 -  -  -  	inc          HL
 1978 D1:BDF6 DD 2F EB -  	ld           (IX-21),HL
 1979 D1:BDF9 DD 27 EE -  	ld           HL,(IX-18)
 1980 D1:BDFC 23 -  -  -  	inc          HL
 1981 D1:BDFD DD 2F EE -  	ld           (IX-18),HL
 1982 D1:BE00 CD CF AC D1 	call         sub_block_leave
 1983 D1:BE04 C3 4B BD D1 	jp           while_start629
 1984 D1:BE08 -  -  -  -  while_end630:
 1985 D1:BE08 DD 27 F1 -  	ld           HL,(IX-15)
 1986 D1:BE0B 23 -  -  -  	inc          HL
 1987 D1:BE0C DD 2F F1 -  	ld           (IX-15),HL
 1988 D1:BE0F CD CF AC D1 	call         sub_block_leave
 1989 D1:BE13 C3 2E BD D1 	jp           while_start621
 1990 D1:BE17 -  -  -  -  while_end622:
 1991 D1:BE17 CD BB AC D1 	call         sub_block_enter
 1992 D1:BE1B 21 00 00 00 	ld           HL,0
 1993 D1:BE1F 39 -  -  -  	add          HL,SP
 1994 D1:BE20 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 1995 D1:BE25 CD 45 B9 D1 	call         checkClearLines_475
 1996 D1:BE29 E1 -  -  -  	pop          HL
 1997 D1:BE2A ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 1998 D1:BE2F F9 -  -  -  	ld           SP,HL
 1999 D1:BE30 11 00 00 00 	ld           DE,0
 2000 D1:BE34 -  -  -  -  placeBlock_end_615:
 2001 D1:BE34 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 2002 D1:BE39 DD E1 -  -  	pop          IX
 2003 D1:BE3B C9 -  -  -  	ret          
 2004 D1:BE3C -  -  -  -  selectBlock_669:
 2005 D1:BE3C DD E5 -  -  	push         IX                        ; push stack_start
 2006 D1:BE3E ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 2007 D1:BE43 F9 -  -  -  	ld           SP,HL
 2008 D1:BE44 DD 21 00 00 
              00 -  -  -  	ld           IX,0
 2009 D1:BE49 DD 39 -  -  	add          IX,SP
 2010 D1:BE4B CD B7 AD D1 	call         random_number
 2011 D1:BE4F E5 -  -  -  	push         HL
 2012 D1:BE50 3E 07 -  -  	ld           A,7
 2013 D1:BE52 F5 -  -  -  	push         AF
 2014 D1:BE53 CD 61 AD D1 	call         modulo_byte
 2015 D1:BE57 3E 00 -  -  	ld           A,0                       ; 0b
 2016 D1:BE59 F5 -  -  -  	push         AF
 2017 D1:BE5A CD A1 AB D1 	call         merge_byte_to_int
 2018 D1:BE5E 3E 00 -  -  	ld           A,0                       ; 0b
 2019 D1:BE60 32 FC 31 D0 	ld           (globalVars+6),A
 2020 D1:BE64 21 24 CB D1 	ld           HL,blocks
 2021 D1:BE68 E5 -  -  -  	push         HL
 2022 D1:BE69 DD 27 FD -  	ld           HL,(IX-3)
 2023 D1:BE6C E5 -  -  -  	push         HL
 2024 D1:BE6D 21 40 00 00 	ld           HL,64
 2025 D1:BE71 E5 -  -  -  	push         HL
 2026 D1:BE72 D1 -  -  -  	pop          DE
 2027 D1:BE73 C1 -  -  -  	pop          BC
 2028 D1:BE74 CD 32 AD D1 	call         multiply_int
 2029 D1:BE78 E5 -  -  -  	push         HL
 2030 D1:BE79 D1 -  -  -  	pop          DE
 2031 D1:BE7A E1 -  -  -  	pop          HL
 2032 D1:BE7B 01 00 00 00 	ld           BC,0
 2033 D1:BE7F 42 -  -  -  	ld           B,D
 2034 D1:BE80 4B -  -  -  	ld           C,E
 2035 D1:BE81 19 -  -  -  	add          HL,DE
 2036 D1:BE82 22 02 32 D0 	ld           (globalVars+12),HL
 2037 D1:BE86 21 68 00 00 	ld           HL,104
 2038 D1:BE8A E5 -  -  -  	push         HL
 2039 D1:BE8B D1 -  -  -  	pop          DE
 2040 D1:BE8C 21 FE 31 D0 	ld           HL,globalVars+8
 2041 D1:BE90 72 -  -  -  	ld           (HL),D
 2042 D1:BE91 23 -  -  -  	inc          HL
 2043 D1:BE92 73 -  -  -  	ld           (HL),E
 2044 D1:BE93 21 64 00 00 	ld           HL,100
 2045 D1:BE97 E5 -  -  -  	push         HL
 2046 D1:BE98 D1 -  -  -  	pop          DE
 2047 D1:BE99 21 00 32 D0 	ld           HL,globalVars+10
 2048 D1:BE9D 72 -  -  -  	ld           (HL),D
 2049 D1:BE9E 23 -  -  -  	inc          HL
 2050 D1:BE9F 73 -  -  -  	ld           (HL),E
 2051 D1:BEA0 21 E4 CC D1 	ld           HL,block_color
 2052 D1:BEA4 E5 -  -  -  	push         HL
 2053 D1:BEA5 DD 27 FD -  	ld           HL,(IX-3)
 2054 D1:BEA8 E5 -  -  -  	push         HL
 2055 D1:BEA9 D1 -  -  -  	pop          DE
 2056 D1:BEAA E1 -  -  -  	pop          HL
 2057 D1:BEAB 01 00 00 00 	ld           BC,0
 2058 D1:BEAF 42 -  -  -  	ld           B,D
 2059 D1:BEB0 4B -  -  -  	ld           C,E
 2060 D1:BEB1 19 -  -  -  	add          HL,DE
 2061 D1:BEB2 7E -  -  -  	ld           A,(HL)
 2062 D1:BEB3 32 FD 31 D0 	ld           (globalVars+7),A
 2063 D1:BEB7 11 00 00 00 	ld           DE,0
 2064 D1:BEBB -  -  -  -  selectBlock_end_670:
 2065 D1:BEBB ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 2066 D1:BEC0 DD E1 -  -  	pop          IX
 2067 D1:BEC2 C9 -  -  -  	ret          
 2068 D1:BEC3 -  -  -  -  checkKeys_687:
 2069 D1:BEC3 DD E5 -  -  	push         IX                        ; push stack_start
 2070 D1:BEC5 ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 2071 D1:BECA F9 -  -  -  	ld           SP,HL
 2072 D1:BECB DD 21 00 00 
              00 -  -  -  	ld           IX,0
 2073 D1:BED0 DD 39 -  -  	add          IX,SP
 2074 D1:BED2 CD 4C 01 02 	call         _GetCSC
 2075 D1:BED6 F5 -  -  -  	push         AF
 2076 D1:BED7 CD BB AC D1 	call         sub_block_enter
 2077 D1:BEDB DD 27 FD -  	ld           HL,(IX-3)
 2078 D1:BEDE E5 -  -  -  	push         HL
 2079 D1:BEDF 3E 00 -  -  	ld           A,0
 2080 D1:BEE1 F5 -  -  -  	push         AF
 2081 D1:BEE2 E1 -  -  -  	pop          HL
 2082 D1:BEE3 F1 -  -  -  	pop          AF
 2083 D1:BEE4 CD 57 AC D1 	call         byte_not_equals
 2084 D1:BEE8 FE FF -  -  	cp           A,%11111111
 2085 D1:BEEA C2 42 C2 D1 	jp           NZ,if_next_694
 2086 D1:BEEE CD BB AC D1 	call         sub_block_enter
 2087 D1:BEF2 DD 27 FD -  	ld           HL,(IX-3)
 2088 D1:BEF5 E5 -  -  -  	push         HL
 2089 D1:BEF6 3E 36 -  -  	ld           A,54
 2090 D1:BEF8 F5 -  -  -  	push         AF
 2091 D1:BEF9 E1 -  -  -  	pop          HL
 2092 D1:BEFA F1 -  -  -  	pop          AF
 2093 D1:BEFB CD 4B AC D1 	call         byte_equals
 2094 D1:BEFF FE FF -  -  	cp           A,%11111111
 2095 D1:BF01 C2 F5 BF D1 	jp           NZ,if_next_698
 2096 D1:BF05 CD BB AC D1 	call         sub_block_enter
 2097 D1:BF09 3A FC 31 D0 	ld           A,(globalVars+6)
 2098 D1:BF0D F5 -  -  -  	push         AF
 2099 D1:BF0E 3E 00 -  -  	ld           A,0
 2100 D1:BF10 F5 -  -  -  	push         AF
 2101 D1:BF11 E1 -  -  -  	pop          HL
 2102 D1:BF12 F1 -  -  -  	pop          AF
 2103 D1:BF13 CD 4B AC D1 	call         byte_equals
 2104 D1:BF17 FE FF -  -  	cp           A,%11111111
 2105 D1:BF19 C2 7B BF D1 	jp           NZ,if_next_702
 2106 D1:BF1D CD BB AC D1 	call         sub_block_enter
 2107 D1:BF21 CD BB AC D1 	call         sub_block_enter
 2108 D1:BF25 11 00 00 00 	ld           DE,0
 2109 D1:BF29 21 FE 31 D0 	ld           HL,globalVars+8
 2110 D1:BF2D 56 -  -  -  	ld           D,(HL)
 2111 D1:BF2E 23 -  -  -  	inc          HL
 2112 D1:BF2F 5E -  -  -  	ld           E,(HL)
 2113 D1:BF30 D5 -  -  -  	push         DE
 2114 D1:BF31 11 00 00 00 	ld           DE,0
 2115 D1:BF35 21 00 32 D0 	ld           HL,globalVars+10
 2116 D1:BF39 56 -  -  -  	ld           D,(HL)
 2117 D1:BF3A 23 -  -  -  	inc          HL
 2118 D1:BF3B 5E -  -  -  	ld           E,(HL)
 2119 D1:BF3C D5 -  -  -  	push         DE
 2120 D1:BF3D 2A 02 32 D0 	ld           HL,(globalVars+12)
 2121 D1:BF41 E5 -  -  -  	push         HL
 2122 D1:BF42 3E 30 -  -  	ld           A,48
 2123 D1:BF44 E1 -  -  -  	pop          HL
 2124 D1:BF45 11 00 00 00 	ld           DE,0
 2125 D1:BF49 5F -  -  -  	ld           E,A
 2126 D1:BF4A 19 -  -  -  	add          HL,DE
 2127 D1:BF4B E5 -  -  -  	push         HL
 2128 D1:BF4C 21 00 00 00 	ld           HL,0
 2129 D1:BF50 39 -  -  -  	add          HL,SP
 2130 D1:BF51 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 2131 D1:BF56 CD 1B BC D1 	call         checkHitBox_565
 2132 D1:BF5A E1 -  -  -  	pop          HL
 2133 D1:BF5B ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 2134 D1:BF60 F9 -  -  -  	ld           SP,HL
 2135 D1:BF61 D5 -  -  -  	push         DE
 2136 D1:BF62 F1 -  -  -  	pop          AF
 2137 D1:BF63 FE FF -  -  	cp           A,%11111111
 2138 D1:BF65 C2 73 BF D1 	jp           NZ,if_next_707
 2139 D1:BF69 3E 30 -  -  	ld           A,48                      ; 48b
 2140 D1:BF6B 32 FC 31 D0 	ld           (globalVars+6),A
 2141 D1:BF6F C3 73 BF D1 	jp           if_end_706
 2142 D1:BF73 -  -  -  -  if_next_707:
 2143 D1:BF73 -  -  -  -  if_end_706:
 2144 D1:BF73 CD CF AC D1 	call         sub_block_leave
 2145 D1:BF77 C3 ED BF D1 	jp           if_end_701
 2146 D1:BF7B -  -  -  -  if_next_702:
 2147 D1:BF7B CD BB AC D1 	call         sub_block_enter
 2148 D1:BF7F CD BB AC D1 	call         sub_block_enter
 2149 D1:BF83 11 00 00 00 	ld           DE,0
 2150 D1:BF87 21 FE 31 D0 	ld           HL,globalVars+8
 2151 D1:BF8B 56 -  -  -  	ld           D,(HL)
 2152 D1:BF8C 23 -  -  -  	inc          HL
 2153 D1:BF8D 5E -  -  -  	ld           E,(HL)
 2154 D1:BF8E D5 -  -  -  	push         DE
 2155 D1:BF8F 11 00 00 00 	ld           DE,0
 2156 D1:BF93 21 00 32 D0 	ld           HL,globalVars+10
 2157 D1:BF97 56 -  -  -  	ld           D,(HL)
 2158 D1:BF98 23 -  -  -  	inc          HL
 2159 D1:BF99 5E -  -  -  	ld           E,(HL)
 2160 D1:BF9A D5 -  -  -  	push         DE
 2161 D1:BF9B 2A 02 32 D0 	ld           HL,(globalVars+12)
 2162 D1:BF9F E5 -  -  -  	push         HL
 2163 D1:BFA0 3A FC 31 D0 	ld           A,(globalVars+6)
 2164 D1:BFA4 E1 -  -  -  	pop          HL
 2165 D1:BFA5 11 00 00 00 	ld           DE,0
 2166 D1:BFA9 5F -  -  -  	ld           E,A
 2167 D1:BFAA 19 -  -  -  	add          HL,DE
 2168 D1:BFAB E5 -  -  -  	push         HL
 2169 D1:BFAC 3E 10 -  -  	ld           A,16
 2170 D1:BFAE E1 -  -  -  	pop          HL
 2171 D1:BFAF 11 00 00 00 	ld           DE,0
 2172 D1:BFB3 5F -  -  -  	ld           E,A
 2173 D1:BFB4 B7 -  -  -  	or           A,A
 2174 D1:BFB5 ED 52 -  -  	sbc          HL,DE
 2175 D1:BFB7 E5 -  -  -  	push         HL
 2176 D1:BFB8 21 00 00 00 	ld           HL,0
 2177 D1:BFBC 39 -  -  -  	add          HL,SP
 2178 D1:BFBD ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 2179 D1:BFC2 CD 1B BC D1 	call         checkHitBox_565
 2180 D1:BFC6 E1 -  -  -  	pop          HL
 2181 D1:BFC7 ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 2182 D1:BFCC F9 -  -  -  	ld           SP,HL
 2183 D1:BFCD D5 -  -  -  	push         DE
 2184 D1:BFCE F1 -  -  -  	pop          AF
 2185 D1:BFCF FE FF -  -  	cp           A,%11111111
 2186 D1:BFD1 C2 E9 BF D1 	jp           NZ,if_next_714
 2187 D1:BFD5 3A FC 31 D0 	ld           A,(globalVars+6)
 2188 D1:BFD9 F5 -  -  -  	push         AF
 2189 D1:BFDA E1 -  -  -  	pop          HL
 2190 D1:BFDB 7C -  -  -  	ld           A,H
 2191 D1:BFDC D6 10 -  -  	sub          A,16
 2192 D1:BFDE 67 -  -  -  	ld           H,A
 2193 D1:BFDF E5 -  -  -  	push         HL
 2194 D1:BFE0 F1 -  -  -  	pop          AF
 2195 D1:BFE1 32 FC 31 D0 	ld           (globalVars+6),A
 2196 D1:BFE5 C3 E9 BF D1 	jp           if_end_713
 2197 D1:BFE9 -  -  -  -  if_next_714:
 2198 D1:BFE9 -  -  -  -  if_end_713:
 2199 D1:BFE9 CD CF AC D1 	call         sub_block_leave
 2200 D1:BFED -  -  -  -  if_end_701:
 2201 D1:BFED CD CF AC D1 	call         sub_block_leave
 2202 D1:BFF1 C3 3A C2 D1 	jp           if_end_697
 2203 D1:BFF5 -  -  -  -  if_next_698:
 2204 D1:BFF5 DD 27 FD -  	ld           HL,(IX-3)
 2205 D1:BFF8 E5 -  -  -  	push         HL
 2206 D1:BFF9 3E 30 -  -  	ld           A,48
 2207 D1:BFFB F5 -  -  -  	push         AF
 2208 D1:BFFC E1 -  -  -  	pop          HL
 2209 D1:BFFD F1 -  -  -  	pop          AF
 2210 D1:BFFE CD 4B AC D1 	call         byte_equals
 2211 D1:C002 FE FF -  -  	cp           A,%11111111
 2212 D1:C004 C2 EC C0 D1 	jp           NZ,elif_next_717
 2213 D1:C008 CD BB AC D1 	call         sub_block_enter
 2214 D1:C00C 3A FC 31 D0 	ld           A,(globalVars+6)
 2215 D1:C010 F5 -  -  -  	push         AF
 2216 D1:C011 3E 30 -  -  	ld           A,48
 2217 D1:C013 F5 -  -  -  	push         AF
 2218 D1:C014 E1 -  -  -  	pop          HL
 2219 D1:C015 F1 -  -  -  	pop          AF
 2220 D1:C016 CD 4B AC D1 	call         byte_equals
 2221 D1:C01A FE FF -  -  	cp           A,%11111111
 2222 D1:C01C C2 74 C0 D1 	jp           NZ,if_next_721
 2223 D1:C020 CD BB AC D1 	call         sub_block_enter
 2224 D1:C024 CD BB AC D1 	call         sub_block_enter
 2225 D1:C028 11 00 00 00 	ld           DE,0
 2226 D1:C02C 21 FE 31 D0 	ld           HL,globalVars+8
 2227 D1:C030 56 -  -  -  	ld           D,(HL)
 2228 D1:C031 23 -  -  -  	inc          HL
 2229 D1:C032 5E -  -  -  	ld           E,(HL)
 2230 D1:C033 D5 -  -  -  	push         DE
 2231 D1:C034 11 00 00 00 	ld           DE,0
 2232 D1:C038 21 00 32 D0 	ld           HL,globalVars+10
 2233 D1:C03C 56 -  -  -  	ld           D,(HL)
 2234 D1:C03D 23 -  -  -  	inc          HL
 2235 D1:C03E 5E -  -  -  	ld           E,(HL)
 2236 D1:C03F D5 -  -  -  	push         DE
 2237 D1:C040 2A 02 32 D0 	ld           HL,(globalVars+12)
 2238 D1:C044 E5 -  -  -  	push         HL
 2239 D1:C045 21 00 00 00 	ld           HL,0
 2240 D1:C049 39 -  -  -  	add          HL,SP
 2241 D1:C04A ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 2242 D1:C04F CD 1B BC D1 	call         checkHitBox_565
 2243 D1:C053 E1 -  -  -  	pop          HL
 2244 D1:C054 ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 2245 D1:C059 F9 -  -  -  	ld           SP,HL
 2246 D1:C05A D5 -  -  -  	push         DE
 2247 D1:C05B F1 -  -  -  	pop          AF
 2248 D1:C05C FE FF -  -  	cp           A,%11111111
 2249 D1:C05E C2 6C C0 D1 	jp           NZ,if_next_724
 2250 D1:C062 3E 00 -  -  	ld           A,0                       ; 0b
 2251 D1:C064 32 FC 31 D0 	ld           (globalVars+6),A
 2252 D1:C068 C3 6C C0 D1 	jp           if_end_723
 2253 D1:C06C -  -  -  -  if_next_724:
 2254 D1:C06C -  -  -  -  if_end_723:
 2255 D1:C06C CD CF AC D1 	call         sub_block_leave
 2256 D1:C070 C3 E4 C0 D1 	jp           if_end_720
 2257 D1:C074 -  -  -  -  if_next_721:
 2258 D1:C074 CD BB AC D1 	call         sub_block_enter
 2259 D1:C078 CD BB AC D1 	call         sub_block_enter
 2260 D1:C07C 11 00 00 00 	ld           DE,0
 2261 D1:C080 21 FE 31 D0 	ld           HL,globalVars+8
 2262 D1:C084 56 -  -  -  	ld           D,(HL)
 2263 D1:C085 23 -  -  -  	inc          HL
 2264 D1:C086 5E -  -  -  	ld           E,(HL)
 2265 D1:C087 D5 -  -  -  	push         DE
 2266 D1:C088 11 00 00 00 	ld           DE,0
 2267 D1:C08C 21 00 32 D0 	ld           HL,globalVars+10
 2268 D1:C090 56 -  -  -  	ld           D,(HL)
 2269 D1:C091 23 -  -  -  	inc          HL
 2270 D1:C092 5E -  -  -  	ld           E,(HL)
 2271 D1:C093 D5 -  -  -  	push         DE
 2272 D1:C094 2A 02 32 D0 	ld           HL,(globalVars+12)
 2273 D1:C098 E5 -  -  -  	push         HL
 2274 D1:C099 3A FC 31 D0 	ld           A,(globalVars+6)
 2275 D1:C09D E1 -  -  -  	pop          HL
 2276 D1:C09E 11 00 00 00 	ld           DE,0
 2277 D1:C0A2 5F -  -  -  	ld           E,A
 2278 D1:C0A3 19 -  -  -  	add          HL,DE
 2279 D1:C0A4 E5 -  -  -  	push         HL
 2280 D1:C0A5 3E 10 -  -  	ld           A,16
 2281 D1:C0A7 E1 -  -  -  	pop          HL
 2282 D1:C0A8 11 00 00 00 	ld           DE,0
 2283 D1:C0AC 5F -  -  -  	ld           E,A
 2284 D1:C0AD 19 -  -  -  	add          HL,DE
 2285 D1:C0AE E5 -  -  -  	push         HL
 2286 D1:C0AF 21 00 00 00 	ld           HL,0
 2287 D1:C0B3 39 -  -  -  	add          HL,SP
 2288 D1:C0B4 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 2289 D1:C0B9 CD 1B BC D1 	call         checkHitBox_565
 2290 D1:C0BD E1 -  -  -  	pop          HL
 2291 D1:C0BE ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 2292 D1:C0C3 F9 -  -  -  	ld           SP,HL
 2293 D1:C0C4 D5 -  -  -  	push         DE
 2294 D1:C0C5 F1 -  -  -  	pop          AF
 2295 D1:C0C6 FE FF -  -  	cp           A,%11111111
 2296 D1:C0C8 C2 E0 C0 D1 	jp           NZ,if_next_731
 2297 D1:C0CC 3A FC 31 D0 	ld           A,(globalVars+6)
 2298 D1:C0D0 F5 -  -  -  	push         AF
 2299 D1:C0D1 E1 -  -  -  	pop          HL
 2300 D1:C0D2 7C -  -  -  	ld           A,H
 2301 D1:C0D3 C6 10 -  -  	add          A,16
 2302 D1:C0D5 67 -  -  -  	ld           H,A
 2303 D1:C0D6 E5 -  -  -  	push         HL
 2304 D1:C0D7 F1 -  -  -  	pop          AF
 2305 D1:C0D8 32 FC 31 D0 	ld           (globalVars+6),A
 2306 D1:C0DC C3 E0 C0 D1 	jp           if_end_730
 2307 D1:C0E0 -  -  -  -  if_next_731:
 2308 D1:C0E0 -  -  -  -  if_end_730:
 2309 D1:C0E0 CD CF AC D1 	call         sub_block_leave
 2310 D1:C0E4 -  -  -  -  if_end_720:
 2311 D1:C0E4 CD CF AC D1 	call         sub_block_leave
 2312 D1:C0E8 C3 3A C2 D1 	jp           if_end_697
 2313 D1:C0EC -  -  -  -  elif_next_717:
 2314 D1:C0EC DD 27 FD -  	ld           HL,(IX-3)
 2315 D1:C0EF E5 -  -  -  	push         HL
 2316 D1:C0F0 3E 02 -  -  	ld           A,2
 2317 D1:C0F2 F5 -  -  -  	push         AF
 2318 D1:C0F3 E1 -  -  -  	pop          HL
 2319 D1:C0F4 F1 -  -  -  	pop          AF
 2320 D1:C0F5 CD 4B AC D1 	call         byte_equals
 2321 D1:C0F9 FE FF -  -  	cp           A,%11111111
 2322 D1:C0FB C2 73 C1 D1 	jp           NZ,elif_next_734
 2323 D1:C0FF CD BB AC D1 	call         sub_block_enter
 2324 D1:C103 CD BB AC D1 	call         sub_block_enter
 2325 D1:C107 11 00 00 00 	ld           DE,0
 2326 D1:C10B 21 FE 31 D0 	ld           HL,globalVars+8
 2327 D1:C10F 56 -  -  -  	ld           D,(HL)
 2328 D1:C110 23 -  -  -  	inc          HL
 2329 D1:C111 5E -  -  -  	ld           E,(HL)
 2330 D1:C112 D5 -  -  -  	push         DE
 2331 D1:C113 E1 -  -  -  	pop          HL
 2332 D1:C114 2B -  -  -  	dec          HL
 2333 D1:C115 E5 -  -  -  	push         HL
 2334 D1:C116 11 00 00 00 	ld           DE,0
 2335 D1:C11A 21 00 32 D0 	ld           HL,globalVars+10
 2336 D1:C11E 56 -  -  -  	ld           D,(HL)
 2337 D1:C11F 23 -  -  -  	inc          HL
 2338 D1:C120 5E -  -  -  	ld           E,(HL)
 2339 D1:C121 D5 -  -  -  	push         DE
 2340 D1:C122 2A 02 32 D0 	ld           HL,(globalVars+12)
 2341 D1:C126 E5 -  -  -  	push         HL
 2342 D1:C127 3A FC 31 D0 	ld           A,(globalVars+6)
 2343 D1:C12B E1 -  -  -  	pop          HL
 2344 D1:C12C 11 00 00 00 	ld           DE,0
 2345 D1:C130 5F -  -  -  	ld           E,A
 2346 D1:C131 19 -  -  -  	add          HL,DE
 2347 D1:C132 E5 -  -  -  	push         HL
 2348 D1:C133 21 00 00 00 	ld           HL,0
 2349 D1:C137 39 -  -  -  	add          HL,SP
 2350 D1:C138 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 2351 D1:C13D CD 1B BC D1 	call         checkHitBox_565
 2352 D1:C141 E1 -  -  -  	pop          HL
 2353 D1:C142 ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 2354 D1:C147 F9 -  -  -  	ld           SP,HL
 2355 D1:C148 D5 -  -  -  	push         DE
 2356 D1:C149 F1 -  -  -  	pop          AF
 2357 D1:C14A FE FF -  -  	cp           A,%11111111
 2358 D1:C14C C2 6B C1 D1 	jp           NZ,if_next_740
 2359 D1:C150 11 00 00 00 	ld           DE,0
 2360 D1:C154 21 FE 31 D0 	ld           HL,globalVars+8
 2361 D1:C158 56 -  -  -  	ld           D,(HL)
 2362 D1:C159 23 -  -  -  	inc          HL
 2363 D1:C15A 5E -  -  -  	ld           E,(HL)
 2364 D1:C15B D5 -  -  -  	push         DE
 2365 D1:C15C E1 -  -  -  	pop          HL
 2366 D1:C15D 2B -  -  -  	dec          HL
 2367 D1:C15E E5 -  -  -  	push         HL
 2368 D1:C15F D1 -  -  -  	pop          DE
 2369 D1:C160 21 FE 31 D0 	ld           HL,globalVars+8
 2370 D1:C164 72 -  -  -  	ld           (HL),D
 2371 D1:C165 23 -  -  -  	inc          HL
 2372 D1:C166 73 -  -  -  	ld           (HL),E
 2373 D1:C167 C3 6B C1 D1 	jp           if_end_739
 2374 D1:C16B -  -  -  -  if_next_740:
 2375 D1:C16B -  -  -  -  if_end_739:
 2376 D1:C16B CD CF AC D1 	call         sub_block_leave
 2377 D1:C16F C3 3A C2 D1 	jp           if_end_697
 2378 D1:C173 -  -  -  -  elif_next_734:
 2379 D1:C173 DD 27 FD -  	ld           HL,(IX-3)
 2380 D1:C176 E5 -  -  -  	push         HL
 2381 D1:C177 3E 03 -  -  	ld           A,3
 2382 D1:C179 F5 -  -  -  	push         AF
 2383 D1:C17A E1 -  -  -  	pop          HL
 2384 D1:C17B F1 -  -  -  	pop          AF
 2385 D1:C17C CD 4B AC D1 	call         byte_equals
 2386 D1:C180 FE FF -  -  	cp           A,%11111111
 2387 D1:C182 C2 FA C1 D1 	jp           NZ,elif_next_744
 2388 D1:C186 CD BB AC D1 	call         sub_block_enter
 2389 D1:C18A CD BB AC D1 	call         sub_block_enter
 2390 D1:C18E 11 00 00 00 	ld           DE,0
 2391 D1:C192 21 FE 31 D0 	ld           HL,globalVars+8
 2392 D1:C196 56 -  -  -  	ld           D,(HL)
 2393 D1:C197 23 -  -  -  	inc          HL
 2394 D1:C198 5E -  -  -  	ld           E,(HL)
 2395 D1:C199 D5 -  -  -  	push         DE
 2396 D1:C19A E1 -  -  -  	pop          HL
 2397 D1:C19B 23 -  -  -  	inc          HL
 2398 D1:C19C E5 -  -  -  	push         HL
 2399 D1:C19D 11 00 00 00 	ld           DE,0
 2400 D1:C1A1 21 00 32 D0 	ld           HL,globalVars+10
 2401 D1:C1A5 56 -  -  -  	ld           D,(HL)
 2402 D1:C1A6 23 -  -  -  	inc          HL
 2403 D1:C1A7 5E -  -  -  	ld           E,(HL)
 2404 D1:C1A8 D5 -  -  -  	push         DE
 2405 D1:C1A9 2A 02 32 D0 	ld           HL,(globalVars+12)
 2406 D1:C1AD E5 -  -  -  	push         HL
 2407 D1:C1AE 3A FC 31 D0 	ld           A,(globalVars+6)
 2408 D1:C1B2 E1 -  -  -  	pop          HL
 2409 D1:C1B3 11 00 00 00 	ld           DE,0
 2410 D1:C1B7 5F -  -  -  	ld           E,A
 2411 D1:C1B8 19 -  -  -  	add          HL,DE
 2412 D1:C1B9 E5 -  -  -  	push         HL
 2413 D1:C1BA 21 00 00 00 	ld           HL,0
 2414 D1:C1BE 39 -  -  -  	add          HL,SP
 2415 D1:C1BF ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 2416 D1:C1C4 CD 1B BC D1 	call         checkHitBox_565
 2417 D1:C1C8 E1 -  -  -  	pop          HL
 2418 D1:C1C9 ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 2419 D1:C1CE F9 -  -  -  	ld           SP,HL
 2420 D1:C1CF D5 -  -  -  	push         DE
 2421 D1:C1D0 F1 -  -  -  	pop          AF
 2422 D1:C1D1 FE FF -  -  	cp           A,%11111111
 2423 D1:C1D3 C2 F2 C1 D1 	jp           NZ,if_next_750
 2424 D1:C1D7 11 00 00 00 	ld           DE,0
 2425 D1:C1DB 21 FE 31 D0 	ld           HL,globalVars+8
 2426 D1:C1DF 56 -  -  -  	ld           D,(HL)
 2427 D1:C1E0 23 -  -  -  	inc          HL
 2428 D1:C1E1 5E -  -  -  	ld           E,(HL)
 2429 D1:C1E2 D5 -  -  -  	push         DE
 2430 D1:C1E3 E1 -  -  -  	pop          HL
 2431 D1:C1E4 23 -  -  -  	inc          HL
 2432 D1:C1E5 E5 -  -  -  	push         HL
 2433 D1:C1E6 D1 -  -  -  	pop          DE
 2434 D1:C1E7 21 FE 31 D0 	ld           HL,globalVars+8
 2435 D1:C1EB 72 -  -  -  	ld           (HL),D
 2436 D1:C1EC 23 -  -  -  	inc          HL
 2437 D1:C1ED 73 -  -  -  	ld           (HL),E
 2438 D1:C1EE C3 F2 C1 D1 	jp           if_end_749
 2439 D1:C1F2 -  -  -  -  if_next_750:
 2440 D1:C1F2 -  -  -  -  if_end_749:
 2441 D1:C1F2 CD CF AC D1 	call         sub_block_leave
 2442 D1:C1F6 C3 3A C2 D1 	jp           if_end_697
 2443 D1:C1FA -  -  -  -  elif_next_744:
 2444 D1:C1FA DD 27 FD -  	ld           HL,(IX-3)
 2445 D1:C1FD E5 -  -  -  	push         HL
 2446 D1:C1FE 3E 0F -  -  	ld           A,15
 2447 D1:C200 F5 -  -  -  	push         AF
 2448 D1:C201 E1 -  -  -  	pop          HL
 2449 D1:C202 F1 -  -  -  	pop          AF
 2450 D1:C203 CD 4B AC D1 	call         byte_equals
 2451 D1:C207 FE FF -  -  	cp           A,%11111111
 2452 D1:C209 C2 1A C2 D1 	jp           NZ,elif_next_754
 2453 D1:C20D 21 22 CD D1 	ld           HL,string_755
 2454 D1:C211 E5 -  -  -  	push         HL
 2455 D1:C212 C3 85 AE D1 	jp           thrown_error
 2456 D1:C216 C3 3A C2 D1 	jp           if_end_697
 2457 D1:C21A -  -  -  -  elif_next_754:
 2458 D1:C21A DD 27 FD -  	ld           HL,(IX-3)
 2459 D1:C21D E5 -  -  -  	push         HL
 2460 D1:C21E 3E 37 -  -  	ld           A,55
 2461 D1:C220 F5 -  -  -  	push         AF
 2462 D1:C221 E1 -  -  -  	pop          HL
 2463 D1:C222 F1 -  -  -  	pop          AF
 2464 D1:C223 CD 4B AC D1 	call         byte_equals
 2465 D1:C227 FE FF -  -  	cp           A,%11111111
 2466 D1:C229 C2 3A C2 D1 	jp           NZ,elif_next_757
 2467 D1:C22D 21 22 CD D1 	ld           HL,string_755
 2468 D1:C231 E5 -  -  -  	push         HL
 2469 D1:C232 C3 85 AE D1 	jp           thrown_error
 2470 D1:C236 C3 3A C2 D1 	jp           if_end_697
 2471 D1:C23A -  -  -  -  elif_next_757:
 2472 D1:C23A -  -  -  -  if_end_697:
 2473 D1:C23A CD CF AC D1 	call         sub_block_leave
 2474 D1:C23E C3 42 C2 D1 	jp           if_end_693
 2475 D1:C242 -  -  -  -  if_next_694:
 2476 D1:C242 -  -  -  -  if_end_693:
 2477 D1:C242 CD CF AC D1 	call         sub_block_leave
 2478 D1:C246 11 00 00 00 	ld           DE,0
 2479 D1:C24A -  -  -  -  checkKeys_end_688:
 2480 D1:C24A ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 2481 D1:C24F DD E1 -  -  	pop          IX
 2482 D1:C251 C9 -  -  -  	ret          
 2483 D1:C252 -  -  -  -  displayBlock_764:
 2484 D1:C252 DD E5 -  -  	push         IX                        ; push stack_start
 2485 D1:C254 ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 2486 D1:C259 F9 -  -  -  	ld           SP,HL
 2487 D1:C25A DD 21 0C 00 
              00 -  -  -  	ld           IX,12
 2488 D1:C25F DD 39 -  -  	add          IX,SP
 2489 D1:C261 21 6E 00 00 	ld           HL,110
 2490 D1:C265 E5 -  -  -  	push         HL
 2491 D1:C266 DD 27 FD -  	ld           HL,(IX-3)
 2492 D1:C269 B7 -  -  -  	or           A,A
 2493 D1:C26A 11 64 00 00 	ld           DE,100
 2494 D1:C26E ED 52 -  -  	sbc          HL,DE
 2495 D1:C270 E5 -  -  -  	push         HL
 2496 D1:C271 21 0A 00 00 	ld           HL,10
 2497 D1:C275 E5 -  -  -  	push         HL
 2498 D1:C276 D1 -  -  -  	pop          DE
 2499 D1:C277 C1 -  -  -  	pop          BC
 2500 D1:C278 CD 32 AD D1 	call         multiply_int
 2501 D1:C27C D1 -  -  -  	pop          DE
 2502 D1:C27D 19 -  -  -  	add          HL,DE
 2503 D1:C27E E5 -  -  -  	push         HL
 2504 D1:C27F 21 28 00 00 	ld           HL,40
 2505 D1:C283 E5 -  -  -  	push         HL
 2506 D1:C284 DD 27 FA -  	ld           HL,(IX-6)
 2507 D1:C287 B7 -  -  -  	or           A,A
 2508 D1:C288 11 64 00 00 	ld           DE,100
 2509 D1:C28C ED 52 -  -  	sbc          HL,DE
 2510 D1:C28E E5 -  -  -  	push         HL
 2511 D1:C28F 21 0A 00 00 	ld           HL,10
 2512 D1:C293 E5 -  -  -  	push         HL
 2513 D1:C294 D1 -  -  -  	pop          DE
 2514 D1:C295 C1 -  -  -  	pop          BC
 2515 D1:C296 CD 32 AD D1 	call         multiply_int
 2516 D1:C29A D1 -  -  -  	pop          DE
 2517 D1:C29B 19 -  -  -  	add          HL,DE
 2518 D1:C29C E5 -  -  -  	push         HL
 2519 D1:C29D CD BB AC D1 	call         sub_block_enter
 2520 D1:C2A1 DD 27 F7 -  	ld           HL,(IX-9)
 2521 D1:C2A4 7E -  -  -  	ld           A,(HL)
 2522 D1:C2A5 FE FF -  -  	cp           A,%11111111
 2523 D1:C2A7 C2 DE C2 D1 	jp           NZ,if_next_783
 2524 D1:C2AB CD BB AC D1 	call         sub_block_enter
 2525 D1:C2AF DD 27 F1 -  	ld           HL,(IX-15)
 2526 D1:C2B2 E5 -  -  -  	push         HL
 2527 D1:C2B3 DD 27 EE -  	ld           HL,(IX-18)
 2528 D1:C2B6 E5 -  -  -  	push         HL
 2529 D1:C2B7 21 0A 00 00 	ld           HL,10
 2530 D1:C2BB E5 -  -  -  	push         HL
 2531 D1:C2BC 21 0A 00 00 	ld           HL,10
 2532 D1:C2C0 E5 -  -  -  	push         HL
 2533 D1:C2C1 DD 27 F4 -  	ld           HL,(IX-12)
 2534 D1:C2C4 E5 -  -  -  	push         HL
 2535 D1:C2C5 21 00 00 00 	ld           HL,0
 2536 D1:C2C9 39 -  -  -  	add          HL,SP
 2537 D1:C2CA ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 2538 D1:C2CF CD 53 AF D1 	call         drawBlock_5
 2539 D1:C2D3 E1 -  -  -  	pop          HL
 2540 D1:C2D4 ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 2541 D1:C2D9 F9 -  -  -  	ld           SP,HL
 2542 D1:C2DA C3 DE C2 D1 	jp           if_end_782
 2543 D1:C2DE -  -  -  -  if_next_783:
 2544 D1:C2DE -  -  -  -  if_end_782:
 2545 D1:C2DE CD CF AC D1 	call         sub_block_leave
 2546 D1:C2E2 DD 27 F7 -  	ld           HL,(IX-9)
 2547 D1:C2E5 E5 -  -  -  	push         HL
 2548 D1:C2E6 3E 01 -  -  	ld           A,1
 2549 D1:C2E8 E1 -  -  -  	pop          HL
 2550 D1:C2E9 11 00 00 00 	ld           DE,0
 2551 D1:C2ED 5F -  -  -  	ld           E,A
 2552 D1:C2EE 19 -  -  -  	add          HL,DE
 2553 D1:C2EF DD 2F F7 -  	ld           (IX-9),HL
 2554 D1:C2F2 CD BB AC D1 	call         sub_block_enter
 2555 D1:C2F6 DD 27 F7 -  	ld           HL,(IX-9)
 2556 D1:C2F9 7E -  -  -  	ld           A,(HL)
 2557 D1:C2FA FE FF -  -  	cp           A,%11111111
 2558 D1:C2FC C2 38 C3 D1 	jp           NZ,if_next_795
 2559 D1:C300 CD BB AC D1 	call         sub_block_enter
 2560 D1:C304 DD 27 F1 -  	ld           HL,(IX-15)
 2561 D1:C307 11 0A 00 00 	ld           DE,10
 2562 D1:C30B 19 -  -  -  	add          HL,DE
 2563 D1:C30C E5 -  -  -  	push         HL
 2564 D1:C30D DD 27 EE -  	ld           HL,(IX-18)
 2565 D1:C310 E5 -  -  -  	push         HL
 2566 D1:C311 21 0A 00 00 	ld           HL,10
 2567 D1:C315 E5 -  -  -  	push         HL
 2568 D1:C316 21 0A 00 00 	ld           HL,10
 2569 D1:C31A E5 -  -  -  	push         HL
 2570 D1:C31B DD 27 F4 -  	ld           HL,(IX-12)
 2571 D1:C31E E5 -  -  -  	push         HL
 2572 D1:C31F 21 00 00 00 	ld           HL,0
 2573 D1:C323 39 -  -  -  	add          HL,SP
 2574 D1:C324 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 2575 D1:C329 CD 53 AF D1 	call         drawBlock_5
 2576 D1:C32D E1 -  -  -  	pop          HL
 2577 D1:C32E ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 2578 D1:C333 F9 -  -  -  	ld           SP,HL
 2579 D1:C334 C3 38 C3 D1 	jp           if_end_794
 2580 D1:C338 -  -  -  -  if_next_795:
 2581 D1:C338 -  -  -  -  if_end_794:
 2582 D1:C338 CD CF AC D1 	call         sub_block_leave
 2583 D1:C33C DD 27 F7 -  	ld           HL,(IX-9)
 2584 D1:C33F E5 -  -  -  	push         HL
 2585 D1:C340 3E 01 -  -  	ld           A,1
 2586 D1:C342 E1 -  -  -  	pop          HL
 2587 D1:C343 11 00 00 00 	ld           DE,0
 2588 D1:C347 5F -  -  -  	ld           E,A
 2589 D1:C348 19 -  -  -  	add          HL,DE
 2590 D1:C349 DD 2F F7 -  	ld           (IX-9),HL
 2591 D1:C34C CD BB AC D1 	call         sub_block_enter
 2592 D1:C350 DD 27 F7 -  	ld           HL,(IX-9)
 2593 D1:C353 7E -  -  -  	ld           A,(HL)
 2594 D1:C354 FE FF -  -  	cp           A,%11111111
 2595 D1:C356 C2 92 C3 D1 	jp           NZ,if_next_809
 2596 D1:C35A CD BB AC D1 	call         sub_block_enter
 2597 D1:C35E DD 27 F1 -  	ld           HL,(IX-15)
 2598 D1:C361 11 14 00 00 	ld           DE,20
 2599 D1:C365 19 -  -  -  	add          HL,DE
 2600 D1:C366 E5 -  -  -  	push         HL
 2601 D1:C367 DD 27 EE -  	ld           HL,(IX-18)
 2602 D1:C36A E5 -  -  -  	push         HL
 2603 D1:C36B 21 0A 00 00 	ld           HL,10
 2604 D1:C36F E5 -  -  -  	push         HL
 2605 D1:C370 21 0A 00 00 	ld           HL,10
 2606 D1:C374 E5 -  -  -  	push         HL
 2607 D1:C375 DD 27 F4 -  	ld           HL,(IX-12)
 2608 D1:C378 E5 -  -  -  	push         HL
 2609 D1:C379 21 00 00 00 	ld           HL,0
 2610 D1:C37D 39 -  -  -  	add          HL,SP
 2611 D1:C37E ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 2612 D1:C383 CD 53 AF D1 	call         drawBlock_5
 2613 D1:C387 E1 -  -  -  	pop          HL
 2614 D1:C388 ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 2615 D1:C38D F9 -  -  -  	ld           SP,HL
 2616 D1:C38E C3 92 C3 D1 	jp           if_end_808
 2617 D1:C392 -  -  -  -  if_next_809:
 2618 D1:C392 -  -  -  -  if_end_808:
 2619 D1:C392 CD CF AC D1 	call         sub_block_leave
 2620 D1:C396 DD 27 F7 -  	ld           HL,(IX-9)
 2621 D1:C399 E5 -  -  -  	push         HL
 2622 D1:C39A 3E 01 -  -  	ld           A,1
 2623 D1:C39C E1 -  -  -  	pop          HL
 2624 D1:C39D 11 00 00 00 	ld           DE,0
 2625 D1:C3A1 5F -  -  -  	ld           E,A
 2626 D1:C3A2 19 -  -  -  	add          HL,DE
 2627 D1:C3A3 DD 2F F7 -  	ld           (IX-9),HL
 2628 D1:C3A6 CD BB AC D1 	call         sub_block_enter
 2629 D1:C3AA DD 27 F7 -  	ld           HL,(IX-9)
 2630 D1:C3AD 7E -  -  -  	ld           A,(HL)
 2631 D1:C3AE FE FF -  -  	cp           A,%11111111
 2632 D1:C3B0 C2 EC C3 D1 	jp           NZ,if_next_823
 2633 D1:C3B4 CD BB AC D1 	call         sub_block_enter
 2634 D1:C3B8 DD 27 F1 -  	ld           HL,(IX-15)
 2635 D1:C3BB 11 1E 00 00 	ld           DE,30
 2636 D1:C3BF 19 -  -  -  	add          HL,DE
 2637 D1:C3C0 E5 -  -  -  	push         HL
 2638 D1:C3C1 DD 27 EE -  	ld           HL,(IX-18)
 2639 D1:C3C4 E5 -  -  -  	push         HL
 2640 D1:C3C5 21 0A 00 00 	ld           HL,10
 2641 D1:C3C9 E5 -  -  -  	push         HL
 2642 D1:C3CA 21 0A 00 00 	ld           HL,10
 2643 D1:C3CE E5 -  -  -  	push         HL
 2644 D1:C3CF DD 27 F4 -  	ld           HL,(IX-12)
 2645 D1:C3D2 E5 -  -  -  	push         HL
 2646 D1:C3D3 21 00 00 00 	ld           HL,0
 2647 D1:C3D7 39 -  -  -  	add          HL,SP
 2648 D1:C3D8 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 2649 D1:C3DD CD 53 AF D1 	call         drawBlock_5
 2650 D1:C3E1 E1 -  -  -  	pop          HL
 2651 D1:C3E2 ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 2652 D1:C3E7 F9 -  -  -  	ld           SP,HL
 2653 D1:C3E8 C3 EC C3 D1 	jp           if_end_822
 2654 D1:C3EC -  -  -  -  if_next_823:
 2655 D1:C3EC -  -  -  -  if_end_822:
 2656 D1:C3EC CD CF AC D1 	call         sub_block_leave
 2657 D1:C3F0 DD 27 F7 -  	ld           HL,(IX-9)
 2658 D1:C3F3 E5 -  -  -  	push         HL
 2659 D1:C3F4 3E 01 -  -  	ld           A,1
 2660 D1:C3F6 E1 -  -  -  	pop          HL
 2661 D1:C3F7 11 00 00 00 	ld           DE,0
 2662 D1:C3FB 5F -  -  -  	ld           E,A
 2663 D1:C3FC 19 -  -  -  	add          HL,DE
 2664 D1:C3FD DD 2F F7 -  	ld           (IX-9),HL
 2665 D1:C400 CD BB AC D1 	call         sub_block_enter
 2666 D1:C404 DD 27 F7 -  	ld           HL,(IX-9)
 2667 D1:C407 7E -  -  -  	ld           A,(HL)
 2668 D1:C408 FE FF -  -  	cp           A,%11111111
 2669 D1:C40A C2 46 C4 D1 	jp           NZ,if_next_837
 2670 D1:C40E CD BB AC D1 	call         sub_block_enter
 2671 D1:C412 DD 27 F1 -  	ld           HL,(IX-15)
 2672 D1:C415 E5 -  -  -  	push         HL
 2673 D1:C416 DD 27 EE -  	ld           HL,(IX-18)
 2674 D1:C419 11 0A 00 00 	ld           DE,10
 2675 D1:C41D 19 -  -  -  	add          HL,DE
 2676 D1:C41E E5 -  -  -  	push         HL
 2677 D1:C41F 21 0A 00 00 	ld           HL,10
 2678 D1:C423 E5 -  -  -  	push         HL
 2679 D1:C424 21 0A 00 00 	ld           HL,10
 2680 D1:C428 E5 -  -  -  	push         HL
 2681 D1:C429 DD 27 F4 -  	ld           HL,(IX-12)
 2682 D1:C42C E5 -  -  -  	push         HL
 2683 D1:C42D 21 00 00 00 	ld           HL,0
 2684 D1:C431 39 -  -  -  	add          HL,SP
 2685 D1:C432 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 2686 D1:C437 CD 53 AF D1 	call         drawBlock_5
 2687 D1:C43B E1 -  -  -  	pop          HL
 2688 D1:C43C ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 2689 D1:C441 F9 -  -  -  	ld           SP,HL
 2690 D1:C442 C3 46 C4 D1 	jp           if_end_836
 2691 D1:C446 -  -  -  -  if_next_837:
 2692 D1:C446 -  -  -  -  if_end_836:
 2693 D1:C446 CD CF AC D1 	call         sub_block_leave
 2694 D1:C44A DD 27 F7 -  	ld           HL,(IX-9)
 2695 D1:C44D E5 -  -  -  	push         HL
 2696 D1:C44E 3E 01 -  -  	ld           A,1
 2697 D1:C450 E1 -  -  -  	pop          HL
 2698 D1:C451 11 00 00 00 	ld           DE,0
 2699 D1:C455 5F -  -  -  	ld           E,A
 2700 D1:C456 19 -  -  -  	add          HL,DE
 2701 D1:C457 DD 2F F7 -  	ld           (IX-9),HL
 2702 D1:C45A CD BB AC D1 	call         sub_block_enter
 2703 D1:C45E DD 27 F7 -  	ld           HL,(IX-9)
 2704 D1:C461 7E -  -  -  	ld           A,(HL)
 2705 D1:C462 FE FF -  -  	cp           A,%11111111
 2706 D1:C464 C2 A5 C4 D1 	jp           NZ,if_next_851
 2707 D1:C468 CD BB AC D1 	call         sub_block_enter
 2708 D1:C46C DD 27 F1 -  	ld           HL,(IX-15)
 2709 D1:C46F 11 0A 00 00 	ld           DE,10
 2710 D1:C473 19 -  -  -  	add          HL,DE
 2711 D1:C474 E5 -  -  -  	push         HL
 2712 D1:C475 DD 27 EE -  	ld           HL,(IX-18)
 2713 D1:C478 11 0A 00 00 	ld           DE,10
 2714 D1:C47C 19 -  -  -  	add          HL,DE
 2715 D1:C47D E5 -  -  -  	push         HL
 2716 D1:C47E 21 0A 00 00 	ld           HL,10
 2717 D1:C482 E5 -  -  -  	push         HL
 2718 D1:C483 21 0A 00 00 	ld           HL,10
 2719 D1:C487 E5 -  -  -  	push         HL
 2720 D1:C488 DD 27 F4 -  	ld           HL,(IX-12)
 2721 D1:C48B E5 -  -  -  	push         HL
 2722 D1:C48C 21 00 00 00 	ld           HL,0
 2723 D1:C490 39 -  -  -  	add          HL,SP
 2724 D1:C491 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 2725 D1:C496 CD 53 AF D1 	call         drawBlock_5
 2726 D1:C49A E1 -  -  -  	pop          HL
 2727 D1:C49B ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 2728 D1:C4A0 F9 -  -  -  	ld           SP,HL
 2729 D1:C4A1 C3 A5 C4 D1 	jp           if_end_850
 2730 D1:C4A5 -  -  -  -  if_next_851:
 2731 D1:C4A5 -  -  -  -  if_end_850:
 2732 D1:C4A5 CD CF AC D1 	call         sub_block_leave
 2733 D1:C4A9 DD 27 F7 -  	ld           HL,(IX-9)
 2734 D1:C4AC E5 -  -  -  	push         HL
 2735 D1:C4AD 3E 01 -  -  	ld           A,1
 2736 D1:C4AF E1 -  -  -  	pop          HL
 2737 D1:C4B0 11 00 00 00 	ld           DE,0
 2738 D1:C4B4 5F -  -  -  	ld           E,A
 2739 D1:C4B5 19 -  -  -  	add          HL,DE
 2740 D1:C4B6 DD 2F F7 -  	ld           (IX-9),HL
 2741 D1:C4B9 CD BB AC D1 	call         sub_block_enter
 2742 D1:C4BD DD 27 F7 -  	ld           HL,(IX-9)
 2743 D1:C4C0 7E -  -  -  	ld           A,(HL)
 2744 D1:C4C1 FE FF -  -  	cp           A,%11111111
 2745 D1:C4C3 C2 04 C5 D1 	jp           NZ,if_next_867
 2746 D1:C4C7 CD BB AC D1 	call         sub_block_enter
 2747 D1:C4CB DD 27 F1 -  	ld           HL,(IX-15)
 2748 D1:C4CE 11 14 00 00 	ld           DE,20
 2749 D1:C4D2 19 -  -  -  	add          HL,DE
 2750 D1:C4D3 E5 -  -  -  	push         HL
 2751 D1:C4D4 DD 27 EE -  	ld           HL,(IX-18)
 2752 D1:C4D7 11 0A 00 00 	ld           DE,10
 2753 D1:C4DB 19 -  -  -  	add          HL,DE
 2754 D1:C4DC E5 -  -  -  	push         HL
 2755 D1:C4DD 21 0A 00 00 	ld           HL,10
 2756 D1:C4E1 E5 -  -  -  	push         HL
 2757 D1:C4E2 21 0A 00 00 	ld           HL,10
 2758 D1:C4E6 E5 -  -  -  	push         HL
 2759 D1:C4E7 DD 27 F4 -  	ld           HL,(IX-12)
 2760 D1:C4EA E5 -  -  -  	push         HL
 2761 D1:C4EB 21 00 00 00 	ld           HL,0
 2762 D1:C4EF 39 -  -  -  	add          HL,SP
 2763 D1:C4F0 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 2764 D1:C4F5 CD 53 AF D1 	call         drawBlock_5
 2765 D1:C4F9 E1 -  -  -  	pop          HL
 2766 D1:C4FA ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 2767 D1:C4FF F9 -  -  -  	ld           SP,HL
 2768 D1:C500 C3 04 C5 D1 	jp           if_end_866
 2769 D1:C504 -  -  -  -  if_next_867:
 2770 D1:C504 -  -  -  -  if_end_866:
 2771 D1:C504 CD CF AC D1 	call         sub_block_leave
 2772 D1:C508 DD 27 F7 -  	ld           HL,(IX-9)
 2773 D1:C50B E5 -  -  -  	push         HL
 2774 D1:C50C 3E 01 -  -  	ld           A,1
 2775 D1:C50E E1 -  -  -  	pop          HL
 2776 D1:C50F 11 00 00 00 	ld           DE,0
 2777 D1:C513 5F -  -  -  	ld           E,A
 2778 D1:C514 19 -  -  -  	add          HL,DE
 2779 D1:C515 DD 2F F7 -  	ld           (IX-9),HL
 2780 D1:C518 CD BB AC D1 	call         sub_block_enter
 2781 D1:C51C DD 27 F7 -  	ld           HL,(IX-9)
 2782 D1:C51F 7E -  -  -  	ld           A,(HL)
 2783 D1:C520 FE FF -  -  	cp           A,%11111111
 2784 D1:C522 C2 63 C5 D1 	jp           NZ,if_next_883
 2785 D1:C526 CD BB AC D1 	call         sub_block_enter
 2786 D1:C52A DD 27 F1 -  	ld           HL,(IX-15)
 2787 D1:C52D 11 1E 00 00 	ld           DE,30
 2788 D1:C531 19 -  -  -  	add          HL,DE
 2789 D1:C532 E5 -  -  -  	push         HL
 2790 D1:C533 DD 27 EE -  	ld           HL,(IX-18)
 2791 D1:C536 11 0A 00 00 	ld           DE,10
 2792 D1:C53A 19 -  -  -  	add          HL,DE
 2793 D1:C53B E5 -  -  -  	push         HL
 2794 D1:C53C 21 0A 00 00 	ld           HL,10
 2795 D1:C540 E5 -  -  -  	push         HL
 2796 D1:C541 21 0A 00 00 	ld           HL,10
 2797 D1:C545 E5 -  -  -  	push         HL
 2798 D1:C546 DD 27 F4 -  	ld           HL,(IX-12)
 2799 D1:C549 E5 -  -  -  	push         HL
 2800 D1:C54A 21 00 00 00 	ld           HL,0
 2801 D1:C54E 39 -  -  -  	add          HL,SP
 2802 D1:C54F ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 2803 D1:C554 CD 53 AF D1 	call         drawBlock_5
 2804 D1:C558 E1 -  -  -  	pop          HL
 2805 D1:C559 ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 2806 D1:C55E F9 -  -  -  	ld           SP,HL
 2807 D1:C55F C3 63 C5 D1 	jp           if_end_882
 2808 D1:C563 -  -  -  -  if_next_883:
 2809 D1:C563 -  -  -  -  if_end_882:
 2810 D1:C563 CD CF AC D1 	call         sub_block_leave
 2811 D1:C567 DD 27 F7 -  	ld           HL,(IX-9)
 2812 D1:C56A E5 -  -  -  	push         HL
 2813 D1:C56B 3E 01 -  -  	ld           A,1
 2814 D1:C56D E1 -  -  -  	pop          HL
 2815 D1:C56E 11 00 00 00 	ld           DE,0
 2816 D1:C572 5F -  -  -  	ld           E,A
 2817 D1:C573 19 -  -  -  	add          HL,DE
 2818 D1:C574 DD 2F F7 -  	ld           (IX-9),HL
 2819 D1:C577 CD BB AC D1 	call         sub_block_enter
 2820 D1:C57B DD 27 F7 -  	ld           HL,(IX-9)
 2821 D1:C57E 7E -  -  -  	ld           A,(HL)
 2822 D1:C57F FE FF -  -  	cp           A,%11111111
 2823 D1:C581 C2 BD C5 D1 	jp           NZ,if_next_899
 2824 D1:C585 CD BB AC D1 	call         sub_block_enter
 2825 D1:C589 DD 27 F1 -  	ld           HL,(IX-15)
 2826 D1:C58C E5 -  -  -  	push         HL
 2827 D1:C58D DD 27 EE -  	ld           HL,(IX-18)
 2828 D1:C590 11 14 00 00 	ld           DE,20
 2829 D1:C594 19 -  -  -  	add          HL,DE
 2830 D1:C595 E5 -  -  -  	push         HL
 2831 D1:C596 21 0A 00 00 	ld           HL,10
 2832 D1:C59A E5 -  -  -  	push         HL
 2833 D1:C59B 21 0A 00 00 	ld           HL,10
 2834 D1:C59F E5 -  -  -  	push         HL
 2835 D1:C5A0 DD 27 F4 -  	ld           HL,(IX-12)
 2836 D1:C5A3 E5 -  -  -  	push         HL
 2837 D1:C5A4 21 00 00 00 	ld           HL,0
 2838 D1:C5A8 39 -  -  -  	add          HL,SP
 2839 D1:C5A9 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 2840 D1:C5AE CD 53 AF D1 	call         drawBlock_5
 2841 D1:C5B2 E1 -  -  -  	pop          HL
 2842 D1:C5B3 ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 2843 D1:C5B8 F9 -  -  -  	ld           SP,HL
 2844 D1:C5B9 C3 BD C5 D1 	jp           if_end_898
 2845 D1:C5BD -  -  -  -  if_next_899:
 2846 D1:C5BD -  -  -  -  if_end_898:
 2847 D1:C5BD CD CF AC D1 	call         sub_block_leave
 2848 D1:C5C1 DD 27 F7 -  	ld           HL,(IX-9)
 2849 D1:C5C4 E5 -  -  -  	push         HL
 2850 D1:C5C5 3E 01 -  -  	ld           A,1
 2851 D1:C5C7 E1 -  -  -  	pop          HL
 2852 D1:C5C8 11 00 00 00 	ld           DE,0
 2853 D1:C5CC 5F -  -  -  	ld           E,A
 2854 D1:C5CD 19 -  -  -  	add          HL,DE
 2855 D1:C5CE DD 2F F7 -  	ld           (IX-9),HL
 2856 D1:C5D1 CD BB AC D1 	call         sub_block_enter
 2857 D1:C5D5 DD 27 F7 -  	ld           HL,(IX-9)
 2858 D1:C5D8 7E -  -  -  	ld           A,(HL)
 2859 D1:C5D9 FE FF -  -  	cp           A,%11111111
 2860 D1:C5DB C2 1C C6 D1 	jp           NZ,if_next_913
 2861 D1:C5DF CD BB AC D1 	call         sub_block_enter
 2862 D1:C5E3 DD 27 F1 -  	ld           HL,(IX-15)
 2863 D1:C5E6 11 0A 00 00 	ld           DE,10
 2864 D1:C5EA 19 -  -  -  	add          HL,DE
 2865 D1:C5EB E5 -  -  -  	push         HL
 2866 D1:C5EC DD 27 EE -  	ld           HL,(IX-18)
 2867 D1:C5EF 11 14 00 00 	ld           DE,20
 2868 D1:C5F3 19 -  -  -  	add          HL,DE
 2869 D1:C5F4 E5 -  -  -  	push         HL
 2870 D1:C5F5 21 0A 00 00 	ld           HL,10
 2871 D1:C5F9 E5 -  -  -  	push         HL
 2872 D1:C5FA 21 0A 00 00 	ld           HL,10
 2873 D1:C5FE E5 -  -  -  	push         HL
 2874 D1:C5FF DD 27 F4 -  	ld           HL,(IX-12)
 2875 D1:C602 E5 -  -  -  	push         HL
 2876 D1:C603 21 00 00 00 	ld           HL,0
 2877 D1:C607 39 -  -  -  	add          HL,SP
 2878 D1:C608 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 2879 D1:C60D CD 53 AF D1 	call         drawBlock_5
 2880 D1:C611 E1 -  -  -  	pop          HL
 2881 D1:C612 ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 2882 D1:C617 F9 -  -  -  	ld           SP,HL
 2883 D1:C618 C3 1C C6 D1 	jp           if_end_912
 2884 D1:C61C -  -  -  -  if_next_913:
 2885 D1:C61C -  -  -  -  if_end_912:
 2886 D1:C61C CD CF AC D1 	call         sub_block_leave
 2887 D1:C620 DD 27 F7 -  	ld           HL,(IX-9)
 2888 D1:C623 E5 -  -  -  	push         HL
 2889 D1:C624 3E 01 -  -  	ld           A,1
 2890 D1:C626 E1 -  -  -  	pop          HL
 2891 D1:C627 11 00 00 00 	ld           DE,0
 2892 D1:C62B 5F -  -  -  	ld           E,A
 2893 D1:C62C 19 -  -  -  	add          HL,DE
 2894 D1:C62D DD 2F F7 -  	ld           (IX-9),HL
 2895 D1:C630 CD BB AC D1 	call         sub_block_enter
 2896 D1:C634 DD 27 F7 -  	ld           HL,(IX-9)
 2897 D1:C637 7E -  -  -  	ld           A,(HL)
 2898 D1:C638 FE FF -  -  	cp           A,%11111111
 2899 D1:C63A C2 7B C6 D1 	jp           NZ,if_next_929
 2900 D1:C63E CD BB AC D1 	call         sub_block_enter
 2901 D1:C642 DD 27 F1 -  	ld           HL,(IX-15)
 2902 D1:C645 11 14 00 00 	ld           DE,20
 2903 D1:C649 19 -  -  -  	add          HL,DE
 2904 D1:C64A E5 -  -  -  	push         HL
 2905 D1:C64B DD 27 EE -  	ld           HL,(IX-18)
 2906 D1:C64E 11 14 00 00 	ld           DE,20
 2907 D1:C652 19 -  -  -  	add          HL,DE
 2908 D1:C653 E5 -  -  -  	push         HL
 2909 D1:C654 21 0A 00 00 	ld           HL,10
 2910 D1:C658 E5 -  -  -  	push         HL
 2911 D1:C659 21 0A 00 00 	ld           HL,10
 2912 D1:C65D E5 -  -  -  	push         HL
 2913 D1:C65E DD 27 F4 -  	ld           HL,(IX-12)
 2914 D1:C661 E5 -  -  -  	push         HL
 2915 D1:C662 21 00 00 00 	ld           HL,0
 2916 D1:C666 39 -  -  -  	add          HL,SP
 2917 D1:C667 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 2918 D1:C66C CD 53 AF D1 	call         drawBlock_5
 2919 D1:C670 E1 -  -  -  	pop          HL
 2920 D1:C671 ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 2921 D1:C676 F9 -  -  -  	ld           SP,HL
 2922 D1:C677 C3 7B C6 D1 	jp           if_end_928
 2923 D1:C67B -  -  -  -  if_next_929:
 2924 D1:C67B -  -  -  -  if_end_928:
 2925 D1:C67B CD CF AC D1 	call         sub_block_leave
 2926 D1:C67F DD 27 F7 -  	ld           HL,(IX-9)
 2927 D1:C682 E5 -  -  -  	push         HL
 2928 D1:C683 3E 01 -  -  	ld           A,1
 2929 D1:C685 E1 -  -  -  	pop          HL
 2930 D1:C686 11 00 00 00 	ld           DE,0
 2931 D1:C68A 5F -  -  -  	ld           E,A
 2932 D1:C68B 19 -  -  -  	add          HL,DE
 2933 D1:C68C DD 2F F7 -  	ld           (IX-9),HL
 2934 D1:C68F CD BB AC D1 	call         sub_block_enter
 2935 D1:C693 DD 27 F7 -  	ld           HL,(IX-9)
 2936 D1:C696 7E -  -  -  	ld           A,(HL)
 2937 D1:C697 FE FF -  -  	cp           A,%11111111
 2938 D1:C699 C2 DA C6 D1 	jp           NZ,if_next_945
 2939 D1:C69D CD BB AC D1 	call         sub_block_enter
 2940 D1:C6A1 DD 27 F1 -  	ld           HL,(IX-15)
 2941 D1:C6A4 11 1E 00 00 	ld           DE,30
 2942 D1:C6A8 19 -  -  -  	add          HL,DE
 2943 D1:C6A9 E5 -  -  -  	push         HL
 2944 D1:C6AA DD 27 EE -  	ld           HL,(IX-18)
 2945 D1:C6AD 11 14 00 00 	ld           DE,20
 2946 D1:C6B1 19 -  -  -  	add          HL,DE
 2947 D1:C6B2 E5 -  -  -  	push         HL
 2948 D1:C6B3 21 0A 00 00 	ld           HL,10
 2949 D1:C6B7 E5 -  -  -  	push         HL
 2950 D1:C6B8 21 0A 00 00 	ld           HL,10
 2951 D1:C6BC E5 -  -  -  	push         HL
 2952 D1:C6BD DD 27 F4 -  	ld           HL,(IX-12)
 2953 D1:C6C0 E5 -  -  -  	push         HL
 2954 D1:C6C1 21 00 00 00 	ld           HL,0
 2955 D1:C6C5 39 -  -  -  	add          HL,SP
 2956 D1:C6C6 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 2957 D1:C6CB CD 53 AF D1 	call         drawBlock_5
 2958 D1:C6CF E1 -  -  -  	pop          HL
 2959 D1:C6D0 ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 2960 D1:C6D5 F9 -  -  -  	ld           SP,HL
 2961 D1:C6D6 C3 DA C6 D1 	jp           if_end_944
 2962 D1:C6DA -  -  -  -  if_next_945:
 2963 D1:C6DA -  -  -  -  if_end_944:
 2964 D1:C6DA CD CF AC D1 	call         sub_block_leave
 2965 D1:C6DE DD 27 F7 -  	ld           HL,(IX-9)
 2966 D1:C6E1 E5 -  -  -  	push         HL
 2967 D1:C6E2 3E 01 -  -  	ld           A,1
 2968 D1:C6E4 E1 -  -  -  	pop          HL
 2969 D1:C6E5 11 00 00 00 	ld           DE,0
 2970 D1:C6E9 5F -  -  -  	ld           E,A
 2971 D1:C6EA 19 -  -  -  	add          HL,DE
 2972 D1:C6EB DD 2F F7 -  	ld           (IX-9),HL
 2973 D1:C6EE CD BB AC D1 	call         sub_block_enter
 2974 D1:C6F2 DD 27 F7 -  	ld           HL,(IX-9)
 2975 D1:C6F5 7E -  -  -  	ld           A,(HL)
 2976 D1:C6F6 FE FF -  -  	cp           A,%11111111
 2977 D1:C6F8 C2 34 C7 D1 	jp           NZ,if_next_961
 2978 D1:C6FC CD BB AC D1 	call         sub_block_enter
 2979 D1:C700 DD 27 F1 -  	ld           HL,(IX-15)
 2980 D1:C703 E5 -  -  -  	push         HL
 2981 D1:C704 DD 27 EE -  	ld           HL,(IX-18)
 2982 D1:C707 11 1E 00 00 	ld           DE,30
 2983 D1:C70B 19 -  -  -  	add          HL,DE
 2984 D1:C70C E5 -  -  -  	push         HL
 2985 D1:C70D 21 0A 00 00 	ld           HL,10
 2986 D1:C711 E5 -  -  -  	push         HL
 2987 D1:C712 21 0A 00 00 	ld           HL,10
 2988 D1:C716 E5 -  -  -  	push         HL
 2989 D1:C717 DD 27 F4 -  	ld           HL,(IX-12)
 2990 D1:C71A E5 -  -  -  	push         HL
 2991 D1:C71B 21 00 00 00 	ld           HL,0
 2992 D1:C71F 39 -  -  -  	add          HL,SP
 2993 D1:C720 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 2994 D1:C725 CD 53 AF D1 	call         drawBlock_5
 2995 D1:C729 E1 -  -  -  	pop          HL
 2996 D1:C72A ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 2997 D1:C72F F9 -  -  -  	ld           SP,HL
 2998 D1:C730 C3 34 C7 D1 	jp           if_end_960
 2999 D1:C734 -  -  -  -  if_next_961:
 3000 D1:C734 -  -  -  -  if_end_960:
 3001 D1:C734 CD CF AC D1 	call         sub_block_leave
 3002 D1:C738 DD 27 F7 -  	ld           HL,(IX-9)
 3003 D1:C73B E5 -  -  -  	push         HL
 3004 D1:C73C 3E 01 -  -  	ld           A,1
 3005 D1:C73E E1 -  -  -  	pop          HL
 3006 D1:C73F 11 00 00 00 	ld           DE,0
 3007 D1:C743 5F -  -  -  	ld           E,A
 3008 D1:C744 19 -  -  -  	add          HL,DE
 3009 D1:C745 DD 2F F7 -  	ld           (IX-9),HL
 3010 D1:C748 CD BB AC D1 	call         sub_block_enter
 3011 D1:C74C DD 27 F7 -  	ld           HL,(IX-9)
 3012 D1:C74F 7E -  -  -  	ld           A,(HL)
 3013 D1:C750 FE FF -  -  	cp           A,%11111111
 3014 D1:C752 C2 93 C7 D1 	jp           NZ,if_next_975
 3015 D1:C756 CD BB AC D1 	call         sub_block_enter
 3016 D1:C75A DD 27 F1 -  	ld           HL,(IX-15)
 3017 D1:C75D 11 0A 00 00 	ld           DE,10
 3018 D1:C761 19 -  -  -  	add          HL,DE
 3019 D1:C762 E5 -  -  -  	push         HL
 3020 D1:C763 DD 27 EE -  	ld           HL,(IX-18)
 3021 D1:C766 11 1E 00 00 	ld           DE,30
 3022 D1:C76A 19 -  -  -  	add          HL,DE
 3023 D1:C76B E5 -  -  -  	push         HL
 3024 D1:C76C 21 0A 00 00 	ld           HL,10
 3025 D1:C770 E5 -  -  -  	push         HL
 3026 D1:C771 21 0A 00 00 	ld           HL,10
 3027 D1:C775 E5 -  -  -  	push         HL
 3028 D1:C776 DD 27 F4 -  	ld           HL,(IX-12)
 3029 D1:C779 E5 -  -  -  	push         HL
 3030 D1:C77A 21 00 00 00 	ld           HL,0
 3031 D1:C77E 39 -  -  -  	add          HL,SP
 3032 D1:C77F ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 3033 D1:C784 CD 53 AF D1 	call         drawBlock_5
 3034 D1:C788 E1 -  -  -  	pop          HL
 3035 D1:C789 ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 3036 D1:C78E F9 -  -  -  	ld           SP,HL
 3037 D1:C78F C3 93 C7 D1 	jp           if_end_974
 3038 D1:C793 -  -  -  -  if_next_975:
 3039 D1:C793 -  -  -  -  if_end_974:
 3040 D1:C793 CD CF AC D1 	call         sub_block_leave
 3041 D1:C797 DD 27 F7 -  	ld           HL,(IX-9)
 3042 D1:C79A E5 -  -  -  	push         HL
 3043 D1:C79B 3E 01 -  -  	ld           A,1
 3044 D1:C79D E1 -  -  -  	pop          HL
 3045 D1:C79E 11 00 00 00 	ld           DE,0
 3046 D1:C7A2 5F -  -  -  	ld           E,A
 3047 D1:C7A3 19 -  -  -  	add          HL,DE
 3048 D1:C7A4 DD 2F F7 -  	ld           (IX-9),HL
 3049 D1:C7A7 CD BB AC D1 	call         sub_block_enter
 3050 D1:C7AB DD 27 F7 -  	ld           HL,(IX-9)
 3051 D1:C7AE 7E -  -  -  	ld           A,(HL)
 3052 D1:C7AF FE FF -  -  	cp           A,%11111111
 3053 D1:C7B1 C2 F2 C7 D1 	jp           NZ,if_next_991
 3054 D1:C7B5 CD BB AC D1 	call         sub_block_enter
 3055 D1:C7B9 DD 27 F1 -  	ld           HL,(IX-15)
 3056 D1:C7BC 11 14 00 00 	ld           DE,20
 3057 D1:C7C0 19 -  -  -  	add          HL,DE
 3058 D1:C7C1 E5 -  -  -  	push         HL
 3059 D1:C7C2 DD 27 EE -  	ld           HL,(IX-18)
 3060 D1:C7C5 11 1E 00 00 	ld           DE,30
 3061 D1:C7C9 19 -  -  -  	add          HL,DE
 3062 D1:C7CA E5 -  -  -  	push         HL
 3063 D1:C7CB 21 0A 00 00 	ld           HL,10
 3064 D1:C7CF E5 -  -  -  	push         HL
 3065 D1:C7D0 21 0A 00 00 	ld           HL,10
 3066 D1:C7D4 E5 -  -  -  	push         HL
 3067 D1:C7D5 DD 27 F4 -  	ld           HL,(IX-12)
 3068 D1:C7D8 E5 -  -  -  	push         HL
 3069 D1:C7D9 21 00 00 00 	ld           HL,0
 3070 D1:C7DD 39 -  -  -  	add          HL,SP
 3071 D1:C7DE ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 3072 D1:C7E3 CD 53 AF D1 	call         drawBlock_5
 3073 D1:C7E7 E1 -  -  -  	pop          HL
 3074 D1:C7E8 ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 3075 D1:C7ED F9 -  -  -  	ld           SP,HL
 3076 D1:C7EE C3 F2 C7 D1 	jp           if_end_990
 3077 D1:C7F2 -  -  -  -  if_next_991:
 3078 D1:C7F2 -  -  -  -  if_end_990:
 3079 D1:C7F2 CD CF AC D1 	call         sub_block_leave
 3080 D1:C7F6 DD 27 F7 -  	ld           HL,(IX-9)
 3081 D1:C7F9 E5 -  -  -  	push         HL
 3082 D1:C7FA 3E 01 -  -  	ld           A,1
 3083 D1:C7FC E1 -  -  -  	pop          HL
 3084 D1:C7FD 11 00 00 00 	ld           DE,0
 3085 D1:C801 5F -  -  -  	ld           E,A
 3086 D1:C802 19 -  -  -  	add          HL,DE
 3087 D1:C803 DD 2F F7 -  	ld           (IX-9),HL
 3088 D1:C806 CD BB AC D1 	call         sub_block_enter
 3089 D1:C80A DD 27 F7 -  	ld           HL,(IX-9)
 3090 D1:C80D 7E -  -  -  	ld           A,(HL)
 3091 D1:C80E FE FF -  -  	cp           A,%11111111
 3092 D1:C810 C2 51 C8 D1 	jp           NZ,if_next_1007
 3093 D1:C814 CD BB AC D1 	call         sub_block_enter
 3094 D1:C818 DD 27 F1 -  	ld           HL,(IX-15)
 3095 D1:C81B 11 1E 00 00 	ld           DE,30
 3096 D1:C81F 19 -  -  -  	add          HL,DE
 3097 D1:C820 E5 -  -  -  	push         HL
 3098 D1:C821 DD 27 EE -  	ld           HL,(IX-18)
 3099 D1:C824 11 1E 00 00 	ld           DE,30
 3100 D1:C828 19 -  -  -  	add          HL,DE
 3101 D1:C829 E5 -  -  -  	push         HL
 3102 D1:C82A 21 0A 00 00 	ld           HL,10
 3103 D1:C82E E5 -  -  -  	push         HL
 3104 D1:C82F 21 0A 00 00 	ld           HL,10
 3105 D1:C833 E5 -  -  -  	push         HL
 3106 D1:C834 DD 27 F4 -  	ld           HL,(IX-12)
 3107 D1:C837 E5 -  -  -  	push         HL
 3108 D1:C838 21 00 00 00 	ld           HL,0
 3109 D1:C83C 39 -  -  -  	add          HL,SP
 3110 D1:C83D ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 3111 D1:C842 CD 53 AF D1 	call         drawBlock_5
 3112 D1:C846 E1 -  -  -  	pop          HL
 3113 D1:C847 ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 3114 D1:C84C F9 -  -  -  	ld           SP,HL
 3115 D1:C84D C3 51 C8 D1 	jp           if_end_1006
 3116 D1:C851 -  -  -  -  if_next_1007:
 3117 D1:C851 -  -  -  -  if_end_1006:
 3118 D1:C851 CD CF AC D1 	call         sub_block_leave
 3119 D1:C855 11 00 00 00 	ld           DE,0
 3120 D1:C859 -  -  -  -  displayBlock_end_765:
 3121 D1:C859 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 3122 D1:C85E DD E1 -  -  	pop          IX
 3123 D1:C860 C9 -  -  -  	ret          
 3124 D1:C861 -  -  -  -  graphics_1016:
 3125 D1:C861 DD E5 -  -  	push         IX                        ; push stack_start
 3126 D1:C863 ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 3127 D1:C868 F9 -  -  -  	ld           SP,HL
 3128 D1:C869 DD 21 00 00 
              00 -  -  -  	ld           IX,0
 3129 D1:C86E DD 39 -  -  	add          IX,SP
 3130 D1:C870 3E 94 -  -  	ld           A,148
 3131 D1:C872 F5 -  -  -  	push         AF
 3132 D1:C873 21 F0 00 00 	ld           HL,240
 3133 D1:C877 E5 -  -  -  	push         HL
 3134 D1:C878 21 6D 00 00 	ld           HL,109
 3135 D1:C87C E5 -  -  -  	push         HL
 3136 D1:C87D 21 00 00 00 	ld           HL,0
 3137 D1:C881 E5 -  -  -  	push         HL
 3138 D1:C882 CD D7 CA D1 	call         draw_vertical_line
 3139 D1:C886 3E 94 -  -  	ld           A,148
 3140 D1:C888 F5 -  -  -  	push         AF
 3141 D1:C889 21 F0 00 00 	ld           HL,240
 3142 D1:C88D E5 -  -  -  	push         HL
 3143 D1:C88E 21 D2 00 00 	ld           HL,210
 3144 D1:C892 E5 -  -  -  	push         HL
 3145 D1:C893 21 00 00 00 	ld           HL,0
 3146 D1:C897 E5 -  -  -  	push         HL
 3147 D1:C898 CD D7 CA D1 	call         draw_vertical_line
 3148 D1:C89C CD BB AC D1 	call         sub_block_enter
 3149 D1:C8A0 11 00 00 00 	ld           DE,0
 3150 D1:C8A4 21 FE 31 D0 	ld           HL,globalVars+8
 3151 D1:C8A8 56 -  -  -  	ld           D,(HL)
 3152 D1:C8A9 23 -  -  -  	inc          HL
 3153 D1:C8AA 5E -  -  -  	ld           E,(HL)
 3154 D1:C8AB D5 -  -  -  	push         DE
 3155 D1:C8AC 11 00 00 00 	ld           DE,0
 3156 D1:C8B0 21 00 32 D0 	ld           HL,globalVars+10
 3157 D1:C8B4 56 -  -  -  	ld           D,(HL)
 3158 D1:C8B5 23 -  -  -  	inc          HL
 3159 D1:C8B6 5E -  -  -  	ld           E,(HL)
 3160 D1:C8B7 D5 -  -  -  	push         DE
 3161 D1:C8B8 2A 02 32 D0 	ld           HL,(globalVars+12)
 3162 D1:C8BC E5 -  -  -  	push         HL
 3163 D1:C8BD 3A FC 31 D0 	ld           A,(globalVars+6)
 3164 D1:C8C1 E1 -  -  -  	pop          HL
 3165 D1:C8C2 11 00 00 00 	ld           DE,0
 3166 D1:C8C6 5F -  -  -  	ld           E,A
 3167 D1:C8C7 19 -  -  -  	add          HL,DE
 3168 D1:C8C8 E5 -  -  -  	push         HL
 3169 D1:C8C9 3A FD 31 D0 	ld           A,(globalVars+7)
 3170 D1:C8CD F5 -  -  -  	push         AF
 3171 D1:C8CE 21 00 00 00 	ld           HL,0
 3172 D1:C8D2 39 -  -  -  	add          HL,SP
 3173 D1:C8D3 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 3174 D1:C8D8 CD 52 C2 D1 	call         displayBlock_764
 3175 D1:C8DC E1 -  -  -  	pop          HL
 3176 D1:C8DD ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 3177 D1:C8E2 F9 -  -  -  	ld           SP,HL
 3178 D1:C8E3 CD BB AC D1 	call         sub_block_enter
 3179 D1:C8E7 21 DC 00 00 	ld           HL,220
 3180 D1:C8EB E5 -  -  -  	push         HL
 3181 D1:C8EC 21 14 00 00 	ld           HL,20
 3182 D1:C8F0 E5 -  -  -  	push         HL
 3183 D1:C8F1 2A 07 32 D0 	ld           HL,(globalVars+17)
 3184 D1:C8F5 E5 -  -  -  	push         HL
 3185 D1:C8F6 21 03 00 00 	ld           HL,3
 3186 D1:C8FA E5 -  -  -  	push         HL
 3187 D1:C8FB 3E 00 -  -  	ld           A,0
 3188 D1:C8FD F5 -  -  -  	push         AF
 3189 D1:C8FE 21 00 00 00 	ld           HL,0
 3190 D1:C902 39 -  -  -  	add          HL,SP
 3191 D1:C903 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 3192 D1:C908 CD C8 B6 D1 	call         displayBase10_343
 3193 D1:C90C E1 -  -  -  	pop          HL
 3194 D1:C90D ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 3195 D1:C912 F9 -  -  -  	ld           SP,HL
 3196 D1:C913 21 00 00 00 	ld           HL,0
 3197 D1:C917 E5 -  -  -  	push         HL
 3198 D1:C918 -  -  -  -  while_start1031:
 3199 D1:C918 DD 27 FD -  	ld           HL,(IX-3)
 3200 D1:C91B E5 -  -  -  	push         HL
 3201 D1:C91C 21 14 00 00 	ld           HL,20
 3202 D1:C920 D1 -  -  -  	pop          DE
 3203 D1:C921 EB -  -  -  	ex           DE,HL
 3204 D1:C922 CD 69 AC D1 	call         int_smaller
 3205 D1:C926 FE FF -  -  	cp           A,%11111111
 3206 D1:C928 C2 07 CA D1 	jp           NZ,while_end1032
 3207 D1:C92C CD BB AC D1 	call         sub_block_enter
 3208 D1:C930 21 00 00 00 	ld           HL,0
 3209 D1:C934 E5 -  -  -  	push         HL
 3210 D1:C935 -  -  -  -  while_start1039:
 3211 D1:C935 DD 27 FA -  	ld           HL,(IX-6)
 3212 D1:C938 E5 -  -  -  	push         HL
 3213 D1:C939 21 0A 00 00 	ld           HL,10
 3214 D1:C93D D1 -  -  -  	pop          DE
 3215 D1:C93E EB -  -  -  	ex           DE,HL
 3216 D1:C93F CD 69 AC D1 	call         int_smaller
 3217 D1:C943 FE FF -  -  	cp           A,%11111111
 3218 D1:C945 C2 F8 C9 D1 	jp           NZ,while_end1040
 3219 D1:C949 CD BB AC D1 	call         sub_block_enter
 3220 D1:C94D CD BB AC D1 	call         sub_block_enter
 3221 D1:C951 DD 27 FA -  	ld           HL,(IX-6)
 3222 D1:C954 11 64 00 00 	ld           DE,100
 3223 D1:C958 19 -  -  -  	add          HL,DE
 3224 D1:C959 E5 -  -  -  	push         HL
 3225 D1:C95A DD 27 FD -  	ld           HL,(IX-3)
 3226 D1:C95D 11 64 00 00 	ld           DE,100
 3227 D1:C961 19 -  -  -  	add          HL,DE
 3228 D1:C962 E5 -  -  -  	push         HL
 3229 D1:C963 21 00 00 00 	ld           HL,0
 3230 D1:C967 39 -  -  -  	add          HL,SP
 3231 D1:C968 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 3232 D1:C96D CD FC B7 D1 	call         getTile_421
 3233 D1:C971 E1 -  -  -  	pop          HL
 3234 D1:C972 ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 3235 D1:C977 F9 -  -  -  	ld           SP,HL
 3236 D1:C978 D5 -  -  -  	push         DE
 3237 D1:C979 CD BB AC D1 	call         sub_block_enter
 3238 D1:C97D DD 27 F7 -  	ld           HL,(IX-9)
 3239 D1:C980 E5 -  -  -  	push         HL
 3240 D1:C981 3E 00 -  -  	ld           A,0
 3241 D1:C983 F5 -  -  -  	push         AF
 3242 D1:C984 E1 -  -  -  	pop          HL
 3243 D1:C985 F1 -  -  -  	pop          AF
 3244 D1:C986 CD 57 AC D1 	call         byte_not_equals
 3245 D1:C98A FE FF -  -  	cp           A,%11111111
 3246 D1:C98C C2 E5 C9 D1 	jp           NZ,if_next_1055
 3247 D1:C990 CD BB AC D1 	call         sub_block_enter
 3248 D1:C994 DD 27 FA -  	ld           HL,(IX-6)
 3249 D1:C997 E5 -  -  -  	push         HL
 3250 D1:C998 21 0A 00 00 	ld           HL,10
 3251 D1:C99C E5 -  -  -  	push         HL
 3252 D1:C99D D1 -  -  -  	pop          DE
 3253 D1:C99E C1 -  -  -  	pop          BC
 3254 D1:C99F CD 32 AD D1 	call         multiply_int
 3255 D1:C9A3 11 6E 00 00 	ld           DE,110
 3256 D1:C9A7 19 -  -  -  	add          HL,DE
 3257 D1:C9A8 E5 -  -  -  	push         HL
 3258 D1:C9A9 DD 27 FD -  	ld           HL,(IX-3)
 3259 D1:C9AC E5 -  -  -  	push         HL
 3260 D1:C9AD 21 0A 00 00 	ld           HL,10
 3261 D1:C9B1 E5 -  -  -  	push         HL
 3262 D1:C9B2 D1 -  -  -  	pop          DE
 3263 D1:C9B3 C1 -  -  -  	pop          BC
 3264 D1:C9B4 CD 32 AD D1 	call         multiply_int
 3265 D1:C9B8 11 28 00 00 	ld           DE,40
 3266 D1:C9BC 19 -  -  -  	add          HL,DE
 3267 D1:C9BD E5 -  -  -  	push         HL
 3268 D1:C9BE 21 0A 00 00 	ld           HL,10
 3269 D1:C9C2 E5 -  -  -  	push         HL
 3270 D1:C9C3 21 0A 00 00 	ld           HL,10
 3271 D1:C9C7 E5 -  -  -  	push         HL
 3272 D1:C9C8 DD 27 F7 -  	ld           HL,(IX-9)
 3273 D1:C9CB E5 -  -  -  	push         HL
 3274 D1:C9CC 21 00 00 00 	ld           HL,0
 3275 D1:C9D0 39 -  -  -  	add          HL,SP
 3276 D1:C9D1 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 3277 D1:C9D6 CD 53 AF D1 	call         drawBlock_5
 3278 D1:C9DA E1 -  -  -  	pop          HL
 3279 D1:C9DB ED 73 E9 AE 
              D1 -  -  -  	ld           (callStack),SP
 3280 D1:C9E0 F9 -  -  -  	ld           SP,HL
 3281 D1:C9E1 C3 E5 C9 D1 	jp           if_end_1054
 3282 D1:C9E5 -  -  -  -  if_next_1055:
 3283 D1:C9E5 -  -  -  -  if_end_1054:
 3284 D1:C9E5 CD CF AC D1 	call         sub_block_leave
 3285 D1:C9E9 DD 27 FA -  	ld           HL,(IX-6)
 3286 D1:C9EC 23 -  -  -  	inc          HL
 3287 D1:C9ED DD 2F FA -  	ld           (IX-6),HL
 3288 D1:C9F0 CD CF AC D1 	call         sub_block_leave
 3289 D1:C9F4 C3 35 C9 D1 	jp           while_start1039
 3290 D1:C9F8 -  -  -  -  while_end1040:
 3291 D1:C9F8 DD 27 FD -  	ld           HL,(IX-3)
 3292 D1:C9FB 23 -  -  -  	inc          HL
 3293 D1:C9FC DD 2F FD -  	ld           (IX-3),HL
 3294 D1:C9FF CD CF AC D1 	call         sub_block_leave
 3295 D1:CA03 C3 18 C9 D1 	jp           while_start1031
 3296 D1:CA07 -  -  -  -  while_end1032:
 3297 D1:CA07 CD FC CA D1 	call         write_buffer
 3298 D1:CA0B 3E 4A -  -  	ld           A,74
 3299 D1:CA0D F5 -  -  -  	push         AF
 3300 D1:CA0E CD AB CA D1 	call         clear_buffer
 3301 D1:CA12 11 00 00 00 	ld           DE,0
 3302 D1:CA16 -  -  -  -  graphics_end_1017:
 3303 D1:CA16 ED 7B E9 AE 
              D1 -  -  -  	ld           SP,(callStack)
 3304 D1:CA1B DD E1 -  -  	pop          IX
 3305 D1:CA1D C9 -  -  -  	ret          
 3306 D1:CA1E -  -  -  -  
 3307 D1:CA1E -  -  -  -  #include "root//std/Graphics.asm"
Listing for file "C:\Users\sande\IdeaProjects\ti_compile\root\\std\Graphics.asm"
    1 D1:CA1E -  -  -  -  SCREEN_WIDTH .equ 320
    2 D1:CA1E -  -  -  -  SCREEN_HEIGHT .equ 240
    3 D1:CA1E -  -  -  -  VRAM_B1 .equ vRam
    4 D1:CA1E -  -  -  -  VRAM_B2 .equ vRam + 38400
    5 D1:CA1E -  -  -  -  BUFFER_B1 .equ vRam + 76800
    6 D1:CA1E -  -  -  -  BUFFER_B2 .equ vRam + 76800 + 38400
    7 D1:CA1E -  -  -  -  
    8 D1:CA1E -  -  -  -  
    9 D1:CA1E -  -  -  -  
   10 D1:CA1E -  -  -  -  set_pixel:
   11 D1:CA1E E1 -  -  -      pop          HL
   12 D1:CA1F 22 4A AB D1     ld           (Var_Safe1), HL
   13 D1:CA23 -  -  -  -  
   14 D1:CA23 D1 -  -  -      pop          DE; B = color
   15 D1:CA24 C1 -  -  -      pop          BC; HL = Y
   16 D1:CA25 D5 -  -  -      push         DE
   17 D1:CA26 -  -  -  -  
   18 D1:CA26 3E 78 -  -      ld           A, 120
   19 D1:CA28 B9 -  -  -      cp           A, C
   20 D1:CA29 D2 3E CA D1     jp           NC, set_pixel__block_2
   21 D1:CA2D -  -  -  -  
   22 D1:CA2D -  -  -  -  set_pixel__block_1:
   23 D1:CA2D 11 40 01 00     ld           DE, SCREEN_WIDTH
   24 D1:CA31 CD 32 AD D1     call         multiply_int
   25 D1:CA35 -  -  -  -  
   26 D1:CA35 11 00 00 D4     ld           DE, VRAM_B1
   27 D1:CA39 19 -  -  -      add          HL, DE
   28 D1:CA3A -  -  -  -  
   29 D1:CA3A C3 8C CA D1     jp           pixel_set
   30 D1:CA3E -  -  -  -  set_pixel__block_2:
   31 D1:CA3E 11 78 00 00     ld           DE, 120
   32 D1:CA42 ED 52 -  -      sbc          HL, DE
   33 D1:CA44 -  -  -  -  
   34 D1:CA44 11 40 01 00     ld           DE, SCREEN_WIDTH
   35 D1:CA48 CD 32 AD D1     call         multiply_int
   36 D1:CA4C -  -  -  -  
   37 D1:CA4C 11 00 00 D4     ld           DE, VRAM_B1
   38 D1:CA50 19 -  -  -      add          HL, DE
   39 D1:CA51 -  -  -  -  
   40 D1:CA51 C3 8C CA D1     jp           pixel_set
   41 D1:CA55 -  -  -  -  
   42 D1:CA55 -  -  -  -  
   43 D1:CA55 -  -  -  -  
   44 D1:CA55 -  -  -  -  buffer_pixel:
   45 D1:CA55 E1 -  -  -      pop          HL
   46 D1:CA56 22 4A AB D1     ld           (Var_Safe1), HL
   47 D1:CA5A -  -  -  -  
   48 D1:CA5A D1 -  -  -      pop          DE; B = color
   49 D1:CA5B C1 -  -  -      pop          BC; HL = Y
   50 D1:CA5C D5 -  -  -      push         DE
   51 D1:CA5D -  -  -  -  
   52 D1:CA5D 3E 78 -  -      ld           A, 120
   53 D1:CA5F B9 -  -  -      cp           A, C
   54 D1:CA60 D2 75 CA D1     jp           NC, buffer_pixel__block_2
   55 D1:CA64 -  -  -  -  
   56 D1:CA64 -  -  -  -  buffer_pixel__block_1:
   57 D1:CA64 11 40 01 00     ld           DE, SCREEN_WIDTH
   58 D1:CA68 CD 32 AD D1     call         multiply_int
   59 D1:CA6C -  -  -  -  
   60 D1:CA6C 11 00 2C D5     ld           DE, BUFFER_B1
   61 D1:CA70 19 -  -  -      add          HL, DE
   62 D1:CA71 -  -  -  -  
   63 D1:CA71 C3 8C CA D1     jp           pixel_set
   64 D1:CA75 -  -  -  -  buffer_pixel__block_2:
   65 D1:CA75 11 78 00 00     ld           DE, 120
   66 D1:CA79 ED 52 -  -      sbc          HL, DE
   67 D1:CA7B -  -  -  -  
   68 D1:CA7B 11 40 01 00     ld           DE, SCREEN_WIDTH
   69 D1:CA7F CD 32 AD D1     call         multiply_int
   70 D1:CA83 -  -  -  -  
   71 D1:CA83 11 00 2C D5     ld           DE, BUFFER_B1
   72 D1:CA87 19 -  -  -      add          HL, DE
   73 D1:CA88 -  -  -  -  
   74 D1:CA88 C3 8C CA D1     jp           pixel_set
   75 D1:CA8C -  -  -  -  
   76 D1:CA8C -  -  -  -  
   77 D1:CA8C -  -  -  -  
   78 D1:CA8C -  -  -  -  pixel_set:
   79 D1:CA8C F1 -  -  -      pop          AF
   80 D1:CA8D D1 -  -  -      pop          DE
   81 D1:CA8E 19 -  -  -      add          HL, DE
   82 D1:CA8F -  -  -  -  
   83 D1:CA8F 77 -  -  -      ld           (HL), A
   84 D1:CA90 -  -  -  -  
   85 D1:CA90 -  -  -  -  
   86 D1:CA90 2A 4A AB D1     ld           HL, (Var_Safe1)
   87 D1:CA94 E9 -  -  -      jp           (HL)
   88 D1:CA95 -  -  -  -  
   89 D1:CA95 -  -  -  -  
   90 D1:CA95 -  -  -  -  
   91 D1:CA95 -  -  -  -  clear_screen:
   92 D1:CA95 D1 -  -  -      pop          DE
   93 D1:CA96 F1 -  -  -      pop          AF
   94 D1:CA97 -  -  -  -  
   95 D1:CA97 01 00 2C D5     ld           BC, VRAM_B1 + 76800
   96 D1:CA9B 21 00 00 D4     ld           HL, VRAM_B1
   97 D1:CA9F -  -  -  -  clear_screen__loop:
   98 D1:CA9F 77 -  -  -      ld           (HL), A
   99 D1:CAA0 23 -  -  -      inc          HL
  100 D1:CAA1 A7 -  -  -      and          A
  101 D1:CAA2 ED 42 -  -      sbc          HL, BC
  102 D1:CAA4 09 -  -  -      add          HL, BC
  103 D1:CAA5 C2 9F CA D1     jp           NZ, clear_screen__loop
  104 D1:CAA9 -  -  -  -  
  105 D1:CAA9 EB -  -  -      ex           DE, HL
  106 D1:CAAA E9 -  -  -      jp           (HL)
  107 D1:CAAB -  -  -  -  
  108 D1:CAAB -  -  -  -  
  109 D1:CAAB -  -  -  -  
  110 D1:CAAB -  -  -  -  clear_buffer:
  111 D1:CAAB D1 -  -  -      pop          DE
  112 D1:CAAC F1 -  -  -      pop          AF
  113 D1:CAAD -  -  -  -  
  114 D1:CAAD 01 00 58 D6     ld           BC, BUFFER_B1 + 76800
  115 D1:CAB1 21 00 2C D5     ld           HL, BUFFER_B1
  116 D1:CAB5 -  -  -  -  clear_buffer__loop:
  117 D1:CAB5 77 -  -  -      ld           (HL), A
  118 D1:CAB6 23 -  -  -      inc          HL
  119 D1:CAB7 A7 -  -  -      and          A
  120 D1:CAB8 ED 42 -  -      sbc          HL, BC
  121 D1:CABA 09 -  -  -      add          HL, BC
  122 D1:CABB C2 B5 CA D1     jp           NZ, clear_buffer__loop
  123 D1:CABF -  -  -  -  
  124 D1:CABF EB -  -  -      ex           DE, HL
  125 D1:CAC0 E9 -  -  -      jp           (HL)
  126 D1:CAC1 -  -  -  -  
  127 D1:CAC1 -  -  -  -  
  128 D1:CAC1 -  -  -  -  
  129 D1:CAC1 -  -  -  -  set_mode:
  130 D1:CAC1 E1 -  -  -      pop         HL
  131 D1:CAC2 F1 -  -  -      pop         AF
  132 D1:CAC3 FE FF -  -      cp          A, regTrue
  133 D1:CAC5 CA D0 CA D1     jp          Z, text_mode
  134 D1:CAC9 -  -  -  -  draw_mode:
  135 D1:CAC9 3E 27 -  -      ld          A, $27
  136 D1:CACB 32 18 00 E3     ld          ($E30018), A
  137 D1:CACF E9 -  -  -      jp          (HL)
  138 D1:CAD0 -  -  -  -  text_mode:
  139 D1:CAD0 3E 2D -  -      ld          A, $2D
  140 D1:CAD2 32 18 00 E3     ld          ($E30018), A
  141 D1:CAD6 E9 -  -  -      jp          (HL)
  142 D1:CAD7 -  -  -  -  
  143 D1:CAD7 -  -  -  -  
  144 D1:CAD7 -  -  -  -  
  145 D1:CAD7 -  -  -  -  draw_vertical_line: ;color: byte, width: int, X: int, Y: int
  146 D1:CAD7 E1 -  -  -      pop     HL
  147 D1:CAD8 22 4A AB D1     ld      (Var_Safe1), HL
  148 D1:CADC -  -  -  -  
  149 D1:CADC D1 -  -  -      pop     DE
  150 D1:CADD 01 40 01 00     ld      BC, SCREEN_WIDTH
  151 D1:CAE1 CD 32 AD D1     call    multiply_int
  152 D1:CAE5 -  -  -  -  
  153 D1:CAE5 D1 -  -  -      pop     DE
  154 D1:CAE6 19 -  -  -      add     HL, DE
  155 D1:CAE7 11 00 2C D5     ld      DE, BUFFER_B1
  156 D1:CAEB 19 -  -  -      add     HL, DE
  157 D1:CAEC 11 40 01 00     ld      DE, SCREEN_WIDTH
  158 D1:CAF0 -  -  -  -  
  159 D1:CAF0 C1 -  -  -      pop     BC
  160 D1:CAF1 41 -  -  -      ld      B, C
  161 D1:CAF2 -  -  -  -  
  162 D1:CAF2 F1 -  -  -      pop     AF
  163 D1:CAF3 -  -  -  -  
  164 D1:CAF3 -  -  -  -  draw_vertical_line__loop:
  165 D1:CAF3 77 -  -  -          ld      (HL), A
  166 D1:CAF4 19 -  -  -          add     HL, DE
  167 D1:CAF5 10 FC -  -      DJNZ draw_vertical_line__loop
  168 D1:CAF7 -  -  -  -  
  169 D1:CAF7 2A 4A AB D1     ld      HL, (Var_Safe1)
  170 D1:CAFB E9 -  -  -      jp      (HL)
  171 D1:CAFC -  -  -  -  
  172 D1:CAFC -  -  -  -  
  173 D1:CAFC -  -  -  -  
  174 D1:CAFC -  -  -  -  write_buffer:
  175 D1:CAFC 01 00 2C 01     ld           BC, 76800
  176 D1:CB00 21 00 2C D5     ld           HL, BUFFER_B1
  177 D1:CB04 11 00 00 D4     ld           DE, VRAM_B1
  178 D1:CB08 ED B0 -  -      LDIR
  179 D1:CB0A C9 -  -  -      ret
  180 D1:CB0B -  -  -  -  
  181 D1:CB0B -  -  -  -  
  182 D1:CB0B -  -  -  -  
  183 D1:CB0B -  -  -  -  display_bit_map: ;Color: byte, Width: byte, Height: byte, BmpLocation: pointer, X: int, Y: int
  184 D1:CB0B E1 -  -  -      pop     HL
  185 D1:CB0C 22 4A AB D1     ld      (Var_Safe1), HL
  186 D1:CB10 -  -  -  -  
  187 D1:CB10 D1 -  -  -      pop     DE
  188 D1:CB11 01 40 01 00     ld      BC, SCREEN_WIDTH
  189 D1:CB15 CD 32 AD D1     call    multiply_int
  190 D1:CB19 D1 -  -  -      pop     DE
  191 D1:CB1A 19 -  -  -      add     HL, DE
  192 D1:CB1B 11 00 2C D5     ld      DE, BUFFER_B1
  193 D1:CB1F 19 -  -  -      add     HL, DE
  194 D1:CB20 11 40 01 00     ld      DE, SCREEN_WIDTH
  195 D1:CB24 -  -  -  -  
  196 D1:CB24 -  -  -  -  
  197 D1:CB24 -  -  -  -      
Listing for file "asm/main.asm"
 3308 D1:CB24 -  -  -  -  #include "root//mapping.asm"
Listing for file "C:\Users\sande\IdeaProjects\ti_compile\root\\mapping.asm"
    1 D1:CB24 -  -  -  -  blocks:
    2 D1:CB24 -  -  -  -  block_i:
    3 D1:CB24 00 00 FF 00 
              00 00 FF 00 
              00 00 FF 00 
              00 00 FF 00     .db 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0
    4 D1:CB34 00 00 00 00 
              00 00 00 00 
              FF FF FF FF 
              00 00 00 00     .db 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0
    5 D1:CB44 00 00 FF 00 
              00 00 FF 00 
              00 00 FF 00 
              00 00 FF 00     .db 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0
    6 D1:CB54 00 00 00 00 
              00 00 00 00 
              FF FF FF FF 
              00 00 00 00     .db 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0
    7 D1:CB64 -  -  -  -  block_o:
    8 D1:CB64 00 00 00 00 
              00 FF FF 00 
              00 FF FF 00 
              00 00 00 00     .db 0, 0, 0, 0, 0, 255, 255, 0, 0, 255, 255, 0, 0, 0, 0, 0
    9 D1:CB74 00 00 00 00 
              00 FF FF 00 
              00 FF FF 00 
              00 00 00 00     .db 0, 0, 0, 0, 0, 255, 255, 0, 0, 255, 255, 0, 0, 0, 0, 0
   10 D1:CB84 00 00 00 00 
              00 FF FF 00 
              00 FF FF 00 
              00 00 00 00     .db 0, 0, 0, 0, 0, 255, 255, 0, 0, 255, 255, 0, 0, 0, 0, 0
   11 D1:CB94 00 00 00 00 
              00 FF FF 00 
              00 FF FF 00 
              00 00 00 00     .db 0, 0, 0, 0, 0, 255, 255, 0, 0, 255, 255, 0, 0, 0, 0, 0
   12 D1:CBA4 -  -  -  -  block_j:
   13 D1:CBA4 00 00 00 00 
              00 FF FF FF 
              00 00 00 FF 
              00 00 00 00     .db 0, 0, 0, 0, 0, 255, 255, 255, 0, 0, 0, 255, 0, 0, 0, 0
   14 D1:CBB4 00 00 FF 00 
              00 00 FF 00 
              00 FF FF 00 
              00 00 00 00     .db 0, 0, 255, 0, 0, 0, 255, 0, 0, 255, 255, 0, 0, 0, 0, 0
   15 D1:CBC4 00 FF 00 00 
              00 FF FF FF 
              00 00 00 00 
              00 00 00 00     .db 0, 255, 0, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0
   16 D1:CBD4 00 00 FF FF 
              00 00 FF 00 
              00 00 FF 00 
              00 00 00 00     .db 0, 0, 255, 255, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 0, 0
   17 D1:CBE4 -  -  -  -  block_l:
   18 D1:CBE4 00 00 00 00 
              00 FF FF FF 
              00 FF 00 00 
              00 00 00 00     .db 0, 0, 0, 0, 0, 255, 255, 255, 0, 255, 0, 0, 0, 0, 0, 0
   19 D1:CBF4 00 FF FF 00 
              00 00 FF 00 
              00 00 FF 00 
              00 00 00 00     .db 0, 255, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 0, 0
   20 D1:CC04 00 00 00 FF 
              00 FF FF FF 
              00 00 00 00 
              00 00 00 00     .db 0, 0, 0, 255, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0
   21 D1:CC14 00 00 FF 00 
              00 00 FF 00 
              00 00 FF FF 
              00 00 00 00     .db 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 255, 0, 0, 0, 0
   22 D1:CC24 -  -  -  -  block_s:
   23 D1:CC24 00 00 00 00 
              00 00 FF FF 
              00 FF FF 00 
              00 00 00 00     .db 0, 0, 0, 0, 0, 0, 255, 255, 0, 255, 255, 0, 0, 0, 0, 0
   24 D1:CC34 00 00 FF 00 
              00 00 FF FF 
              00 00 00 FF 
              00 00 00 00     .db 0, 0, 255, 0, 0, 0, 255, 255, 0, 0, 0, 255, 0, 0, 0, 0
   25 D1:CC44 00 00 00 00 
              00 00 FF FF 
              00 FF FF 00 
              00 00 00 00     .db 0, 0, 0, 0, 0, 0, 255, 255, 0, 255, 255, 0, 0, 0, 0, 0
   26 D1:CC54 00 00 FF 00 
              00 00 FF FF 
              00 00 00 FF 
              00 00 00 00     .db 0, 0, 255, 0, 0, 0, 255, 255, 0, 0, 0, 255, 0, 0, 0, 0
   27 D1:CC64 -  -  -  -  block_t:
   28 D1:CC64 00 00 00 00 
              00 FF FF FF 
              00 00 FF 00 
              00 00 00 00     .db 0, 0, 0, 0,  0, 255, 255, 255,  0, 0, 255, 0,  0, 0, 0, 0
   29 D1:CC74 00 00 FF 00 
              00 FF FF 00 
              00 00 FF 00 
              00 00 00 00     .db 0, 0, 255, 0,  0, 255, 255, 0,  0, 0, 255, 0,  0, 0, 0, 0
   30 D1:CC84 00 00 FF 00 
              00 FF FF FF 
              00 00 00 00 
              00 00 00 00     .db 0, 0, 255, 0,  0, 255, 255, 255,  0, 0, 0, 0,  0, 0, 0, 0
   31 D1:CC94 00 00 FF 00 
              00 00 FF FF 
              00 00 FF 00 
              00 00 00 00     .db 0, 0, 255, 0,  0, 0, 255, 255,  0, 0, 255, 0,  0, 0, 0, 0
   32 D1:CCA4 -  -  -  -  block_z:
   33 D1:CCA4 00 00 00 00 
              00 FF FF 00 
              00 00 FF FF 
              00 00 00 00     .db 0, 0, 0, 0, 0, 255, 255, 0, 0, 0, 255, 255, 0, 0, 0, 0
   34 D1:CCB4 00 00 00 FF 
              00 00 FF FF 
              00 00 FF 00 
              00 00 00 00     .db 0, 0, 0, 255, 0, 0, 255, 255, 0, 0, 255, 0, 0, 0, 0, 0
   35 D1:CCC4 00 00 00 00 
              00 FF FF 00 
              00 00 FF FF 
              00 00 00 00     .db 0, 0, 0, 0, 0, 255, 255, 0, 0, 0, 255, 255, 0, 0, 0, 0
   36 D1:CCD4 00 00 00 FF 
              00 00 FF FF 
              00 00 FF 00 
              00 00 00 00     .db 0, 0, 0, 255, 0, 0, 255, 255, 0, 0, 255, 0, 0, 0, 0, 0
   37 D1:CCE4 -  -  -  -  
   38 D1:CCE4 -  -  -  -  block_color:
   39 D1:CCE4 1F E7 F0 E2 
              E0 90 07 -      .db 31, 231, 240, 226, 224, 144, 7
   40 D1:CCEB -  -  -  -  
Listing for file "asm/main.asm"
 3309 D1:CCEB -  -  -  -  #include "root//std/Chars.asm"
Listing for file "C:\Users\sande\IdeaProjects\ti_compile\root\\std\Chars.asm"
    1 D1:CCEB -  -  -  -  number_chars:
    2 D1:CCEB -  -  -  -  char_0:
    3 D1:CCEB 20 50 50 50 
              20 -  -  -      .db %00100000, %01010000, %01010000, %01010000, %00100000
    4 D1:CCF0 -  -  -  -  char_1:
    5 D1:CCF0 60 20 20 20 
              70 -  -  -      .db %01100000, %00100000, %00100000, %00100000, %01110000
    6 D1:CCF5 -  -  -  -  char_2:
    7 D1:CCF5 60 10 08 20 
              70 -  -  -      .db %01100000, %00010000, %00001000, %00100000, %01110000
    8 D1:CCFA -  -  -  -  char_3:
    9 D1:CCFA 60 10 60 10 
              60 -  -  -      .db %01100000, %00010000, %01100000, %00010000, %01100000
   10 D1:CCFF -  -  -  -  char_4:
   11 D1:CCFF 40 50 50 70 
              10 -  -  -      .db %01000000, %01010000, %01010000, %01110000, %00010000
   12 D1:CD04 -  -  -  -  char_5:
   13 D1:CD04 70 40 70 10 
              70 -  -  -      .db %01110000, %01000000, %01110000, %00010000, %01110000
   14 D1:CD09 -  -  -  -  char_6:
   15 D1:CD09 10 20 70 50 
              70 -  -  -      .db %00010000, %00100000, %01110000, %01010000, %01110000
   16 D1:CD0E -  -  -  -  char_7:
   17 D1:CD0E 70 10 10 20 
              20 -  -  -      .db %01110000, %00010000, %00010000, %00100000, %00100000
   18 D1:CD13 -  -  -  -  char_8:
   19 D1:CD13 70 50 70 50 
              70 -  -  -      .db %01110000, %01010000, %01110000, %01010000, %01110000
   20 D1:CD18 -  -  -  -  char_9:
   21 D1:CD18 70 50 70 10 
              20 -  -  -      .db %01110000, %01010000, %01110000, %00010000, %00100000
   22 D1:CD1D -  -  -  -  char_block:
   23 D1:CD1D FF FF FF FF 
              FF -  -  -      .db %11111111, %11111111, %11111111, %11111111, %11111111
Listing for file "asm/main.asm"
 3310 D1:CD22 -  -  -  -  string_755:
 3311 D1:CD22 00 -  -  -  	.db          "", 0
