    1 00:0000 -  -  -  -  #include "asm/include.inc"
Listing for file "C:\Users\sande\IdeaProjects\ti_compile\asm\include.inc"
    1 00:0000 -  -  -  -  ;TI-84 Plus CE Include File
    2 00:0000 -  -  -  -  
    3 00:0000 -  -  -  -  ;Various Parts Contributed by
    4 00:0000 -  -  -  -  ;- BrandonW
    5 00:0000 -  -  -  -  ;- calc84
    6 00:0000 -  -  -  -  ;- MateoConLechuga
    7 00:0000 -  -  -  -  ;- Runer112
    8 00:0000 -  -  -  -  ;- tr1p1ea
    9 00:0000 -  -  -  -  ;- Kerm Martian
   10 00:0000 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "asm/main.asm"
    2 00:0000 -  -  -  -  .assume	ADL=1
    3 00:0000 -  -  -  -  .org	userMem-2
    4 D1:A87F EF 7B -  -  	.db          tExtTok,tAsm84CeCmp
    5 D1:A881 -  -  -  -  	             
    6 D1:A881 FD CB 0D D6 	set          AppAutoScroll,(IY + AppFlags)
    7 D1:A885 ED 73 EE AB 
              D1 -  -  -  	ld           (StackSave),SP
    8 D1:A88A 21 45 23 D1 	ld           HL,callStackStart
    9 D1:A88E 22 F1 AB D1 	ld           (callStack),HL
   10 D1:A892 31 B2 06 D1 	ld           SP,stackStart
   11 D1:A896 CD 06 A9 D1 	call         init
   12 D1:A89A CD 28 08 02 	call         _homeup
   13 D1:A89E CD 10 08 02 	call         _ClrScrnFull
   14 D1:A8A2 -  -  -  -  	             
   15 D1:A8A2 3E 00 -  -  	ld           A,0
   16 D1:A8A4 F5 -  -  -  	push         AF
   17 D1:A8A5 -  -  -  -  while_start21:
   18 D1:A8A5 2A AF 06 D1 	ld           HL,(stackStart-3)
   19 D1:A8A9 E5 -  -  -  	push         HL
   20 D1:A8AA 3E 1E -  -  	ld           A,30
   21 D1:A8AC F5 -  -  -  	push         AF
   22 D1:A8AD E1 -  -  -  	pop          HL
   23 D1:A8AE F1 -  -  -  	pop          AF
   24 D1:A8AF CD E9 A9 D1 	call         byte_smaller
   25 D1:A8B3 FE FF -  -  	cp           A,%11111111
   26 D1:A8B5 C2 F5 A8 D1 	jp           NZ,while_end22
   27 D1:A8B9 CD 75 AA D1 	call         sub_block_enter
   28 D1:A8BD CD 75 AA D1 	call         sub_block_enter
   29 D1:A8C1 2A AF 06 D1 	ld           HL,(stackStart-3)
   30 D1:A8C5 E5 -  -  -  	push         HL
   31 D1:A8C6 21 00 00 00 	ld           HL,0
   32 D1:A8CA 39 -  -  -  	add          HL,SP
   33 D1:A8CB ED 7B F1 AB 
              D1 -  -  -  	ld           SP,(callStack)
   34 D1:A8D0 CD F7 AB D1 	call         fib_2
   35 D1:A8D4 E1 -  -  -  	pop          HL
   36 D1:A8D5 ED 73 F1 AB 
              D1 -  -  -  	ld           (callStack),SP
   37 D1:A8DA F9 -  -  -  	ld           SP,HL
   38 D1:A8DB D5 -  -  -  	push         DE
   39 D1:A8DC CD D7 A9 D1 	call         printLn_int
   40 D1:A8E0 2A AF 06 D1 	ld           HL,(stackStart-3)
   41 D1:A8E4 E5 -  -  -  	push         HL
   42 D1:A8E5 F1 -  -  -  	pop          AF
   43 D1:A8E6 3C -  -  -  	inc          A
   44 D1:A8E7 F5 -  -  -  	push         AF
   45 D1:A8E8 E1 -  -  -  	pop          HL
   46 D1:A8E9 22 AF 06 D1 	ld           (stackStart-3),HL
   47 D1:A8ED CD 89 AA D1 	call         sub_block_leave
   48 D1:A8F1 C3 A5 A8 D1 	jp           while_start21
   49 D1:A8F5 -  -  -  -  while_end22:
   50 D1:A8F5 -  -  -  -  	             
   51 D1:A8F5 -  -  -  -  ProgramExit:
   52 D1:A8F5 CD 10 08 02 	call         _ClrScrnFull
   53 D1:A8F9 FD CB 00 AE 	res          donePrgm,(iy+doneFlags)
   54 D1:A8FD ED 7B EE AB 
              D1 -  -  -  	ld           SP,(StackSave)
   55 D1:A902 C9 -  -  -  	ret          
   56 D1:A903 -  -  -  -  #include "asm/defaults.asm"
Listing for file "C:\Users\sande\IdeaProjects\ti_compile\asm\defaults.asm"
    1 D1:A903 -  -  -  -  HEAP_START .equ saveSScreen+14630
    2 D1:A903 -  -  -  -  HEAP_END .equ 21945
    3 D1:A903 -  -  -  -  MAX_HEAP_ELEMENT_SIZE .equ 65536
    4 D1:A903 -  -  -  -  MAX_STRING_SIZE .equ 255
    5 D1:A903 -  -  -  -  
    6 D1:A903 -  -  -  -  
    7 D1:A903 -  -  -  -  
    8 D1:A903 -  -  -  -  regTRUE .equ %11111111
    9 D1:A903 -  -  -  -  regFALSE .equ %00000000
   10 D1:A903 -  -  -  -  
   11 D1:A903 -  -  -  -  Var_Safe1:
   12 D1:A903 00 00 00 -      .db 0,0,0
   13 D1:A906 -  -  -  -  
   14 D1:A906 -  -  -  -  
   15 D1:A906 -  -  -  -  
   16 D1:A906 -  -  -  -  init:										; initializes stuff
   17 D1:A906 -  -  -  -      ;ld              HL, OP1
   18 D1:A906 -  -  -  -      ;call            _PutS
   19 D1:A906 -  -  -  -      ;push            IX
   20 D1:A906 -  -  -  -      ;ld              HL, symTable
   21 D1:A906 -  -  -  -      ;ld              IX, OP1
   22 D1:A906 -  -  -  -      ;call            fdetect
   23 D1:A906 -  -  -  -      ;;jp              NZ, thrown_error
   24 D1:A906 -  -  -  -      ;pop             IX
   25 D1:A906 -  -  -  -      ;push            BC
   26 D1:A906 -  -  -  -      ;pop             HL
   27 D1:A906 -  -  -  -  ;
   28 D1:A906 -  -  -  -      ;;ld              HL, saveMemory-MemoryStart+4
   29 D1:A906 -  -  -  -      ;;ex              DE, HL
   30 D1:A906 -  -  -  -      ;;add             HL, DE
   31 D1:A906 -  -  -  -      ;ld              (SaveLocation), HL
   32 D1:A906 -  -  -  -  
   33 D1:A906 21 00 02 E3 	ld              hl,$E30200               ; initializes colors
   34 D1:A90A 06 00 -  -  	ld              b,0
   35 D1:A90C -  -  -  -  
   36 D1:A90C -  -  -  -  _cp1555loop:
   37 D1:A90C 50 -  -  -  	ld d,b
   38 D1:A90D 78 -  -  -  	ld a,b
   39 D1:A90E E6 C0 -  -  	and %11000000
   40 D1:A910 CB 3A -  -  	srl d
   41 D1:A912 1F -  -  -  	rra
   42 D1:A913 5F -  -  -  	ld e,a
   43 D1:A914 3E 1F -  -  	ld a,%00011111
   44 D1:A916 A0 -  -  -  	and b
   45 D1:A917 B3 -  -  -  	or e
   46 D1:A918 77 -  -  -  	ld (hl),a
   47 D1:A919 23 -  -  -  	inc hl
   48 D1:A91A 72 -  -  -  	ld (hl),d
   49 D1:A91B 23 -  -  -  	inc hl
   50 D1:A91C 04 -  -  -  	inc b
   51 D1:A91D 20 ED -  -  	jr nz,_cp1555loop
   52 D1:A91F 3A 00 00 F3 	ld A, ($F30000)                          ; initializes random seed
   53 D1:A923 32 54 AB D1 	ld (seed_lower+1), A
   54 D1:A927 3A 04 00 F3     ld A, ($F30004)
   55 D1:A92B 32 55 AB D1     ld (seed_lower+2), A
   56 D1:A92F 3A 08 00 F3     ld A, ($F30008)
   57 D1:A933 32 51 AB D1     ld (seed_upper+1), A
   58 D1:A937 3A 0C 00 F3     ld A, ($F3000C)
   59 D1:A93B 32 52 AB D1     ld (seed_upper+2), A
   60 D1:A93F -  -  -  -  
   61 D1:A93F C9 -  -  -  	ret
   62 D1:A940 -  -  -  -  
   63 D1:A940 -  -  -  -  
   64 D1:A940 -  -  -  -  
   65 D1:A940 -  -  -  -  get_string_size:							; (pointer(HL) string_ptr) -> int(HL) size
   66 D1:A940 3E 00 -  -  	ld 		A, 0							; byte(A) compare_byte = 0
   67 D1:A942 01 FF 00 00 	ld 		BC, MAX_STRING_SIZE     		; double(BC) fail_save = MAX_STRING_SIZE
   68 D1:A946 -  -  -  -  
   69 D1:A946 E5 -  -  -  	push 	HL								; pointer(DE) string_start = copy string_ptr
   70 D1:A947 D1 -  -  -  	pop		DE								;;
   71 D1:A948 -  -  -  -  	
   72 D1:A948 ED B1 -  -  	CPIR									; while(&string_ptr != compare_byte && fail_save != 0){string_ptr++; fail_save--;}
   73 D1:A94A -  -  -  -  	
   74 D1:A94A B7 -  -  -  	or		A   							;;  size = string_ptr - string_start
   75 D1:A94B ED 52 -  -  	sbc		HL, DE							;; 
   76 D1:A94D 7D -  -  -  	ld      A, L
   77 D1:A94E C9 -  -  -  	ret										; return size
   78 D1:A94F -  -  -  -  
   79 D1:A94F -  -  -  -  
   80 D1:A94F -  -  -  -  
   81 D1:A94F -  -  -  -  get_array_size:
   82 D1:A94F D1 -  -  -      pop     DE
   83 D1:A950 E1 -  -  -      pop     HL
   84 D1:A951 01 00 00 00     ld      BC, 0
   85 D1:A955 4E -  -  -      ld      C, (HL)
   86 D1:A956 23 -  -  -      inc     HL
   87 D1:A957 46 -  -  -      ld      B, (HL)
   88 D1:A958 C5 -  -  -      push    BC
   89 D1:A959 EB -  -  -      ex      DE, HL
   90 D1:A95A E9 -  -  -      jp      (HL)
   91 D1:A95B -  -  -  -  
   92 D1:A95B -  -  -  -  
   93 D1:A95B -  -  -  -  
   94 D1:A95B -  -  -  -  merge_byte_to_int:
   95 D1:A95B E1 -  -  -      pop     HL
   96 D1:A95C 01 00 00 00     ld      BC, 0
   97 D1:A960 F1 -  -  -      pop     AF
   98 D1:A961 47 -  -  -      ld      B, A
   99 D1:A962 F1 -  -  -      pop     AF
  100 D1:A963 4F -  -  -      ld      C, A
  101 D1:A964 C5 -  -  -      push    BC
  102 D1:A965 E9 -  -  -      jp      (HL)
  103 D1:A966 -  -  -  -  
  104 D1:A966 -  -  -  -  
  105 D1:A966 -  -  -  -  
  106 D1:A966 -  -  -  -  get_upper_int:
  107 D1:A966 E1 -  -  -      pop     HL
  108 D1:A967 C1 -  -  -      pop     BC
  109 D1:A968 78 -  -  -      ld      A, B
  110 D1:A969 F5 -  -  -      push    AF
  111 D1:A96A E9 -  -  -      jp      (HL)
  112 D1:A96B -  -  -  -  
  113 D1:A96B -  -  -  -  
  114 D1:A96B -  -  -  -  
  115 D1:A96B -  -  -  -  get_lower_int:
  116 D1:A96B E1 -  -  -      pop     HL
  117 D1:A96C C1 -  -  -      pop     BC
  118 D1:A96D 79 -  -  -      ld      A, C
  119 D1:A96E F5 -  -  -      push    AF
  120 D1:A96F E9 -  -  -      jp      (HL)
  121 D1:A970 -  -  -  -  
  122 D1:A970 -  -  -  -  
  123 D1:A970 -  -  -  -  
  124 D1:A970 -  -  -  -  set_character_cursor:
  125 D1:A970 E1 -  -  -      pop     HL
  126 D1:A971 F1 -  -  -      pop     AF
  127 D1:A972 32 95 05 D0     ld      (curRow),A
  128 D1:A976 F1 -  -  -      pop     AF
  129 D1:A977 32 96 05 D0     ld      (curCol), A
  130 D1:A97B E9 -  -  -      jp      (HL)
  131 D1:A97C -  -  -  -  
  132 D1:A97C -  -  -  -  
  133 D1:A97C -  -  -  -  
  134 D1:A97C -  -  -  -  print_bool:
  135 D1:A97C FE FF -  -  	cp		A, regTRUE
  136 D1:A97E CA 8B A9 D1 	jp		Z, print_bool__true
  137 D1:A982 21 99 A9 D1 	ld		HL, false_string
  138 D1:A986 CD C0 07 02 	call 	_PutS
  139 D1:A98A C9 -  -  -  	ret
  140 D1:A98B -  -  -  -  print_bool__true:
  141 D1:A98B 21 94 A9 D1 	ld		HL, true_string
  142 D1:A98F CD C0 07 02 	call 	_PutS
  143 D1:A993 C9 -  -  -  	ret
  144 D1:A994 -  -  -  -  
  145 D1:A994 -  -  -  -  true_string:
  146 D1:A994 74 72 75 65 
              00 -  -  -  	.db "true",0
  147 D1:A999 -  -  -  -  false_string:
  148 D1:A999 66 61 6C 73 
              65 00 -  -  	.db "false",0
  149 D1:A99F -  -  -  -  
  150 D1:A99F -  -  -  -  
  151 D1:A99F -  -  -  -  
  152 D1:A99F -  -  -  -  printLn_string:
  153 D1:A99F D1 -  -  -      pop         DE
  154 D1:A9A0 E1 -  -  -      pop         HL
  155 D1:A9A1 CD C0 07 02     call        _PutS
  156 D1:A9A5 CD F0 07 02     call        _NewLine
  157 D1:A9A9 EB -  -  -      ex          DE, HL
  158 D1:A9AA E9 -  -  -      jp          (HL)
  159 D1:A9AB -  -  -  -  
  160 D1:A9AB -  -  -  -  
  161 D1:A9AB -  -  -  -  
  162 D1:A9AB -  -  -  -  print_byte:
  163 D1:A9AB D1 -  -  -      pop         DE
  164 D1:A9AC C1 -  -  -      pop         BC
  165 D1:A9AD D5 -  -  -      push        DE
  166 D1:A9AE 21 00 00 00     ld          HL, 0
  167 D1:A9B2 68 -  -  -      ld          L, B
  168 D1:A9B3 CD E0 1E 02     call        _DispHL
  169 D1:A9B7 C9 -  -  -      ret
  170 D1:A9B8 -  -  -  -  
  171 D1:A9B8 -  -  -  -  
  172 D1:A9B8 -  -  -  -  
  173 D1:A9B8 -  -  -  -  printLn_byte:
  174 D1:A9B8 D1 -  -  -      pop         DE
  175 D1:A9B9 C1 -  -  -      pop         BC
  176 D1:A9BA D5 -  -  -      push        DE
  177 D1:A9BB 21 00 00 00     ld          HL, 0
  178 D1:A9BF 68 -  -  -      ld          L, B
  179 D1:A9C0 CD E0 1E 02     call        _DispHL
  180 D1:A9C4 CD F0 07 02     call        _NewLine
  181 D1:A9C8 C9 -  -  -      ret
  182 D1:A9C9 -  -  -  -  
  183 D1:A9C9 -  -  -  -  
  184 D1:A9C9 -  -  -  -  
  185 D1:A9C9 -  -  -  -  print_int:
  186 D1:A9C9 D1 -  -  -      pop         DE
  187 D1:A9CA C1 -  -  -      pop         BC
  188 D1:A9CB D5 -  -  -      push        DE
  189 D1:A9CC 21 00 00 00     ld          HL, 0
  190 D1:A9D0 69 -  -  -      ld          L, C
  191 D1:A9D1 60 -  -  -      ld          H, B
  192 D1:A9D2 CD E0 1E 02     call        _DispHL
  193 D1:A9D6 C9 -  -  -      ret
  194 D1:A9D7 -  -  -  -  
  195 D1:A9D7 -  -  -  -  
  196 D1:A9D7 -  -  -  -  
  197 D1:A9D7 -  -  -  -  printLn_int:
  198 D1:A9D7 D1 -  -  -      pop         DE
  199 D1:A9D8 C1 -  -  -      pop         BC
  200 D1:A9D9 D5 -  -  -      push        DE
  201 D1:A9DA 21 00 00 00     ld          HL, 0
  202 D1:A9DE 69 -  -  -      ld          L, C
  203 D1:A9DF 60 -  -  -      ld          H, B
  204 D1:A9E0 CD E0 1E 02     call        _DispHL
  205 D1:A9E4 CD F0 07 02     call        _NewLine
  206 D1:A9E8 C9 -  -  -      ret
  207 D1:A9E9 -  -  -  -  
  208 D1:A9E9 -  -  -  -  
  209 D1:A9E9 -  -  -  -  
  210 D1:A9E9 -  -  -  -  byte_smaller:
  211 D1:A9E9 BC -  -  -      cp		    A, H
  212 D1:A9EA 38 31 -  -      jr		    C, A_true_ret
  213 D1:A9EC 3E 00 -  -      ld	        A, regFALSE
  214 D1:A9EE C9 -  -  -      ret
  215 D1:A9EF -  -  -  -  
  216 D1:A9EF -  -  -  -  
  217 D1:A9EF -  -  -  -  
  218 D1:A9EF -  -  -  -  byte_higher:
  219 D1:A9EF BC -  -  -      cp		    A, H
  220 D1:A9F0 28 2E -  -      jr		    Z, A_false_ret
  221 D1:A9F2 38 2C -  -      jr		    C, A_false_ret
  222 D1:A9F4 3E FF -  -      ld	        A, regTRUE
  223 D1:A9F6 C9 -  -  -      ret
  224 D1:A9F7 -  -  -  -  
  225 D1:A9F7 -  -  -  -  
  226 D1:A9F7 -  -  -  -  
  227 D1:A9F7 -  -  -  -  byte_higher_or_equals:
  228 D1:A9F7 BC -  -  -      cp		    A, H
  229 D1:A9F8 30 23 -  -      jr		    NC, A_true_ret
  230 D1:A9FA 3E 00 -  -      ld	        A, regFALSE
  231 D1:A9FC C9 -  -  -      ret
  232 D1:A9FD -  -  -  -  
  233 D1:A9FD -  -  -  -  
  234 D1:A9FD -  -  -  -  
  235 D1:A9FD -  -  -  -  byte_lower_or_equals:
  236 D1:A9FD BC -  -  -      cp		    A, H
  237 D1:A9FE 28 1D -  -      jr		    Z, A_true_ret
  238 D1:AA00 38 1B -  -      jr          C, A_true_ret
  239 D1:AA02 3E 00 -  -      ld	        A, regFALSE
  240 D1:AA04 C9 -  -  -      ret
  241 D1:AA05 -  -  -  -  
  242 D1:AA05 -  -  -  -  
  243 D1:AA05 -  -  -  -  
  244 D1:AA05 -  -  -  -  byte_equals:
  245 D1:AA05 BC -  -  -      cp	        A, H
  246 D1:AA06 DA 20 AA D1     jp          C, A_false_ret
  247 D1:AA0A CA 1D AA D1     jp          Z, A_true_ret
  248 D1:AA0E 3E 00 -  -      ld          A, regFALSE
  249 D1:AA10 C9 -  -  -      ret
  250 D1:AA11 -  -  -  -  
  251 D1:AA11 -  -  -  -  
  252 D1:AA11 -  -  -  -  
  253 D1:AA11 -  -  -  -  byte_not_equals:
  254 D1:AA11 BC -  -  -      cp	        A, H
  255 D1:AA12 DA 1D AA D1     jp          C, A_true_ret
  256 D1:AA16 CA 20 AA D1     jp          Z, A_false_ret
  257 D1:AA1A 3E FF -  -      ld          A, regTRUE
  258 D1:AA1C C9 -  -  -      ret
  259 D1:AA1D -  -  -  -  
  260 D1:AA1D -  -  -  -  
  261 D1:AA1D -  -  -  -  
  262 D1:AA1D -  -  -  -  A_true_ret:
  263 D1:AA1D 3E FF -  -      ld          A, regTRUE
  264 D1:AA1F C9 -  -  -      ret
  265 D1:AA20 -  -  -  -  
  266 D1:AA20 -  -  -  -  
  267 D1:AA20 -  -  -  -  
  268 D1:AA20 -  -  -  -  A_false_ret:
  269 D1:AA20 3E 00 -  -      ld          A, regFALSE
  270 D1:AA22 C9 -  -  -      ret
  271 D1:AA23 -  -  -  -  
  272 D1:AA23 -  -  -  -  
  273 D1:AA23 -  -  -  -  
  274 D1:AA23 -  -  -  -  int_smaller:
  275 D1:AA23 B7 -  -  -      or          A
  276 D1:AA24 ED 52 -  -      sbc         HL, DE
  277 D1:AA26 19 -  -  -      add         HL, DE
  278 D1:AA27 DA 1D AA D1     jp          C, A_true_ret
  279 D1:AA2B 3E 00 -  -      ld          A, regFALSE
  280 D1:AA2D C9 -  -  -      ret
  281 D1:AA2E -  -  -  -  
  282 D1:AA2E -  -  -  -  
  283 D1:AA2E -  -  -  -  
  284 D1:AA2E -  -  -  -  int_higher:
  285 D1:AA2E B7 -  -  -      or          A
  286 D1:AA2F ED 52 -  -      sbc         HL, DE
  287 D1:AA31 19 -  -  -      add         HL, DE
  288 D1:AA32 CA 20 AA D1     jp          Z, A_false_ret
  289 D1:AA36 D2 1D AA D1     jp          NC, A_true_ret
  290 D1:AA3A 3E 00 -  -      ld          A, regFALSE
  291 D1:AA3C C9 -  -  -      ret
  292 D1:AA3D -  -  -  -  
  293 D1:AA3D -  -  -  -  
  294 D1:AA3D -  -  -  -  
  295 D1:AA3D -  -  -  -  int_higher_or_equals:
  296 D1:AA3D B7 -  -  -      or          A
  297 D1:AA3E ED 52 -  -      sbc         HL, DE
  298 D1:AA40 19 -  -  -      add         HL, DE
  299 D1:AA41 D2 1D AA D1     jp          NC, A_true_ret
  300 D1:AA45 3E 00 -  -      ld          A, regFALSE
  301 D1:AA47 C9 -  -  -      ret
  302 D1:AA48 -  -  -  -  
  303 D1:AA48 -  -  -  -  
  304 D1:AA48 -  -  -  -  
  305 D1:AA48 -  -  -  -  int_smaller_or_equals:
  306 D1:AA48 B7 -  -  -      or          A
  307 D1:AA49 ED 52 -  -      sbc         HL, DE
  308 D1:AA4B 19 -  -  -      add         HL, DE
  309 D1:AA4C CA 1D AA D1     jp          Z, A_true_ret
  310 D1:AA50 DA 1D AA D1     jp          C, A_true_ret
  311 D1:AA54 3E 00 -  -      ld          A, regFALSE
  312 D1:AA56 C9 -  -  -      ret
  313 D1:AA57 -  -  -  -  
  314 D1:AA57 -  -  -  -  
  315 D1:AA57 -  -  -  -  
  316 D1:AA57 -  -  -  -  int_equals:
  317 D1:AA57 B7 -  -  -      or          A
  318 D1:AA58 ED 52 -  -      sbc         HL, DE
  319 D1:AA5A 19 -  -  -      add         HL, DE
  320 D1:AA5B DA 20 AA D1     jp          C, A_false_ret
  321 D1:AA5F CA 1D AA D1     jp          Z, A_true_ret
  322 D1:AA63 3E 00 -  -      ld          A, regFALSE
  323 D1:AA65 C9 -  -  -      ret
  324 D1:AA66 -  -  -  -  
  325 D1:AA66 -  -  -  -  
  326 D1:AA66 -  -  -  -  
  327 D1:AA66 -  -  -  -  int_not_equals:
  328 D1:AA66 B7 -  -  -      or          A
  329 D1:AA67 ED 52 -  -      sbc         HL, DE
  330 D1:AA69 19 -  -  -      add         HL, DE
  331 D1:AA6A DA 1D AA D1     jp          C, A_true_ret
  332 D1:AA6E CA 20 AA D1     jp          Z, A_false_ret
  333 D1:AA72 3E FF -  -      ld          A, regTRUE
  334 D1:AA74 C9 -  -  -      ret
  335 D1:AA75 -  -  -  -  
  336 D1:AA75 -  -  -  -  
  337 D1:AA75 -  -  -  -  
  338 D1:AA75 -  -  -  -  sub_block_enter:
  339 D1:AA75 D1 -  -  -      pop         DE
  340 D1:AA76 21 00 00 00     ld          HL, 0
  341 D1:AA7A 39 -  -  -  	add         HL, SP
  342 D1:AA7B ED 7B F1 AB 
              D1 -  -  -  	ld          SP, (callStack)
  343 D1:AA80 E5 -  -  -  	push        HL
  344 D1:AA81 ED 73 F1 AB 
              D1 -  -  -  	ld          (callStack), SP
  345 D1:AA86 F9 -  -  -  	ld          SP, HL
  346 D1:AA87 EB -  -  -  	ex          DE, HL
  347 D1:AA88 E9 -  -  -  	jp          (HL)
  348 D1:AA89 -  -  -  -  
  349 D1:AA89 -  -  -  -  
  350 D1:AA89 -  -  -  -  
  351 D1:AA89 -  -  -  -  sub_block_leave:
  352 D1:AA89 D1 -  -  -      pop         DE
  353 D1:AA8A ED 7B F1 AB 
              D1 -  -  -      ld          SP,(callStack)
  354 D1:AA8F E1 -  -  -      pop         HL
  355 D1:AA90 ED 73 F1 AB 
              D1 -  -  -      ld          (callStack),SP
  356 D1:AA95 F9 -  -  -      ld          SP,HL
  357 D1:AA96 EB -  -  -  	ex          DE, HL
  358 D1:AA97 E9 -  -  -      jp          (HL)
  359 D1:AA98 -  -  -  -  
  360 D1:AA98 -  -  -  -  
  361 D1:AA98 -  -  -  -  multi_block_leave:
  362 D1:AA98 E1 -  -  -      pop         HL
  363 D1:AA99 22 03 A9 D1     ld          (Var_Safe1), HL
  364 D1:AA9D ED 7B F1 AB 
              D1 -  -  -      ld          SP,(callStack)
  365 D1:AAA2 -  -  -  -  multi_block_loop:
  366 D1:AAA2 E1 -  -  -      pop         HL
  367 D1:AAA3 10 FD -  -      djnz        multi_block_loop
  368 D1:AAA5 ED 73 F1 AB 
              D1 -  -  -      ld          (callStack),SP
  369 D1:AAAA F9 -  -  -      ld          SP,HL
  370 D1:AAAB 2A 03 A9 D1 	ld          HL, (Var_Safe1)
  371 D1:AAAF E9 -  -  -  	jp          (HL)
  372 D1:AAB0 -  -  -  -  
  373 D1:AAB0 -  -  -  -  
  374 D1:AAB0 -  -  -  -  
  375 D1:AAB0 -  -  -  -  index_out_of_bounds:
  376 D1:AAB0 21 BC AA D1     ld      HL, index_out_of_bounds__message
  377 D1:AAB4 CD C0 07 02     call    _PutS
  378 D1:AAB8 C3 F5 A8 D1     jp      ProgramExit
  379 D1:AABC -  -  -  -  
  380 D1:AABC -  -  -  -  index_out_of_bounds__message:
  381 D1:AABC 69 6E 64 65 
              78 20 6F 75 
              74 20 6F 66 
              20 62 6F 75 
              6E 64 73 21 
              00 -  -  -      .db     "index out of bounds!", 0
  382 D1:AAD1 -  -  -  -  
  383 D1:AAD1 -  -  -  -  
  384 D1:AAD1 -  -  -  -  
  385 D1:AAD1 -  -  -  -  multiply_int:; num1: int(DE), num2(BC): int -> int(HL)
  386 D1:AAD1 21 00 00 00    ld	hl, 0
  387 D1:AAD5 -  -  -  -  
  388 D1:AAD5 CB 23 -  -     sla	e
  389 D1:AAD7 CB 12 -  -     rl	d
  390 D1:AAD9 30 02 -  -     jr	nc, $+4
  391 D1:AADB 60 -  -  -     ld	h, b
  392 D1:AADC 69 -  -  -     ld	l, c
  393 D1:AADD -  -  -  -  
  394 D1:AADD 3E 0F -  -     ld	a, 15
  395 D1:AADF -  -  -  -  multiply_int__loop:
  396 D1:AADF 29 -  -  -     add	hl, hl
  397 D1:AAE0 CB 13 -  -     rl	e
  398 D1:AAE2 CB 12 -  -     rl	d
  399 D1:AAE4 30 04 -  -     jr	nc, $+6
  400 D1:AAE6 09 -  -  -     add	hl, bc
  401 D1:AAE7 30 01 -  -     jr	nc, $+3
  402 D1:AAE9 13 -  -  -     inc	de
  403 D1:AAEA -  -  -  -  
  404 D1:AAEA 3D -  -  -     dec	a
  405 D1:AAEB 20 F2 -  -     jr	nz, multiply_int__loop
  406 D1:AAED -  -  -  -  
  407 D1:AAED C9 -  -  -     ret
  408 D1:AAEE -  -  -  -  
  409 D1:AAEE -  -  -  -  
  410 D1:AAEE -  -  -  -  
  411 D1:AAEE -  -  -  -  divide_byte:
  412 D1:AAEE E1 -  -  -      pop         HL
  413 D1:AAEF C1 -  -  -      pop         BC
  414 D1:AAF0 F1 -  -  -      pop         AF
  415 D1:AAF1 0E 00 -  -  	ld          C,$00
  416 D1:AAF3 -  -  -  -  
  417 D1:AAF3 -  -  -  -  divide_byte__loop:
  418 D1:AAF3 0C -  -  -  	inc         C
  419 D1:AAF4 90 -  -  -  	sub         A, B
  420 D1:AAF5 28 06 -  -  	jr          Z, divide_byte__end
  421 D1:AAF7 30 FA -  -  	jr          NC,divide_byte__loop
  422 D1:AAF9 -  -  -  -  
  423 D1:AAF9 -  -  -  -  divide_byte__overflow:
  424 D1:AAF9 79 -  -  -  	ld          A, C
  425 D1:AAFA 3D -  -  -      dec         A
  426 D1:AAFB F5 -  -  -      push        AF
  427 D1:AAFC E9 -  -  -      jp          (HL)
  428 D1:AAFD -  -  -  -  
  429 D1:AAFD -  -  -  -  divide_byte__end:
  430 D1:AAFD 79 -  -  -      ld          A, C
  431 D1:AAFE F5 -  -  -      push        AF
  432 D1:AAFF E9 -  -  -      jp          (HL)
  433 D1:AB00 -  -  -  -  
  434 D1:AB00 -  -  -  -  
  435 D1:AB00 -  -  -  -  
  436 D1:AB00 -  -  -  -  modulo_byte:
  437 D1:AB00 E1 -  -  -      pop         HL
  438 D1:AB01 C1 -  -  -      pop         BC
  439 D1:AB02 F1 -  -  -      pop         AF
  440 D1:AB03 -  -  -  -  
  441 D1:AB03 B8 -  -  -      cp          A, B
  442 D1:AB04 DA 0E AB D1     jp          C, modulo_byte__end
  443 D1:AB08 -  -  -  -  modulo_byte__loop:
  444 D1:AB08 90 -  -  -      sub         A, B
  445 D1:AB09 B8 -  -  -      cp          A, B
  446 D1:AB0A D2 08 AB D1     jp          NC, modulo_byte__loop
  447 D1:AB0E -  -  -  -  
  448 D1:AB0E -  -  -  -  modulo_byte__end:
  449 D1:AB0E F5 -  -  -      push        AF
  450 D1:AB0F E9 -  -  -      jp          (HL)
  451 D1:AB10 -  -  -  -  
  452 D1:AB10 -  -  -  -  
  453 D1:AB10 -  -  -  -  
  454 D1:AB10 -  -  -  -  
  455 D1:AB10 -  -  -  -  divide_long_byte: ;DE HL / A -> DEHL
  456 D1:AB10 AF -  -  -     xor	a
  457 D1:AB11 06 20 -  -     ld	b, 32
  458 D1:AB13 -  -  -  -  
  459 D1:AB13 -  -  -  -  divide_long_byte__loop:
  460 D1:AB13 29 -  -  -     add	hl, hl
  461 D1:AB14 CB 13 -  -     rl	e
  462 D1:AB16 CB 12 -  -     rl	d
  463 D1:AB18 17 -  -  -     rla
  464 D1:AB19 38 03 -  -     jr	c, $+5
  465 D1:AB1B B9 -  -  -     cp	c
  466 D1:AB1C 38 02 -  -     jr	c, $+4
  467 D1:AB1E -  -  -  -  
  468 D1:AB1E 91 -  -  -     sub	c
  469 D1:AB1F 2C -  -  -     inc	l
  470 D1:AB20 -  -  -  -  
  471 D1:AB20 10 F1 -  -     djnz	divide_long_byte__loop
  472 D1:AB22 -  -  -  -  
  473 D1:AB22 C9 -  -  -     ret
  474 D1:AB23 -  -  -  -  
  475 D1:AB23 -  -  -  -  
  476 D1:AB23 -  -  -  -  
  477 D1:AB23 -  -  -  -  sleep:
  478 D1:AB23 B7 -  -  -      or          A
  479 D1:AB24 11 00 00 00     ld          DE, 0
  480 D1:AB28 -  -  -  -  sleep__loop:
  481 D1:AB28 2B -  -  -      dec         HL
  482 D1:AB29 ED 52 -  -      sbc         HL, DE
  483 D1:AB2B 19 -  -  -      add         HL, DE
  484 D1:AB2C 20 FA -  -      jr	        nz, sleep__loop
  485 D1:AB2E -  -  -  -  
  486 D1:AB2E C9 -  -  -      ret
  487 D1:AB2F -  -  -  -  
  488 D1:AB2F -  -  -  -  
  489 D1:AB2F -  -  -  -  
  490 D1:AB2F -  -  -  -  sleep_millis:
  491 D1:AB2F E1 -  -  -      pop         HL
  492 D1:AB30 22 03 A9 D1     ld          (Var_Safe1), HL
  493 D1:AB34 -  -  -  -  
  494 D1:AB34 E1 -  -  -      pop         HL
  495 D1:AB35 01 00 00 00     ld          BC, 0
  496 D1:AB39 -  -  -  -  
  497 D1:AB39 -  -  -  -  sleep_millis__loop:
  498 D1:AB39 E5 -  -  -      push        HL
  499 D1:AB3A 21 F4 01 00     ld          HL, 500
  500 D1:AB3E CD 23 AB D1     call        sleep
  501 D1:AB42 E1 -  -  -      pop         HL
  502 D1:AB43 -  -  -  -  
  503 D1:AB43 2B -  -  -      dec         HL
  504 D1:AB44 ED 42 -  -      sbc         HL, BC
  505 D1:AB46 09 -  -  -      add         HL, BC
  506 D1:AB47 C2 39 AB D1     jp          nz, sleep_millis__loop
  507 D1:AB4B -  -  -  -  
  508 D1:AB4B -  -  -  -  
  509 D1:AB4B 2A 03 A9 D1     ld          HL, (Var_Safe1)
  510 D1:AB4F E9 -  -  -      jp          (HL)
  511 D1:AB50 -  -  -  -  
  512 D1:AB50 -  -  -  -  
  513 D1:AB50 -  -  -  -  
  514 D1:AB50 -  -  -  -  seed_upper:
  515 D1:AB50 00 D0 50 -      .db 00,208,80
  516 D1:AB53 -  -  -  -  seed_lower:
  517 D1:AB53 00 1F DD -      .db 00,31,221
  518 D1:AB56 -  -  -  -  
  519 D1:AB56 -  -  -  -  random_number:
  520 D1:AB56 2A 50 AB D1     ld hl,(seed_upper)
  521 D1:AB5A 44 -  -  -      ld b,h
  522 D1:AB5B 4D -  -  -      ld c,l
  523 D1:AB5C 29 -  -  -      add hl,hl
  524 D1:AB5D 29 -  -  -      add hl,hl
  525 D1:AB5E 2C -  -  -      inc l
  526 D1:AB5F 09 -  -  -      add hl,bc
  527 D1:AB60 22 50 AB D1     ld (seed_upper),hl
  528 D1:AB64 2A 53 AB D1     ld hl,(seed_lower)
  529 D1:AB68 29 -  -  -      add hl,hl
  530 D1:AB69 9F -  -  -      sbc a,a
  531 D1:AB6A E6 2D -  -      and %00101101
  532 D1:AB6C AD -  -  -      xor l
  533 D1:AB6D 6F -  -  -      ld l,a
  534 D1:AB6E 22 53 AB D1     ld (seed_lower),hl
  535 D1:AB72 09 -  -  -      add hl,bc
  536 D1:AB73 C9 -  -  -      ret
  537 D1:AB74 -  -  -  -  
  538 D1:AB74 -  -  -  -  
  539 D1:AB74 -  -  -  -  
  540 D1:AB74 -  -  -  -  copy_array:
  541 D1:AB74 E1 -  -  -      pop          HL
  542 D1:AB75 22 03 A9 D1     ld           (Var_Safe1), HL
  543 D1:AB79 -  -  -  -  
  544 D1:AB79 D1 -  -  -      pop         DE
  545 D1:AB7A E1 -  -  -      pop         HL
  546 D1:AB7B D5 -  -  -      push        DE
  547 D1:AB7C -  -  -  -  
  548 D1:AB7C -  -  -  -  
  549 D1:AB7C 01 00 00 00     ld          BC, 0
  550 D1:AB80 4E -  -  -      ld          C, (HL)
  551 D1:AB81 23 -  -  -      inc         HL
  552 D1:AB82 46 -  -  -      ld          B, (HL)
  553 D1:AB83 2B -  -  -      dec         HL
  554 D1:AB84 -  -  -  -  
  555 D1:AB84 03 -  -  -      inc         BC
  556 D1:AB85 03 -  -  -      inc         BC
  557 D1:AB86 -  -  -  -  
  558 D1:AB86 -  -  -  -  
  559 D1:AB86 ED B0 -  -      LDIR
  560 D1:AB88 -  -  -  -  
  561 D1:AB88 2A 03 A9 D1     ld          HL, (Var_Safe1)
  562 D1:AB8C E9 -  -  -      jp          (HL)
  563 D1:AB8D -  -  -  -  
  564 D1:AB8D -  -  -  -  
  565 D1:AB8D -  -  -  -  thrown_error:
  566 D1:AB8D E1 -  -  -      pop         HL
  567 D1:AB8E CD C0 07 02     call        _PutS
  568 D1:AB92 CD 8C 0D 02     call        _getKey
  569 D1:AB96 -  -  -  -  
  570 D1:AB96 C3 F5 A8 D1     jp           ProgramExit
  571 D1:AB9A -  -  -  -  
  572 D1:AB9A -  -  -  -  
  573 D1:AB9A -  -  -  -  
  574 D1:AB9A -  -  -  -  KEY_MAPPING:
  575 D1:AB9A 21 30 -  -      .db $21, $30
  576 D1:AB9C 22 31 -  -      .db $22, $31
  577 D1:AB9E 1A 32 -  -      .db $1A, $32
  578 D1:ABA0 12 33 -  -      .db $12, $33
  579 D1:ABA2 23 34 -  -      .db $23, $34
  580 D1:ABA4 1B 35 -  -      .db $1B, $35
  581 D1:ABA6 13 36 -  -      .db $13, $36
  582 D1:ABA8 24 37 -  -      .db $24, $37
  583 D1:ABAA 1C 38 -  -      .db $1C, $38
  584 D1:ABAC 14 39 -  -      .db $14, $39
  585 D1:ABAE 0C 2A -  -      .db $0C, $2A
  586 D1:ABB0 0B 2D -  -      .db $0B, $2D
  587 D1:ABB2 0A 2B -  -      .db $0A, $2B
  588 D1:ABB4 25 2C -  -      .db $25, $2C
  589 D1:ABB6 19 2E -  -      .db $19, $2E
  590 D1:ABB8 -  -  -  -  
  591 D1:ABB8 -  -  -  -  ALPHA_KEY_MAPPING:
  592 D1:ABB8 2F 61 -  -      .db $2F, $61
  593 D1:ABBA 27 62 -  -      .db $27, $62
  594 D1:ABBC 1F 63 -  -      .db $1F, $63
  595 D1:ABBE 2E 64 -  -      .db $2E, $64
  596 D1:ABC0 26 65 -  -      .db $26, $65
  597 D1:ABC2 1E 66 -  -      .db $1E, $66
  598 D1:ABC4 16 67 -  -      .db $16, $67
  599 D1:ABC6 0E 68 -  -      .db $0E, $68
  600 D1:ABC8 2D 69 -  -      .db $2D, $69
  601 D1:ABCA 25 6A -  -      .db $25, $6A
  602 D1:ABCC 1D 6B -  -      .db $1D, $6B
  603 D1:ABCE 15 6C -  -      .db $15, $6C
  604 D1:ABD0 0D 6D -  -      .db $0D, $6D
  605 D1:ABD2 2C 6E -  -      .db $2C, $6E
  606 D1:ABD4 24 6F -  -      .db $24, $6F
  607 D1:ABD6 1C 70 -  -      .db $1C, $70
  608 D1:ABD8 14 71 -  -      .db $14, $71
  609 D1:ABDA 0C 72 -  -      .db $0C, $72
  610 D1:ABDC 2B 73 -  -      .db $2B, $73
  611 D1:ABDE 23 74 -  -      .db $23, $74
  612 D1:ABE0 1B 75 -  -      .db $1B, $75
  613 D1:ABE2 13 76 -  -      .db $13, $76
  614 D1:ABE4 0B 77 -  -      .db $0B, $77
  615 D1:ABE6 2A 78 -  -      .db $2A, $78
  616 D1:ABE8 22 79 -  -      .db $22, $79
  617 D1:ABEA 1A 7A -  -      .db $1A, $7A
  618 D1:ABEC 21 20 -  -      .db $21, $20
Listing for file "asm/main.asm"
   57 D1:ABEE -  -  -  -  StackSave:
   58 D1:ABEE 00 00 00 -  	.db          0,0,0
   59 D1:ABF1 -  -  -  -  CallStack:
   60 D1:ABF1 00 00 00 -  	.db          0,0,0
   61 D1:ABF4 -  -  -  -  SaveLocation:
   62 D1:ABF4 00 00 00 -  	.db          0,0,0
   63 D1:ABF7 -  -  -  -  stackStart .equ saveSScreen+7315
   64 D1:ABF7 -  -  -  -  callStackStart .equ saveSScreen+14630
   65 D1:ABF7 -  -  -  -  globalVars .equ pixelShadow
   66 D1:ABF7 -  -  -  -  
   67 D1:ABF7 -  -  -  -  fib_2:
   68 D1:ABF7 DD E5 -  -  	push         IX
   69 D1:ABF9 ED 73 F1 AB 
              D1 -  -  -  	ld           (callStack),SP
   70 D1:ABFE F9 -  -  -  	ld           SP,HL
   71 D1:ABFF DD 21 03 00 
              00 -  -  -  	ld           IX,3
   72 D1:AC04 DD 39 -  -  	add          IX,SP
   73 D1:AC06 CD 75 AA D1 	call         sub_block_enter
   74 D1:AC0A DD 27 FD -  	ld           HL,(IX-3)
   75 D1:AC0D E5 -  -  -  	push         HL
   76 D1:AC0E 3E 01 -  -  	ld           A,1
   77 D1:AC10 F5 -  -  -  	push         AF
   78 D1:AC11 E1 -  -  -  	pop          HL
   79 D1:AC12 F1 -  -  -  	pop          AF
   80 D1:AC13 CD 05 AA D1 	call         byte_equals
   81 D1:AC17 F5 -  -  -  	push         AF
   82 D1:AC18 DD 27 FD -  	ld           HL,(IX-3)
   83 D1:AC1B E5 -  -  -  	push         HL
   84 D1:AC1C 3E 00 -  -  	ld           A,0
   85 D1:AC1E F5 -  -  -  	push         AF
   86 D1:AC1F E1 -  -  -  	pop          HL
   87 D1:AC20 F1 -  -  -  	pop          AF
   88 D1:AC21 CD 05 AA D1 	call         byte_equals
   89 D1:AC25 F5 -  -  -  	push         AF
   90 D1:AC26 E1 -  -  -  	pop          HL
   91 D1:AC27 F1 -  -  -  	pop          AF
   92 D1:AC28 B4 -  -  -  	or           A,H
   93 D1:AC29 FE FF -  -  	cp           A,%11111111
   94 D1:AC2B C2 43 AC D1 	jp           NZ,if_next_10
   95 D1:AC2F 21 01 00 00 	ld           HL,1
   96 D1:AC33 E5 -  -  -  	push         HL
   97 D1:AC34 D1 -  -  -  	pop          DE
   98 D1:AC35 06 01 -  -  	ld           B,1
   99 D1:AC37 CD 98 AA D1 	call         multi_block_leave
  100 D1:AC3B C3 9D AC D1 	jp           fib_end_3
  101 D1:AC3F C3 95 AC D1 	jp           if_end_9
  102 D1:AC43 -  -  -  -  if_next_10:
  103 D1:AC43 CD 75 AA D1 	call         sub_block_enter
  104 D1:AC47 DD 27 FD -  	ld           HL,(IX-3)
  105 D1:AC4A E5 -  -  -  	push         HL
  106 D1:AC4B F1 -  -  -  	pop          AF
  107 D1:AC4C 3D -  -  -  	dec          A
  108 D1:AC4D F5 -  -  -  	push         AF
  109 D1:AC4E 21 00 00 00 	ld           HL,0
  110 D1:AC52 39 -  -  -  	add          HL,SP
  111 D1:AC53 ED 7B F1 AB 
              D1 -  -  -  	ld           SP,(callStack)
  112 D1:AC58 CD F7 AB D1 	call         fib_2
  113 D1:AC5C E1 -  -  -  	pop          HL
  114 D1:AC5D ED 73 F1 AB 
              D1 -  -  -  	ld           (callStack),SP
  115 D1:AC62 F9 -  -  -  	ld           SP,HL
  116 D1:AC63 D5 -  -  -  	push         DE
  117 D1:AC64 CD 75 AA D1 	call         sub_block_enter
  118 D1:AC68 DD 27 FD -  	ld           HL,(IX-3)
  119 D1:AC6B 7C -  -  -  	ld           A,H
  120 D1:AC6C D6 02 -  -  	sub          A,2
  121 D1:AC6E 67 -  -  -  	ld           H,A
  122 D1:AC6F E5 -  -  -  	push         HL
  123 D1:AC70 21 00 00 00 	ld           HL,0
  124 D1:AC74 39 -  -  -  	add          HL,SP
  125 D1:AC75 ED 7B F1 AB 
              D1 -  -  -  	ld           SP,(callStack)
  126 D1:AC7A CD F7 AB D1 	call         fib_2
  127 D1:AC7E E1 -  -  -  	pop          HL
  128 D1:AC7F ED 73 F1 AB 
              D1 -  -  -  	ld           (callStack),SP
  129 D1:AC84 F9 -  -  -  	ld           SP,HL
  130 D1:AC85 D5 -  -  -  	push         DE
  131 D1:AC86 E1 -  -  -  	pop          HL
  132 D1:AC87 D1 -  -  -  	pop          DE
  133 D1:AC88 19 -  -  -  	add          HL,DE
  134 D1:AC89 E5 -  -  -  	push         HL
  135 D1:AC8A D1 -  -  -  	pop          DE
  136 D1:AC8B 06 01 -  -  	ld           B,1
  137 D1:AC8D CD 98 AA D1 	call         multi_block_leave
  138 D1:AC91 C3 9D AC D1 	jp           fib_end_3
  139 D1:AC95 -  -  -  -  if_end_9:
  140 D1:AC95 CD 89 AA D1 	call         sub_block_leave
  141 D1:AC99 11 00 00 00 	ld           DE,0
  142 D1:AC9D -  -  -  -  fib_end_3:
  143 D1:AC9D ED 7B F1 AB 
              D1 -  -  -  	ld           SP,(callStack)
  144 D1:ACA2 DD E1 -  -  	pop          IX
  145 D1:ACA4 C9 -  -  -  	ret          
  146 D1:ACA5 -  -  -  -  
